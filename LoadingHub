-- ===================================================================================
--   LIBRERÍA xSOLITOx HUB - Versión 7.0
--   Reingeniería completa con mejoras de UI/UX, nuevos temas y lógica optimizada.
-- ===================================================================================

--[[ BLOQUE 1: FUNCIONES GLOBALES Y DE UTILIDAD ]]
-- Descripción: Contiene funciones esenciales que se usarán en toda la librería.

-- Esto crea: Un sistema para asegurar que la UI se dibuje en la capa más alta posible.
local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

local UserInputService = game:GetService("UserInputService");
local TweenService = game:GetService("TweenService");

-- Esto crea: La función de estilo principal para un look consistente.
-- Aplica un fondo con degradado brillante y un borde con resplandor.
local function ApplyStyledGradientBorder(frame)
	for _, child in ipairs(frame:GetChildren()) do
		if child:IsA("UIGradient") or (child:IsA("UIStroke") and child.Name == "GlowStroke") then
			child:Destroy()
		end
	end
	
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")),
		ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))
	})
	gradient.Rotation = 45 
	gradient.Parent = frame

	local stroke = Instance.new("UIStroke")
    stroke.Name = "GlowStroke"
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 2
    stroke.LineJoinMode = Enum.LineJoinMode.Round
    stroke.Color = Color3.fromRGB(1, 94, 255) 
	stroke.Transparency = 0

    local transparencyGradient = Instance.new("UIGradient")
    transparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2), 
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    transparencyGradient.Rotation = 120
    transparencyGradient.Parent = stroke
    stroke.Parent = frame
	
	return gradient, stroke
end

-- Limpieza inicial de la UI si el script se re-ejecuta
if (game:GetService("CoreGui")):FindFirstChild("xSOLITOx HUB") then
	(game:GetService("CoreGui"))["xSOLITOx HUB"]:Destroy();
end
if (game:GetService("CoreGui")):FindFirstChild("FloatingIconGUI") then
	(game:GetService("CoreGui")).FloatingIconGUI:Destroy()
end

--[[ BLOQUE 2: CONFIGURACIÓN INICIAL Y VARIABLES GLOBALES ]]
-- Descripción: Define colores base, variables de estado y la tabla de temas.

_G.Primary = Color3.fromRGB(100, 100, 100);
_G.Dark = Color3.fromRGB(22, 22, 26);
_G.ActiveSlider = nil -- Variable global para controlar el deslizador activo

-- Esto crea: La paleta de colores para los temas de la interfaz.
local Themes = {
    ["Default"] = {
        Background = Color3.fromRGB(24, 24, 26),
        Dark = Color3.fromRGB(22, 22, 26),
        LighterDark = Color3.fromRGB(40, 40, 44),
        Shadow = Color3.fromRGB(15,15,15),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(180, 180, 180),
        OutlineTransparency = 0.4
    },
    ["Light"] = {
        Background = Color3.fromRGB(245, 245, 245),
        Dark = Color3.fromRGB(230, 230, 230),
        LighterDark = Color3.fromRGB(255, 255, 255),
        Shadow = Color3.fromRGB(180,180,180),
        Text = Color3.fromRGB(10, 10, 10),
        SubText = Color3.fromRGB(80, 80, 80),
        OutlineTransparency = 0.6
    },
    ["Crimson"] = {
        Background = Color3.fromRGB(28, 0, 0),
        Dark = Color3.fromRGB(40, 10, 10),
        LighterDark = Color3.fromRGB(60, 20, 20),
        Shadow = Color3.fromRGB(15,0,0),
        Text = Color3.fromRGB(255, 220, 220),
        SubText = Color3.fromRGB(200, 180, 180),
        OutlineTransparency = 0.4
    },
    ["Glass"] = {
        Background = Color3.fromRGB(10, 10, 15),
        Dark = Color3.fromRGB(20, 20, 25),
        LighterDark = Color3.fromRGB(30, 30, 40),
        Shadow = Color3.fromRGB(15,15,15),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(200, 200, 215),
        OutlineTransparency = 1 -- Sombra invisible
    }
}
local CurrentTheme = "Default"

function CreateRounded(Parent, Size)
	local Rounded = Instance.new("UICorner");
	Rounded.Name = "Rounded";
	Rounded.Parent = Parent;
	Rounded.CornerRadius = UDim.new(0, Size);
end;

function MakeDraggable(topbarobject, object)
	local Dragging = nil;
	local DragInput = nil;
	local DragStart = nil;
	local StartPosition = nil;
	local function Update(input)
		local Delta = input.Position - DragStart;
		local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y);
		local Tween = TweenService:Create(object, TweenInfo.new(0.15), { Position = pos });
		Tween:Play();
	end;
	topbarobject.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true;
			DragStart = input.Position;
			StartPosition = object.Position;
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					Dragging = false;
				end;
			end);
		end;
	end);
	topbarobject.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			DragInput = input;
		end;
	end);
	UserInputService.InputChanged:Connect(function(input)
		if input == DragInput and Dragging then
			Update(input);
		end;
	end);
end;

--[[ BLOQUE 3: CREACIÓN DE INTERFACES DE ALTO NIVEL ]]
-- Descripción: Crea el icono flotante y el sistema de notificaciones.

-- Esto crea: El icono flotante que muestra/oculta la interfaz principal.
local FloatingIconGUI = Instance.new("ScreenGui");
FloatingIconGUI.Name = "FloatingIconGUI";
FloatingIconGUI.Parent = game.CoreGui;
FloatingIconGUI.ZIndexBehavior = Enum.ZIndexBehavior.Global;
FloatingIconGUI.DisplayOrder = 2147483647; -- Máxima prioridad

local OutlineButton = Instance.new("Frame");
OutlineButton.Name = "OutlineButton";
OutlineButton.Parent = FloatingIconGUI;
OutlineButton.ClipsDescendants = true;
OutlineButton.BackgroundColor3 = Themes[CurrentTheme].Dark;
OutlineButton.BackgroundTransparency = 0;
OutlineButton.Position = UDim2.new(0, 10, 0, 10);
OutlineButton.Size = UDim2.new(0, 50, 0, 50);
CreateRounded(OutlineButton, 12);

local ImageButton = Instance.new("ImageButton");
ImageButton.Parent = OutlineButton;
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0);
ImageButton.Size = UDim2.new(0, 40, 0, 40);
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5);
ImageButton.BackgroundColor3 = Themes[CurrentTheme].Dark;
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250);
ImageButton.ImageTransparency = 0;
ImageButton.BackgroundTransparency = 0;
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
ImageButton.AutoButtonColor = false;
MakeDraggable(ImageButton, OutlineButton);
CreateRounded(ImageButton, 10);
ImageButton.MouseButton1Click:connect(function()
	local hub = game.CoreGui:FindFirstChild("xSOLITOx HUB") or get_top_gui():FindFirstChild("xSOLITOx HUB")
	if hub then
		hub.Enabled = not hub.Enabled;
	end
end);

-- Esto crea: El sistema de notificaciones que aparece en pantalla.
local NotificationFrame = Instance.new("ScreenGui");
NotificationFrame.Name = "NotificationFrame";
NotificationFrame.Parent = game.CoreGui;
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global;
NotificationFrame.DisplayOrder = 2147483647;

local NotificationList = {};
local function RemoveOldestNotification()
	if #NotificationList > 0 then
		local removed = table.remove(NotificationList, 1);
		removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
			removed[1]:Destroy();
		end);
	end;
end;
spawn(function()
	while wait() do
		if #NotificationList > 0 then
			wait(2);
			RemoveOldestNotification();
		end;
	end;
end);
local Update = {};
function Update:Notify(desc)
	local Frame = Instance.new("Frame");
	local Image = Instance.new("ImageLabel");
	local Title = Instance.new("TextLabel");
	local Desc = Instance.new("TextLabel");
	local OutlineFrame = Instance.new("Frame");
	OutlineFrame.Name = "OutlineFrame";
	OutlineFrame.Parent = NotificationFrame;
	OutlineFrame.ClipsDescendants = true;
	OutlineFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30);
	OutlineFrame.AnchorPoint = Vector2.new(0.5, 1);
	OutlineFrame.BackgroundTransparency = 0.4;
	OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0);
	OutlineFrame.Size = UDim2.new(0, 412, 0, 72);
	Frame.Name = "Frame";
	Frame.Parent = OutlineFrame;
	Frame.ClipsDescendants = true;
	Frame.AnchorPoint = Vector2.new(0.5, 0.5);
	Frame.BackgroundColor3 = Themes[CurrentTheme].Dark;
	Frame.BackgroundTransparency = 0.1;
	Frame.Position = UDim2.new(0.5, 0, 0.5, 0);
	Frame.Size = UDim2.new(0, 400, 0, 60);
	Image.Name = "Icon";
	Image.Parent = Frame;
	Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	Image.BackgroundTransparency = 1;
	Image.Position = UDim2.new(0, 8, 0, 8);
	Image.Size = UDim2.new(0, 45, 0, 45);
	Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
	Title.Parent = Frame;
	Title.BackgroundColor3 = _G.Primary;
	Title.BackgroundTransparency = 1;
	Title.Position = UDim2.new(0, 55, 0, 14);
	Title.Size = UDim2.new(0, 10, 0, 20);
	Title.Font = Enum.Font.GothamBold;
	Title.Text = "xSOLITOx HUB";
	Title.TextColor3 = Color3.fromRGB(255, 255, 255);
	Title.TextSize = 16;
	Title.TextXAlignment = Enum.TextXAlignment.Left;
	Desc.Parent = Frame;
	Desc.BackgroundColor3 = _G.Primary;
	Desc.BackgroundTransparency = 1;
	Desc.Position = UDim2.new(0, 55, 0, 33);
	Desc.Size = UDim2.new(0, 10, 0, 10);
	Desc.Font = Enum.Font.GothamSemibold;
	Desc.TextTransparency = 0.3;
	Desc.Text = desc;
	Desc.TextColor3 = Color3.fromRGB(200, 200, 200);
	Desc.TextSize = 12;
	Desc.TextXAlignment = Enum.TextXAlignment.Left;
	CreateRounded(Frame, 10);
	CreateRounded(OutlineFrame, 12);
	OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true);
	table.insert(NotificationList, {
		OutlineFrame,
		title
	});
end;
function Update:StartLoad()
	local Loader = Instance.new("ScreenGui");
	Loader.Parent = game.CoreGui;
	Loader.Name = "LoaderGUI"
	Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	Loader.DisplayOrder = 2147483647;
	local LoaderFrame = Instance.new("Frame");
	LoaderFrame.Name = "LoaderFrame";
	LoaderFrame.Parent = Loader;
	LoaderFrame.ClipsDescendants = true;
	LoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
	LoaderFrame.BackgroundTransparency = 0;
	LoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	LoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	LoaderFrame.Size = UDim2.new(1.5, 0, 1.5, 0);
	LoaderFrame.BorderSizePixel = 0;
	local MainLoaderFrame = Instance.new("Frame");
	MainLoaderFrame.Name = "MainLoaderFrame";
	MainLoaderFrame.Parent = LoaderFrame;
	MainLoaderFrame.ClipsDescendants = true;
	MainLoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
	MainLoaderFrame.BackgroundTransparency = 0;
	MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	MainLoaderFrame.Size = UDim2.new(0.5, 0, 0.5, 0);
	MainLoaderFrame.BorderSizePixel = 0;
	local TitleLoader = Instance.new("TextLabel");
	TitleLoader.Parent = MainLoaderFrame;
	TitleLoader.Text = "xSOLITOx HUB";
	TitleLoader.Font = Enum.Font.FredokaOne;
	TitleLoader.TextSize = 50;
	TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255);
	TitleLoader.BackgroundTransparency = 1;
	TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5);
	TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0);
	TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
	TitleLoader.TextTransparency = 0;
	local DescriptionLoader = Instance.new("TextLabel");
	DescriptionLoader.Parent = MainLoaderFrame;
	DescriptionLoader.Text = "Loading..";
	DescriptionLoader.Font = Enum.Font.Gotham;
	DescriptionLoader.TextSize = 15;
	DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255);
	DescriptionLoader.BackgroundTransparency = 1;
	DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5);
	DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0);
	DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
	DescriptionLoader.TextTransparency = 0;
	local LoadingBarBackground = Instance.new("Frame");
	LoadingBarBackground.Parent = MainLoaderFrame;
	LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50);
	LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5);
	LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0);
	LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0);
	LoadingBarBackground.ClipsDescendants = true;
	LoadingBarBackground.BorderSizePixel = 0;
	LoadingBarBackground.ZIndex = 2;
	local LoadingBar = Instance.new("Frame");
	LoadingBar.Parent = LoadingBarBackground;
	ApplyStyledGradientBorder(LoadingBar)
	LoadingBar.Size = UDim2.new(0, 0, 1, 0);
	LoadingBar.ZIndex = 3;
	CreateRounded(LoadingBarBackground, 20);
	CreateRounded(LoadingBar, 20);
	local tweenService = game:GetService("TweenService");
	local dotCount = 0;
	local running = true;
	local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
	local barTweenPart1 = tweenService:Create(LoadingBar, barTweenInfoPart1, {
		Size = UDim2.new(0.25, 0, 1, 0)
	});
	local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
	local barTweenPart2 = tweenService:Create(LoadingBar, barTweenInfoPart2, {
		Size = UDim2.new(1, 0, 1, 0)
	});
	barTweenPart1:Play();
	function Update:Loaded()
		barTweenPart2:Play();
	end;
	barTweenPart1.Completed:Connect(function()
		running = true;
		barTweenPart2.Completed:Connect(function()
			wait(1);
			running = false;
			DescriptionLoader.Text = "Loaded!";
			wait(0.5);
			Loader:Destroy();
		end);
	end);
	spawn(function()
		while running do
			dotCount = (dotCount + 1) % 4;
			local dots = string.rep(".", dotCount);
			DescriptionLoader.Text = "Please wait" .. dots;
			wait(0.5);
		end;
	end);
end;

--[[ BLOQUE 4: SISTEMA DE GUARDADO Y CARGA DE CONFIGURACIÓN ]]
-- Descripción: Gestiona la persistencia de los ajustes del usuario.
local SettingsLib = {
	SaveSettings = true,
	LoadAnimation = true,
    Theme = "Default" -- Se añade el tema al guardado
};
(getgenv()).LoadConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfolder("xSOLITOx HUB") then
			makefolder("xSOLITOx HUB");
		end;
		if not isfolder("xSOLITOx HUB/Library/") then
			makefolder("xSOLITOx HUB/Library/");
		end;
		if not isfile(("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) then
			writefile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json", (game:GetService("HttpService")):JSONEncode(SettingsLib));
		else
			local success, data = pcall(function() return (game:GetService("HttpService")):JSONDecode(readfile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) end)
			if success then
				for i, v in pairs(data) do
					SettingsLib[i] = v;
				end
			end
		end;
		CurrentTheme = SettingsLib.Theme or "Default"
	else
		return warn("Status : Undetected Executor");
	end;
end;
(getgenv()).SaveConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfile(("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) then
			(getgenv()).Load();
		else
			local Array = {};
			for i, v in pairs(SettingsLib) do
				Array[i] = v;
			end;
			writefile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json", (game:GetService("HttpService")):JSONEncode(Array));
		end;
	else
		return warn("Status : Undetected Executor");
	end;
end;
(getgenv()).LoadConfig();
function Update:SaveSettings()
	if SettingsLib.SaveSettings then
		return true;
	end;
	return false;
end;
function Update:LoadAnimation()
	if SettingsLib.LoadAnimation then
		return true;
	end;
	return false;
end;

--[[ BLOQUE 5: CONSTRUCTOR PRINCIPAL DE LA VENTANA (Update:Window) ]]
-- Descripción: La función más importante. Construye toda la interfaz gráfica.
function Update:Window(Config)
	local assetsToLoad = {}
	
	-- Esto crea: La ventana principal de la interfaz.
	assert(Config.SubTitle, "v4");
	local WindowConfig = {
		Size = Config.Size,
		TabWidth = Config.TabWidth
	};
	local osfunc = {};
	local uihide = false;
	local abc = false;
	local currentpage = "";
	local keybind = keybind or Enum.KeyCode.RightControl;
	local yoo = string.gsub(tostring(keybind), "Enum.KeyCode.", "");
	local NoxHub = Instance.new("ScreenGui");
	NoxHub.Name = "xSOLITOx HUB";
	NoxHub.Parent = game.CoreGui;
	NoxHub.DisplayOrder = 2147483646;
	NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	NoxHub.Enabled = false
	
	local OutlineMain = Instance.new("Frame");
	OutlineMain.Name = "OutlineMain";
	OutlineMain.Parent = NoxHub;
	OutlineMain.ClipsDescendants = true;
	OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5);
	OutlineMain.BackgroundColor3 = Themes[CurrentTheme].Shadow;
	OutlineMain.BackgroundTransparency = Themes[CurrentTheme].OutlineTransparency;
	OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0);
	OutlineMain.Size = UDim2.new(0, 0, 0, 0);
	CreateRounded(OutlineMain, 15);
	local Main = Instance.new("Frame");
	Main.Name = "Main";
	Main.Parent = OutlineMain;
	Main.ClipsDescendants = true;
	Main.AnchorPoint = Vector2.new(0.5, 0.5);
	Main.BackgroundColor3 = Themes[CurrentTheme].Background;
	Main.BackgroundTransparency = 0;
	Main.Position = UDim2.new(0.5, 0, 0.5, 0);
	Main.Size = WindowConfig.Size;
	OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true);
	CreateRounded(Main, 12);
	local DragButton = Instance.new("Frame");
	DragButton.Name = "DragButton";
	DragButton.Parent = Main;
	DragButton.Position = UDim2.new(1, 5, 1, 5);
	DragButton.AnchorPoint = Vector2.new(1, 1);
	DragButton.Size = UDim2.new(0, 15, 0, 15);
	DragButton.BackgroundTransparency = 1;
	DragButton.ZIndex = 10;
	local CircleDragButton = Instance.new("UICorner");
	CircleDragButton.Name = "CircleDragButton";
	CircleDragButton.Parent = DragButton;
	CircleDragButton.CornerRadius = UDim.new(0, 99);
	local Top = Instance.new("Frame");
	Top.Name = "Top";
	Top.Parent = Main;
	Top.BackgroundColor3 = Themes[CurrentTheme].LighterDark;
	Top.Size = UDim2.new(1, 0, 0, 40);
	Top.BackgroundTransparency = 1;
	CreateRounded(Top, 5);
	local NameHub = Instance.new("TextLabel");
	NameHub.Name = "NameHub";
	NameHub.Parent = Top;
	NameHub.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	NameHub.BackgroundTransparency = 1;
	NameHub.RichText = true;
	NameHub.Position = UDim2.new(0, 15, 0.5, 0);
	NameHub.AnchorPoint = Vector2.new(0, 0.5);
	NameHub.Size = UDim2.new(0, 1, 0, 25);
	NameHub.Font = Enum.Font.GothamBold;
	NameHub.Text = "xSOLITOx HUB";
	NameHub.TextSize = 20;
	NameHub.TextColor3 = Themes[CurrentTheme].Text;
	NameHub.TextXAlignment = Enum.TextXAlignment.Left;
	local nameHubSize = (game:GetService("TextService")):GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge));
	NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25);
	local SubTitle = Instance.new("TextLabel");
	SubTitle.Name = "SubTitle";
	SubTitle.Parent = NameHub;
	SubTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	SubTitle.BackgroundTransparency = 1;
	SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0);
	SubTitle.Size = UDim2.new(0, 1, 0, 20);
	SubTitle.Font = Enum.Font.Cartoon;
	SubTitle.AnchorPoint = Vector2.new(0, 0.5);
	SubTitle.Text = Config.SubTitle;
	SubTitle.TextSize = 15;
	SubTitle.TextColor3 = Themes[CurrentTheme].SubText;
	local SubTitleSize = (game:GetService("TextService")):GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge));
	SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25);
	local CloseButton = Instance.new("ImageButton");
	CloseButton.Name = "CloseButton";
	CloseButton.Parent = Top;
	CloseButton.BackgroundTransparency = 1;
	CloseButton.AnchorPoint = Vector2.new(1, 0.5);
	CloseButton.Position = UDim2.new(1, -15, 0.5, 0);
	CloseButton.Size = UDim2.new(0, 20, 0, 20);
	CloseButton.Image = "rbxassetid://7743878857";
	CloseButton.ImageTransparency = 0;
	CloseButton.ImageColor3 = Themes[CurrentTheme].SubText;
	CreateRounded(CloseButton, 3);
	CloseButton.MouseButton1Click:connect(function()
		local hub = game.CoreGui:FindFirstChild("xSOLITOx HUB") or get_top_gui():FindFirstChild("xSOLITOx HUB")
		if hub then
			hub.Enabled = not hub.Enabled;
		end
	end);
	local ResizeButton = Instance.new("ImageButton");
	ResizeButton.Name = "ResizeButton";
	ResizeButton.Parent = Top;
	ResizeButton.BackgroundTransparency = 1;
	ResizeButton.AnchorPoint = Vector2.new(1, 0.5);
	ResizeButton.Position = UDim2.new(1, -50, 0.5, 0);
	ResizeButton.Size = UDim2.new(0, 20, 0, 20);
	ResizeButton.Image = "rbxassetid://10734886735";
	ResizeButton.ImageTransparency = 0;
	ResizeButton.ImageColor3 = Themes[CurrentTheme].SubText;
	CreateRounded(ResizeButton, 3);
	local BackgroundSettings = Instance.new("Frame");
	BackgroundSettings.Name = "BackgroundSettings";
	BackgroundSettings.Parent = OutlineMain;
	BackgroundSettings.ClipsDescendants = true;
	BackgroundSettings.Active = true;
	BackgroundSettings.AnchorPoint = Vector2.new(0, 0);
	BackgroundSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10);
	BackgroundSettings.BackgroundTransparency = 1;
	BackgroundSettings.Position = UDim2.new(0, 0, 0, 0);
	BackgroundSettings.Size = UDim2.new(1, 0, 1, 0);
	BackgroundSettings.Visible = false;
	CreateRounded(BackgroundSettings, 15);
	local SettingsFrame = Instance.new("Frame");
	SettingsFrame.Name = "SettingsFrame";
	SettingsFrame.Parent = BackgroundSettings;
	SettingsFrame.ClipsDescendants = true;
	SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	SettingsFrame.BackgroundColor3 = Themes[CurrentTheme].Background;
	SettingsFrame.BackgroundTransparency = 1;
	SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	SettingsFrame.Size = UDim2.new(0,0,0,0);
	CreateRounded(SettingsFrame, 15);
	local CloseSettings = Instance.new("ImageButton");
	CloseSettings.Name = "CloseSettings";
	CloseSettings.Parent = SettingsFrame;
	CloseSettings.BackgroundTransparency = 1;
	CloseSettings.AnchorPoint = Vector2.new(1, 0);
	CloseSettings.Position = UDim2.new(1, -20, 0, 15);
	CloseSettings.Size = UDim2.new(0, 20, 0, 20);
	CloseSettings.Image = "rbxassetid://10747384394";
	CloseSettings.ImageTransparency = 0;
	CloseSettings.ImageColor3 = Themes[CurrentTheme].SubText;
	CreateRounded(CloseSettings, 3);
	CloseSettings.MouseButton1Click:connect(function()
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0,0,0,0), Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
		task.wait(0.3)
		BackgroundSettings.Visible = false;
	end);
	local SettingsButton = Instance.new("ImageButton");
	SettingsButton.Name = "SettingsButton";
	SettingsButton.Parent = Top;
	SettingsButton.BackgroundTransparency = 1;
	SettingsButton.AnchorPoint = Vector2.new(1, 0.5);
	SettingsButton.Position = UDim2.new(1, -85, 0.5, 0);
	SettingsButton.Size = UDim2.new(0, 20, 0, 20);
	SettingsButton.Image = "rbxassetid://10734950020";
	SettingsButton.ImageTransparency = 0;
	SettingsButton.ImageColor3 = Themes[CurrentTheme].SubText;
	CreateRounded(SettingsButton, 3);
	SettingsButton.MouseButton1Click:connect(function()
		BackgroundSettings.Visible = true;
		BackgroundSettings.BackgroundTransparency = 1
		SettingsFrame.Size = UDim2.new(0,0,0,0)
		SettingsFrame.Position = UDim2.new(0.5,0,0.5,0)
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0.7, 0, 0.7, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.3}):Play()
	end);
	local TitleSettings = Instance.new("TextLabel");
	TitleSettings.Name = "TitleSettings";
	TitleSettings.Parent = SettingsFrame;
	TitleSettings.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	TitleSettings.BackgroundTransparency = 1;
	TitleSettings.Position = UDim2.new(0, 20, 0, 15);
	TitleSettings.Size = UDim2.new(1, 0, 0, 20);
	TitleSettings.Font = Enum.Font.GothamBold;
	TitleSettings.AnchorPoint = Vector2.new(0, 0);
	TitleSettings.Text = "Preferencias del usuario";
	TitleSettings.TextSize = 20;
	TitleSettings.TextColor3 = Themes[CurrentTheme].Text;
	TitleSettings.TextXAlignment = Enum.TextXAlignment.Left;
	local SettingsMenuList = Instance.new("Frame");
	SettingsMenuList.Name = "SettingsMenuList";
	SettingsMenuList.Parent = SettingsFrame;
	SettingsMenuList.ClipsDescendants = true;
	SettingsMenuList.AnchorPoint = Vector2.new(0, 0);
	SettingsMenuList.BackgroundColor3 = Themes[CurrentTheme].Background;
	SettingsMenuList.BackgroundTransparency = 1;
	SettingsMenuList.Position = UDim2.new(0, 0, 0, 50);
	SettingsMenuList.Size = UDim2.new(1, 0, 1, -70);
	CreateRounded(SettingsMenuList, 15);
	local ScrollSettings = Instance.new("ScrollingFrame");
	ScrollSettings.Name = "ScrollSettings";
	ScrollSettings.Parent = SettingsMenuList;
	ScrollSettings.Active = true;
	ScrollSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10);
	ScrollSettings.Position = UDim2.new(0, 0, 0, 0);
	ScrollSettings.BackgroundTransparency = 1;
	ScrollSettings.Size = UDim2.new(1, 0, 1, 0);
	ScrollSettings.ScrollBarThickness = 3;
	ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y;
	CreateRounded(SettingsMenuList, 5);
	local SettingsListLayout = Instance.new("UIListLayout");
	SettingsListLayout.Name = "SettingsListLayout";
	SettingsListLayout.Parent = ScrollSettings;
	SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
	SettingsListLayout.Padding = UDim.new(0, 8);
	local PaddingScroll = Instance.new("UIPadding");
	PaddingScroll.Name = "PaddingScroll";
	PaddingScroll.Parent = ScrollSettings;
	function CreateCheckbox(title, state, callback)
		local checked = state or false;
		local Background = Instance.new("Frame");
		Background.Name = "Background";
		Background.Parent = ScrollSettings;
		Background.ClipsDescendants = true;
		Background.BackgroundColor3 = Color3.fromRGB(24, 24, 26);
		Background.BackgroundTransparency = 1;
		Background.Size = UDim2.new(1, 0, 0, 20);
		local Title = Instance.new("TextLabel");
		Title.Name = "Title";
		Title.Parent = Background;
		Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
		Title.BackgroundTransparency = 1;
		Title.Position = UDim2.new(0, 60, 0.5, 0);
		Title.Size = UDim2.new(1, -60, 0, 20);
		Title.Font = Enum.Font.Code;
		Title.AnchorPoint = Vector2.new(0, 0.5);
		Title.Text = title or "";
		Title.TextSize = 15;
		Title.TextColor3 = Themes[CurrentTheme].SubText;
		Title.TextXAlignment = Enum.TextXAlignment.Left;
		
		local CheckboxContainer = Instance.new("Frame")
		CheckboxContainer.Name = "CheckboxContainer"
		CheckboxContainer.Parent = Background
		CheckboxContainer.BackgroundTransparency = 0
		CheckboxContainer.BackgroundColor3 = Color3.fromRGB(100,100,100)
		CheckboxContainer.AnchorPoint = Vector2.new(0, 0.5);
		CheckboxContainer.Position = UDim2.new(0, 30, 0.5, 0);
		CheckboxContainer.Size = UDim2.new(0, 20, 0, 20);
		CreateRounded(CheckboxContainer, 5)

		local Checkbox = Instance.new("ImageButton");
		Checkbox.Name = "Checkbox";
		Checkbox.Parent = CheckboxContainer;
		Checkbox.BackgroundTransparency = 1;
		Checkbox.Size = UDim2.new(1,0,1,0)
		Checkbox.Image = "rbxassetid://10709790644";
		Checkbox.ImageTransparency = 1;
		Checkbox.ImageColor3 = Color3.fromRGB(245, 245, 245);
		
		Checkbox.MouseButton1Click:Connect(function()
			checked = not checked;
			if checked then
				Checkbox.ImageTransparency = 0;
				CheckboxContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				ApplyStyledGradientBorder(CheckboxContainer)
			else
				Checkbox.ImageTransparency = 1;
				CheckboxContainer.BackgroundColor3 = Color3.fromRGB(100, 100, 100);
				if CheckboxContainer:FindFirstChild("UIGradient") then CheckboxContainer.UIGradient:Destroy() end;
				if CheckboxContainer:FindFirstChild("GlowStroke") then CheckboxContainer.GlowStroke:Destroy() end;
			end;
			pcall(callback, checked);
		end);
		if checked then
			Checkbox.ImageTransparency = 0;
			CheckboxContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
			ApplyStyledGradientBorder(CheckboxContainer)
		else
			Checkbox.ImageTransparency = 1;
			CheckboxContainer.BackgroundColor3 = Color3.fromRGB(100, 100, 100);
		end;
		pcall(callback, checked);
	end;
	function CreateButton(title, callback)
		local Background = Instance.new("Frame");
		Background.Name = "Background";
		Background.Parent = ScrollSettings;
		Background.ClipsDescendants = true;
		Background.BackgroundColor3 = Themes[CurrentTheme].Background;
		Background.BackgroundTransparency = 1;
		Background.Size = UDim2.new(1, 0, 0, 36);
		
		local ArrowRight = Instance.new("ImageLabel");
		ArrowRight.Name = "ArrowRight";
		ArrowRight.Parent = Background;
		ArrowRight.BackgroundTransparency = 1;
		ArrowRight.AnchorPoint = Vector2.new(0, 0.5);
		ArrowRight.Position = UDim2.new(0, 10, 0.5, 0); -- Margen izquierdo
		ArrowRight.Size = UDim2.new(0, 15, 0, 15);
		ArrowRight.Image = "rbxassetid://10709768347";
		ArrowRight.ImageTransparency = 0;
		ArrowRight.ImageColor3 = Themes[CurrentTheme].Text;

		local TextLabel = Instance.new("TextLabel");
		TextLabel.Name = "TextLabel";
		TextLabel.Parent = Background;
		TextLabel.BackgroundTransparency = 1;
		TextLabel.AnchorPoint = Vector2.new(0, 0.5);
		TextLabel.Position = UDim2.new(0, 35, 0.5, 0); -- Espacio después de la flecha
		TextLabel.Size = UDim2.new(1, -45, 1, 0); -- Ocupa el resto del espacio
		TextLabel.Font = Enum.Font.Cartoon;
		TextLabel.RichText = true;
		TextLabel.Text = title;
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left;
		TextLabel.TextColor3 = Themes[CurrentTheme].Text;
		TextLabel.TextSize = 15;
		
		local ClickButton = Instance.new("TextButton");
		ClickButton.Name = "ClickButton";
		ClickButton.Parent = Background;
		ClickButton.BackgroundTransparency = 1;
		ClickButton.Size = UDim2.new(1,0,1,0);
		ClickButton.Text = "";
		ClickButton.MouseButton1Click:Connect(callback);

		CreateRounded(Background, 5);
	end;

	CreateCheckbox("Guardar Ajustes", SettingsLib.SaveSettings, function(state)
		SettingsLib.SaveSettings = state;
		(getgenv()).SaveConfig();
	end);
	CreateCheckbox("Animación de Carga", SettingsLib.LoadAnimation, function(state)
		SettingsLib.LoadAnimation = state;
		(getgenv()).SaveConfig();
	end);
	CreateButton("Restablecer Configuración", function()
		if isfolder("xSOLITOx HUB") then
			delfolder("xSOLITOx HUB");
		end;
		Update:Notify("Configuración restablecida!");
	end);
	
	-- Dropdown para temas
	local ThemeDropdown = main:Dropdown("Tema de la Interfaz", {"Default", "Light", "Crimson", "Glass"}, SettingsLib.Theme or "Default", function(selectedTheme)
		SettingsLib.Theme = selectedTheme;
		(getgenv()).SaveConfig();
		Update:Notify("Tema cambiado a "..selectedTheme..". Reinicia el script para aplicar.");
	end);
	ThemeDropdown.Parent = ScrollSettings;

	local Tab = Instance.new("Frame");
	Tab.Name = "Tab";
	Tab.Parent = Main;
	Tab.BackgroundColor3 = Themes[CurrentTheme].LighterDark;
	Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset);
	Tab.BackgroundTransparency = 1;
	Tab.Size = UDim2.new(0, WindowConfig.TabWidth, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8);
	local ScrollTab = Instance.new("ScrollingFrame");
	ScrollTab.Name = "ScrollTab";
	ScrollTab.Parent = Tab;
	ScrollTab.Active = true;
	ScrollTab.BackgroundColor3 = Color3.fromRGB(10, 10, 10);
	ScrollTab.Position = UDim2.new(0, 0, 0, 0);
	ScrollTab.BackgroundTransparency = 1;
	ScrollTab.Size = UDim2.new(1, 0, 1, 0);
	ScrollTab.ScrollBarThickness = 0;
	ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y;
	CreateRounded(Tab, 5);
	local TabListLayout = Instance.new("UIListLayout");
	TabListLayout.Name = "TabListLayout";
	TabListLayout.Parent = ScrollTab;
	TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
	TabListLayout.Padding = UDim.new(0, 2);
	local PPD = Instance.new("UIPadding");
	PPD.Name = "PPD";
	PPD.Parent = ScrollTab;
	local Page = Instance.new("Frame");
	Page.Name = "Page";
	Page.Parent = Main;
	Page.BackgroundColor3 = Themes[CurrentTheme].Dark;
	Page.Position = UDim2.new(0, Tab.Size.X.Offset + 18, 0, Top.Size.Y.Offset);
	Page.Size = UDim2.new(Config.Size.X.Scale, Config.Size.X.Offset - Tab.Size.X.Offset - 25, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8);
	Page.BackgroundTransparency = 1;
	CreateRounded(Page, 3);
	local MainPage = Instance.new("Frame");
	MainPage.Name = "MainPage";
	MainPage.Parent = Page;
	MainPage.ClipsDescendants = true;
	MainPage.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	MainPage.BackgroundTransparency = 1;
	MainPage.Size = UDim2.new(1, 0, 1, 0);
	local PageList = Instance.new("Folder");
	PageList.Name = "PageList";
	PageList.Parent = MainPage;
	local UIPageLayout = Instance.new("UIPageLayout");
	UIPageLayout.Parent = PageList;
	UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder;
	UIPageLayout.EasingDirection = Enum.EasingDirection.InOut;
	UIPageLayout.EasingStyle = Enum.EasingStyle.Quad;
	UIPageLayout.FillDirection = Enum.FillDirection.Vertical;
	UIPageLayout.Padding = UDim.new(0, 10);
	UIPageLayout.TweenTime = 0;
	UIPageLayout.GamepadInputEnabled = false;
	UIPageLayout.ScrollWheelInputEnabled = false;
	UIPageLayout.TouchInputEnabled = false;
	MakeDraggable(Top, OutlineMain);
	UserInputService.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.Insert then
			local hub = game.CoreGui:FindFirstChild("xSOLITOx HUB") or get_top_gui():FindFirstChild("xSOLITOx HUB")
			if hub then
				hub.Enabled = not hub.Enabled;
			end
		end;
	end);
	
	-- Esto crea: La zona invisible para redimensionar la interfaz.
	local BottomResize = Instance.new("Frame")
	BottomResize.Parent = OutlineMain
	BottomResize.Name = "BottomResize"
	BottomResize.Size = UDim2.new(1, 0, 0, 20)
	BottomResize.Position = UDim2.new(0, 0, 1, 0)
	BottomResize.AnchorPoint = Vector2.new(0, 1)
	BottomResize.BackgroundTransparency = 1
	BottomResize.ZIndex = 999

	local RightResize = Instance.new("Frame")
	RightResize.Parent = OutlineMain
	RightResize.Name = "RightResize"
	RightResize.Size = UDim2.new(0, 20, 1, 0)
	RightResize.Position = UDim2.new(1, 0, 0, 0)
	RightResize.AnchorPoint = Vector2.new(1, 0)
	RightResize.BackgroundTransparency = 1
	RightResize.ZIndex = 999

	local Dragging = false;
	local DraggingEdge = nil;

	local function StartResize(input, edge)
		Dragging = true
		DraggingEdge = edge
		DragStart = input.Position
		StartPosition = OutlineMain.AbsoluteSize
	end
	
	BottomResize.InputBegan:Connect(function(input) StartResize(input, "Bottom") end)
	RightResize.InputBegan:Connect(function(input) StartResize(input, "Right") end)

	UserInputService.InputEnded:Connect(function(Input)
		Dragging = false;
		DraggingEdge = nil;
	end);
	
	UserInputService.InputChanged:Connect(function(Input)
		if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
			local Delta = Input.Position - DragStart;
			local newSize = StartPosition
			
			if DraggingEdge == "Bottom" then
				newSize = Vector2.new(StartPosition.X, math.clamp(StartPosition.Y + Delta.Y, WindowConfig.Size.Y.Offset, math.huge))
			elseif DraggingEdge == "Right" then
				newSize = Vector2.new(math.clamp(StartPosition.X + Delta.X, WindowConfig.Size.X.Offset, math.huge), StartPosition.Y)
			end
			
			OutlineMain.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
			Main.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
			Page.Size = UDim2.new(0, math.clamp(newSize.X - Tab.Size.X.Offset - 25, 0, math.huge), 0, math.clamp(newSize.Y - Top.Size.Y.Offset - 8, 0, math.huge));
			Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 0, math.clamp(newSize.Y - Top.Size.Y.Offset - 8, 0, math.huge));
		end;
	end);

	local uitab = {};
	function uitab:Tab(text, img)
		if img and string.find(img, "rbxassetid") then
			table.insert(assetsToLoad, img)
		end

		local BtnStroke = Instance.new("UIStroke");
		local TabButton = Instance.new("TextButton");
		local title = Instance.new("TextLabel");
		local TUICorner = Instance.new("UICorner");
		local UICorner = Instance.new("UICorner");
		local Title = Instance.new("TextLabel");
		TabButton.Parent = ScrollTab;
		TabButton.Name = text .. "Unique";
		TabButton.Text = "";
		TabButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100);
		TabButton.BackgroundTransparency = 1;
		TabButton.Size = UDim2.new(1, 0, 0, 35);
		TabButton.Font = Enum.Font.Nunito;
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255);
		TabButton.TextSize = 12;
		TabButton.TextTransparency = 0.9;
		local SelectedTab = Instance.new("Frame");
		SelectedTab.Name = "SelectedTab";
		SelectedTab.Parent = TabButton;
		ApplyStyledGradientBorder(SelectedTab)
		SelectedTab.BackgroundTransparency = 0;
		SelectedTab.Size = UDim2.new(0, 3, 0, 0);
		SelectedTab.Position = UDim2.new(0, 0, 0.5, 0);
		SelectedTab.AnchorPoint = Vector2.new(0, 0.5);
		UICorner.CornerRadius = UDim.new(0, 100);
		UICorner.Parent = SelectedTab;
		Title.Parent = TabButton;
		Title.Name = "Title";
		Title.BackgroundColor3 = Color3.fromRGB(150, 150, 150);
		Title.BackgroundTransparency = 1;
		Title.Position = UDim2.new(0, 30, 0.5, 0);
		Title.Size = UDim2.new(0, 100, 0, 30);
		Title.Font = Enum.Font.Roboto;
		Title.Text = text;
		Title.AnchorPoint = Vector2.new(0, 0.5);
		Title.TextColor3 = Themes[CurrentTheme].Text;
		Title.TextTransparency = 0.4;
		Title.TextSize = 15; -- Aumentado
		Title.TextXAlignment = Enum.TextXAlignment.Left;
		local IDK = Instance.new("ImageLabel");
		IDK.Name = "IDK";
		IDK.Parent = TabButton;
		IDK.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
		IDK.BackgroundTransparency = 1;
		IDK.ImageTransparency = 0.3;
		IDK.Position = UDim2.new(0, 7, 0.5, 0);
		IDK.Size = UDim2.new(0, 18, 0, 18); -- Aumentado
		IDK.AnchorPoint = Vector2.new(0, 0.5);
		IDK.Image = img;
		CreateRounded(TabButton, 6);
		local MainFramePage = Instance.new("ScrollingFrame");
		MainFramePage.Name = text .. "_Page";
		MainFramePage.Parent = PageList;
		MainFramePage.Active = true;
		MainFramePage.BackgroundColor3 = Themes[CurrentTheme].Dark;
		MainFramePage.Position = UDim2.new(0, 0, 0, 0);
		MainFramePage.BackgroundTransparency = 1;
		MainFramePage.Size = UDim2.new(1, 0, 1, 0);
		MainFramePage.ScrollBarThickness = 2; -- Más visible
		MainFramePage.ScrollingDirection = Enum.ScrollingDirection.Y;
		local zzzR = Instance.new("UICorner");
		zzzR.Parent = MainPage;
		zzzR.CornerRadius = UDim.new(0, 5);
		local UIPadding = Instance.new("UIPadding");
		local UIListLayout = Instance.new("UIListLayout");
		UIPadding.Parent = MainFramePage;
		UIListLayout.Padding = UDim.new(0, 3);
		UIListLayout.Parent = MainFramePage;
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
		TabButton.MouseButton1Click:Connect(function()
			for i, v in next, ScrollTab:GetChildren() do
				if v:IsA("TextButton") then
					(TweenService:Create(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						BackgroundTransparency = 1
					})):Play();
					(TweenService:Create(v.SelectedTab, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(0, 3, 0, 0)
					})):Play();
					(TweenService:Create(v.IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						ImageTransparency = 0.4
					})):Play();
					(TweenService:Create(v.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						TextTransparency = 0.4
					})):Play();
				end;
				(TweenService:Create(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					BackgroundTransparency = 0.8
				})):Play();
				(TweenService:Create(SelectedTab, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					Size = UDim2.new(0, 3, 0, 15)
				})):Play();
				(TweenService:Create(IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					ImageTransparency = 0
				})):Play();
				(TweenService:Create(Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					TextTransparency = 0
				})):Play();
			end;
			for i, v in next, PageList:GetChildren() do
				currentpage = string.gsub(TabButton.Name, "Unique", "") .. "_Page";
				if v.Name == currentpage then
					UIPageLayout:JumpTo(v);
				end;
			end;
		end);
		if abc == false then
			for i, v in next, ScrollTab:GetChildren() do
				if v:IsA("TextButton") then
					(TweenService:Create(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						BackgroundTransparency = 1
					})):Play();
					(TweenService:Create(v.SelectedTab, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(0, 3, 0, 15)
					})):Play();
					(TweenService:Create(v.IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						ImageTransparency = 0.4
					})):Play();
					(TweenService:Create(v.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						TextTransparency = 0.4
					})):Play();
				end;
				(TweenService:Create(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					BackgroundTransparency = 0.8
				})):Play();
				(TweenService:Create(SelectedTab, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					Size = UDim2.new(0, 3, 0, 15)
				})):Play();
				(TweenService:Create(IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					ImageTransparency = 0
				})):Play();
				(TweenService:Create(Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					TextTransparency = 0
				})):Play();
			end;
			UIPageLayout:JumpToIndex(1);
			abc = true;
		end;
		(game:GetService("RunService")).Stepped:Connect(function()
			pcall(function()
				MainFramePage.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y);
				ScrollTab.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y);
				ScrollSettings.CanvasSize = UDim2.new(0, 0, 0, SettingsListLayout.AbsoluteContentSize.Y);
			end);
		end);
		local defaultSize = true;
		ResizeButton.MouseButton1Click:Connect(function()
			if defaultSize then
				defaultSize = false;
				OutlineMain:TweenPosition(UDim2.new(0.5, 0, 0.45, 0), "Out", "Quad", 0.2, true);
				Main:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Quad", 0.4, true, function()
					Page:TweenSize(UDim2.new(0, Main.AbsoluteSize.X - Tab.AbsoluteSize.X - 25, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 10), "Out", "Quad", 0.4, true);
					Tab:TweenSize(UDim2.new(0, WindowConfig.TabWidth, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 10), "Out", "Quad", 0.4, true);
				end);
				OutlineMain:TweenSize(UDim2.new(1, -10, 1, -10), "Out", "Quad", 0.4, true);
				ResizeButton.Image = "rbxassetid://10734895698";
			else
				defaultSize = true;
				Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true, function()
					Page:TweenSize(UDim2.new(0, Main.AbsoluteSize.X - Tab.AbsoluteSize.X - 25, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 10), "Out", "Quad", 0.4, true);
					Tab:TweenSize(UDim2.new(0, WindowConfig.TabWidth, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 10), "Out", "Quad", 0.4, true);
				end);
				OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true);
				ResizeButton.Image = "rbxassetid://10734886735";
			end;
		end);
		local main = {};
		function main:Button(text, callback)
			local Button = Instance.new("Frame");
			local UICorner = Instance.new("UICorner");
			local TextLabel = Instance.new("TextLabel");
			local TextButton = Instance.new("TextButton");
			local UICorner_2 = Instance.new("UICorner");
			local Black = Instance.new("Frame");
			local UICorner_3 = Instance.new("UICorner");
			Button.Name = "Button";
			Button.Parent = MainFramePage;
			Button.BackgroundColor3 = _G.Primary;
			Button.BackgroundTransparency = 1;
			Button.Size = UDim2.new(1, 0, 0, 36);
			UICorner.CornerRadius = UDim.new(0, 5);
			UICorner.Parent = Button;
			local ImageLabel = Instance.new("ImageLabel");
			ImageLabel.Name = "ImageLabel";
			ImageLabel.Parent = TextButton;
			ImageLabel.BackgroundColor3 = _G.Primary;
			ImageLabel.BackgroundTransparency = 1;
			ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5);
			ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0);
			ImageLabel.Size = UDim2.new(0, 15, 0, 15);
			ImageLabel.Image = "rbxassetid://10734898355";
			ImageLabel.ImageTransparency = 0;
			ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255);
			CreateRounded(TextButton, 4);
			TextButton.Name = "TextButton";
			TextButton.Parent = Button;
			TextButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200);
			TextButton.BackgroundTransparency = 0.8;
			TextButton.AnchorPoint = Vector2.new(1, 0.5);
			TextButton.Position = UDim2.new(1, -1, 0.5, 0);
			TextButton.Size = UDim2.new(0, 25, 0, 25);
			TextButton.Font = Enum.Font.Nunito;
			TextButton.Text = "";
			TextButton.TextXAlignment = Enum.TextXAlignment.Left;
			TextButton.TextColor3 = Color3.fromRGB(255, 255, 255);
			TextButton.TextSize = 15;
			TextLabel.Name = "TextLabel";
			TextLabel.Parent = Button;
			TextLabel.BackgroundColor3 = _G.Primary;
			TextLabel.BackgroundTransparency = 1;
			TextLabel.AnchorPoint = Vector2.new(0, 0.5);
			TextLabel.Position = UDim2.new(0, 20, 0.5, 0);
			TextLabel.Size = UDim2.new(1, -50, 1, 0);
			TextLabel.Font = Enum.Font.Cartoon;
			TextLabel.RichText = true;
			TextLabel.Text = text;
			TextLabel.TextXAlignment = Enum.TextXAlignment.Left;
			TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255);
			TextLabel.TextSize = 15;
			TextLabel.ClipsDescendants = true;
			local ArrowRight = Instance.new("ImageLabel");
			ArrowRight.Name = "ArrowRight";
			ArrowRight.Parent = Button;
			ArrowRight.BackgroundColor3 = _G.Primary;
			ArrowRight.BackgroundTransparency = 1;
			ArrowRight.AnchorPoint = Vector2.new(0, 0.5);
			ArrowRight.Position = UDim2.new(0, 0, 0.5, 0);
			ArrowRight.Size = UDim2.new(0, 15, 0, 15);
			ArrowRight.Image = "rbxassetid://10709768347";
			ArrowRight.ImageTransparency = 0;
			ArrowRight.ImageColor3 = Color3.fromRGB(255, 255, 255);
			Black.Name = "Black";
			Black.Parent = Button;
			Black.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
			Black.BackgroundTransparency = 1;
			Black.BorderSizePixel = 0;
			Black.Position = UDim2.new(0, 0, 0, 0);
			Black.Size = UDim2.new(1, 0, 0, 33);
			UICorner_3.CornerRadius = UDim.new(0, 5);
			UICorner_3.Parent = Black;
			TextButton.MouseButton1Click:Connect(function()
				callback();
			end);
		end;
		function main:Toggle(text, config, desc, callback)
			config = config or false;
			local toggled = config;
			local UICorner = Instance.new("UICorner");
			local TogglePadding = Instance.new("UIPadding");
			local UIStroke = Instance.new("UIStroke");
			local Button = Instance.new("TextButton");
			local UICorner_2 = Instance.new("UICorner");
			local Title = Instance.new("TextLabel");
			local Title2 = Instance.new("TextLabel");
			local Desc = Instance.new("TextLabel");
			local ToggleImage = Instance.new("TextButton");
			local UICorner_3 = Instance.new("UICorner");
			local UICorner_5 = Instance.new("UICorner");
			local Circle = Instance.new("Frame");
			local ToggleFrame = Instance.new("Frame");
			local UICorner_4 = Instance.new("UICorner");
			local TextBoxIcon = Instance.new("ImageLabel");
			Button.Name = "Button";
			Button.Parent = MainFramePage;
			Button.BackgroundColor3 = _G.Primary;
			Button.BackgroundTransparency = 0.8;
			Button.AutoButtonColor = false;
			Button.Font = Enum.Font.SourceSans;
			Button.Text = "";
			Button.TextColor3 = Color3.fromRGB(0, 0, 0);
			Button.TextSize = 11;
			CreateRounded(Button, 5);
			Title2.Parent = Button;
			Title2.BackgroundColor3 = Color3.fromRGB(150, 150, 150);
			Title2.BackgroundTransparency = 1;
			Title2.Size = UDim2.new(1, 0, 0, 35);
			Title2.Font = Enum.Font.Cartoon;
			Title2.Text = text;
			Title2.TextColor3 = Themes[CurrentTheme].Text;
			Title2.TextSize = 15;
			Title2.TextXAlignment = Enum.TextXAlignment.Left;
			Title2.AnchorPoint = Vector2.new(0, 0.5);
			Desc.Parent = Title2;
			Desc.BackgroundColor3 = Color3.fromRGB(100, 100, 100);
			Desc.BackgroundTransparency = 1;
			Desc.Position = UDim2.new(0, 0, 0, 22);
			Desc.Size = UDim2.new(0, 280, 0, 16);
			Desc.Font = Enum.Font.Gotham;
			if desc then
				Desc.Text = desc;
				Title2.Position = UDim2.new(0, 15, 0.5, -5);
				Desc.Position = UDim2.new(0, 0, 0, 22);
				Button.Size = UDim2.new(1, 0, 0, 46);
			else
				Title2.Position = UDim2.new(0, 15, 0.5, 0);
				Desc.Visible = false;
				Button.Size = UDim2.new(1, 0, 0, 36);
			end;
			Desc.TextColor3 = Themes[CurrentTheme].SubText;
			Desc.TextSize = 10;
			Desc.TextXAlignment = Enum.TextXAlignment.Left;
			ToggleFrame.Name = "ToggleFrame";
			ToggleFrame.Parent = Button;
			ToggleFrame.BackgroundColor3 = Themes[CurrentTheme].Dark;
			ToggleFrame.BackgroundTransparency = 1;
			ToggleFrame.Position = UDim2.new(1, -10, 0.5, 0);
			ToggleFrame.Size = UDim2.new(0, 35, 0, 20);
			ToggleFrame.AnchorPoint = Vector2.new(1, 0.5);
			UICorner_5.CornerRadius = UDim.new(0, 10);
			UICorner_5.Parent = ToggleFrame;
			ToggleImage.Name = "ToggleImage";
			ToggleImage.Parent = ToggleFrame;
			ToggleImage.BackgroundColor3 = Color3.fromRGB(200, 200, 200);
			ToggleImage.BackgroundTransparency = 0.8;
			ToggleImage.Position = UDim2.new(0, 0, 0, 0);
			ToggleImage.AnchorPoint = Vector2.new(0, 0);
			ToggleImage.Size = UDim2.new(1, 0, 1, 0);
			ToggleImage.Text = "";
			ToggleImage.AutoButtonColor = false;
			CreateRounded(ToggleImage, 10);
			Circle.Name = "Circle";
			Circle.Parent = ToggleImage;
			Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
			Circle.BackgroundTransparency = 0;
			Circle.Position = UDim2.new(0, 3, 0.5, 0);
			Circle.Size = UDim2.new(0, 14, 0, 14);
			Circle.AnchorPoint = Vector2.new(0, 0.5);
			UICorner_4.CornerRadius = UDim.new(0, 10);
			UICorner_4.Parent = Circle;
			
			local function setToggleState(state, playTween)
				local onPosition = UDim2.new(1, -17, 0.5, 0)
				local offPosition = UDim2.new(0, 3, 0.5, 0)

				if state then
					toggled = true;
					if playTween then
						Circle:TweenPosition(onPosition, "Out", "Sine", 0.2, true);
						local tween = TweenService:Create(ToggleImage, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 1 })
						tween:Play()
						tween.Completed:Wait()
						ApplyStyledGradientBorder(ToggleImage)
						TweenService:Create(ToggleImage, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
					else
						Circle.Position = onPosition
						ToggleImage.BackgroundTransparency = 0
						ApplyStyledGradientBorder(ToggleImage)
					end
				else
					toggled = false;
					if ToggleImage:FindFirstChild("UIGradient") then ToggleImage.UIGradient:Destroy() end
					if ToggleImage:FindFirstChild("GlowStroke") then ToggleImage.GlowStroke:Destroy() end
					if playTween then
						Circle:TweenPosition(offPosition, "Out", "Sine", 0.2, true);
						(TweenService:Create(ToggleImage, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
							BackgroundColor3 = Color3.fromRGB(200, 200, 200),
							BackgroundTransparency = 0.8
						})):Play();
					else
						Circle.Position = offPosition
						ToggleImage.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
						ToggleImage.BackgroundTransparency = 0.8
					end
				end
				pcall(callback, toggled);
			end

			ToggleImage.MouseButton1Click:Connect(function()
				setToggleState(not toggled, true)
			end);
			
			setToggleState(config, false)
		end;
		
		-- Esto crea: Un dropdown genérico para listas.
		function main:Dropdown(text, option, var, callback)
			local isdropping = false;
			local Dropdown = Instance.new("Frame");
			local DropdownFrameScroll = Instance.new("Frame");
			local UICorner = Instance.new("UICorner");
			local UICorner_2 = Instance.new("UICorner");
			local UICorner_3 = Instance.new("UICorner");
			local UICorner_4 = Instance.new("UICorner");
			local DropTitle = Instance.new("TextLabel");
			local DropScroll = Instance.new("ScrollingFrame");
			local UIListLayout = Instance.new("UIListLayout");
			local UIPadding = Instance.new("UIPadding");
			local DropButton = Instance.new("TextButton");
			local HideButton = Instance.new("TextButton");
			local SelectItems = Instance.new("TextButton");
			local DropImage = Instance.new("ImageLabel");
			Dropdown.Name = "Dropdown";
			Dropdown.Parent = MainFramePage;
			Dropdown.BackgroundColor3 = Themes[CurrentTheme].LighterDark;
			Dropdown.BackgroundTransparency = 0;
			Dropdown.ClipsDescendants = false;
			Dropdown.Size = UDim2.new(1, 0, 0, 40);
			UICorner.CornerRadius = UDim.new(0, 5);
			UICorner.Parent = Dropdown;
			DropTitle.Name = "DropTitle";
			DropTitle.Parent = Dropdown;
			DropTitle.BackgroundColor3 = _G.Primary;
			DropTitle.BackgroundTransparency = 1;
			DropTitle.Size = UDim2.new(1, 0, 0, 30);
			DropTitle.Font = Enum.Font.Cartoon;
			DropTitle.Text = text;
			DropTitle.TextColor3 = Themes[CurrentTheme].Text;
			DropTitle.TextSize = 16;
			DropTitle.TextXAlignment = Enum.TextXAlignment.Left;
			DropTitle.Position = UDim2.new(0, 15, 0, 5);
			DropTitle.AnchorPoint = Vector2.new(0, 0);
			SelectItems.Name = "SelectItems";
			SelectItems.Parent = Dropdown;
			SelectItems.BackgroundColor3 = Themes[CurrentTheme].Dark;
			SelectItems.TextColor3 = Themes[CurrentTheme].Text;
			SelectItems.BackgroundTransparency = 0;
			SelectItems.Position = UDim2.new(1, -35, 0, 5);
			SelectItems.Size = UDim2.new(0, 100, 0, 30);
			SelectItems.AnchorPoint = Vector2.new(1, 0);
			SelectItems.Font = Enum.Font.GothamMedium;
			SelectItems.AutoButtonColor = false;
			SelectItems.TextSize = 11;
			SelectItems.ZIndex = 1;
			SelectItems.ClipsDescendants = true;
			SelectItems.Text = "   " .. (var or "Seleccionar");
			SelectItems.TextXAlignment = Enum.TextXAlignment.Left;
			
			local ArrowContainer = Instance.new("Frame")
			ArrowContainer.Parent = Dropdown
			ArrowContainer.Size = UDim2.new(0, 30, 0, 30)
			ArrowContainer.Position = UDim2.new(1, -5, 0, 5)
			ArrowContainer.AnchorPoint = Vector2.new(1,0)
			ArrowContainer.BackgroundTransparency = 1
			ArrowContainer.ZIndex = 2
			
			local ArrowDown = Instance.new("ImageLabel");
			ArrowDown.Name = "ArrowDown";
			ArrowDown.Parent = ArrowContainer;
			ArrowDown.BackgroundTransparency = 1;
			ArrowDown.AnchorPoint = Vector2.new(0.5, 0.5);
			ArrowDown.Position = UDim2.new(0.5, 0, 0.5, 0);
			ArrowDown.Size = UDim2.new(0, 20, 0, 20);
			ArrowDown.Image = "rbxassetid://10709790948";
			ArrowDown.ImageTransparency = 0;
			ArrowDown.ImageColor3 = Themes[CurrentTheme].Text;

			CreateRounded(SelectItems, 5);
			CreateRounded(DropScroll, 5);
			DropdownFrameScroll.Name = "DropdownFrameScroll";
			DropdownFrameScroll.Parent = Dropdown;
			DropdownFrameScroll.BackgroundColor3 = Themes[CurrentTheme].Dark;
			DropdownFrameScroll.BackgroundTransparency = 0;
			DropdownFrameScroll.ClipsDescendants = true;
			DropdownFrameScroll.Size = UDim2.new(1, 0, 0, 100);
			DropdownFrameScroll.Position = UDim2.new(0, 5, 0, 40);
			DropdownFrameScroll.Visible = false;
			DropdownFrameScroll.AnchorPoint = Vector2.new(0, 0);
			UICorner_4.Parent = DropdownFrameScroll;
			UICorner_4.CornerRadius = UDim.new(0, 5);
			DropScroll.Name = "DropScroll";
			DropScroll.Parent = DropdownFrameScroll;
			DropScroll.ScrollingDirection = Enum.ScrollingDirection.Y;
			DropScroll.Active = true;
			DropScroll.BackgroundTransparency = 1;
			DropScroll.BorderSizePixel = 0;
			DropScroll.Position = UDim2.new(0, 0, 0, 10);
			DropScroll.Size = UDim2.new(1, 0, 0, 80);
			DropScroll.AnchorPoint = Vector2.new(0, 0);
			DropScroll.ClipsDescendants = true;
			DropScroll.ScrollBarThickness = 3;
			DropScroll.ZIndex = 3;
			local PaddingDrop = Instance.new("UIPadding");
			PaddingDrop.PaddingLeft = UDim.new(0, 10);
			PaddingDrop.PaddingRight = UDim.new(0, 10);
			PaddingDrop.Parent = DropScroll;
			PaddingDrop.Name = "PaddingDrop";
			UIListLayout.Parent = DropScroll;
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
			UIListLayout.Padding = UDim.new(0, 1);
			UIPadding.Parent = DropScroll;
			UIPadding.PaddingLeft = UDim.new(0, 5);
			
			local currentSelection = 1
			if var then
				for i,v in ipairs(option) do
					if v == var then currentSelection = i; break end
				end
			end
			
			local function cycle(dir)
				currentSelection = currentSelection + dir
				if currentSelection > #option then currentSelection = 1 end
				if currentSelection < 1 then currentSelection = #option end
				local selectedValue = option[currentSelection]
				SelectItems.Text = "   " .. selectedValue;
				pcall(callback, selectedValue)
			end
			
			local LeftArrow = Instance.new("TextButton", Dropdown)
			LeftArrow.Size = UDim2.new(0,25,0,25)
			LeftArrow.Position = UDim2.new(1, -140, 0.5, 0)
			LeftArrow.AnchorPoint = Vector2.new(1, 0.5)
			LeftArrow.Text = "<"
			LeftArrow.Font = Enum.Font.GothamBold
			LeftArrow.TextSize = 20
			LeftArrow.TextColor3 = Themes[CurrentTheme].Text
			LeftArrow.BackgroundTransparency = 1
			LeftArrow.MouseButton1Click:Connect(function() cycle(-1) end)

			local RightArrow = Instance.new("TextButton", Dropdown)
			RightArrow.Size = UDim2.new(0,25,0,25)
			RightArrow.Position = UDim2.new(1, -5, 0.5, 0)
			RightArrow.AnchorPoint = Vector2.new(1, 0.5)
			RightArrow.Text = ">"
			RightArrow.Font = Enum.Font.GothamBold
			RightArrow.TextSize = 20
			RightArrow.TextColor3 = Themes[CurrentTheme].Text
			RightArrow.BackgroundTransparency = 1
			RightArrow.MouseButton1Click:Connect(function() cycle(1) end)

			for i, v in next, option do
				local Item = Instance.new("TextButton");
				local UICorner_5 = Instance.new("UICorner");
				Item.Name = "Item";
				Item.Parent = DropScroll;
				Item.BackgroundTransparency = 1;
				Item.Size = UDim2.new(1, 0, 0, 30);
				Item.Font = Enum.Font.Nunito;
				Item.Text = "  " .. tostring(v);
				Item.TextColor3 = Themes[CurrentTheme].Text;
				Item.TextSize = 14;
				Item.TextTransparency = 0.5;
				Item.TextXAlignment = Enum.TextXAlignment.Left;
				Item.ZIndex = 4;
				UICorner_5.Parent = Item;
				UICorner_5.CornerRadius = UDim.new(0, 5);
				
				Item.MouseEnter:Connect(function() Item.BackgroundTransparency = 0.8; Item.BackgroundColor3 = Themes[CurrentTheme].LighterDark end)
				Item.MouseLeave:Connect(function() Item.BackgroundTransparency = 1 end)

				if var and tostring(v) == var then
					Item.TextTransparency = 0;
				end;
				Item.MouseButton1Click:Connect(function()
					SelectItems.ClipsDescendants = true;
					callback(Item.Text:sub(3));
					activeItem = Item.Text:sub(3);
					for i, v_child in next, DropScroll:GetChildren() do
						if v_child:IsA("TextButton") then
							v_child.TextTransparency = (activeItem == v_child.Text:sub(3)) and 0 or 0.5
						end;
					end;
					SelectItems.Text = "   " .. Item.Text:sub(3);
				end);
			end;
			DropScroll.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y);
			SelectItems.MouseButton1Click:Connect(function()
				if isdropping == false then
					isdropping = true;
					(TweenService:Create(DropdownFrameScroll, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(1, -10, 0, 100),
						Visible = true
					})):Play();
					(TweenService:Create(Dropdown, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(1, 0, 0, 145)
					})):Play();
                    (TweenService:Create(ArrowDown, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Rotation = 180
                    })):Play();
				else
					isdropping = false;
					(TweenService:Create(DropdownFrameScroll, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(1, -10, 0, 0),
						Visible = false
					})):Play();
					(TweenService:Create(Dropdown, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
						Size = UDim2.new(1, 0, 0, 40)
					})):Play();
					(TweenService:Create(ArrowDown, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Rotation = 0
                    })):Play();
				end;
			end);
			local dropfunc = {};
			function dropfunc:Add(t)
				local Item = Instance.new("TextButton");
				local UICorner_5 = Instance.new("UICorner");
				Item.Name = "Item";
				Item.Parent = DropScroll;
				Item.BackgroundColor3 = _G.Primary;
				Item.BackgroundTransparency = 1;
				Item.Size = UDim2.new(1, 0, 0, 30);
				Item.Font = Enum.Font.Nunito;
				Item.Text = tostring(t);
				Item.TextColor3 = Themes[CurrentTheme].Text;
				Item.TextSize = 14;
				Item.TextTransparency = 0.5;
				Item.TextXAlignment = Enum.TextXAlignment.Left;
				Item.ZIndex = 4;
				UICorner_5.Parent = Item;
				UICorner_5.CornerRadius = UDim.new(0, 5);
				
				Item.MouseButton1Click:Connect(function()
					callback(Item.Text);
					activeItem = Item.Text;
					for i, v in next, DropScroll:GetChildren() do
						if v:IsA("TextButton") then
							v.TextTransparency = (activeItem == v.Text) and 0 or 0.5
						end;
					end;
					SelectItems.Text = "   " .. Item.Text;
				end);
			end;
			function dropfunc:Clear()
				SelectItems.Text = "   Select Items";
				isdropping = false;
				DropdownFrameScroll.Visible = false;
				for i, v in next, DropScroll:GetChildren() do
					if v:IsA("TextButton") then
						v:Destroy();
					end;
				end;
			end;
			return dropfunc;
		end;
		function main:Slider(text, min, max, set, callback)
			local Slider = Instance.new("Frame");
			local sliderr = Instance.new("Frame");
			local Title = Instance.new("TextLabel");
			local ValueText = Instance.new("TextLabel");
			local bar = Instance.new("Frame");
			local bar1 = Instance.new("Frame");
			local circlebar = Instance.new("Frame");
			
			Slider.Name = "Slider";
			Slider.Parent = MainFramePage;
			Slider.BackgroundTransparency = 1;
			Slider.Size = UDim2.new(1, 0, 0, 35);

			sliderr.Name = "sliderr";
			sliderr.Parent = Slider;
			sliderr.BackgroundColor3 = Themes[CurrentTheme].LighterDark;
			sliderr.BackgroundTransparency = 0;
			sliderr.Position = UDim2.new(0, 0, 0, 0);
			sliderr.Size = UDim2.new(1, 0, 0, 35);
			CreateRounded(sliderr, 5)

			Title.Parent = sliderr;
			Title.BackgroundTransparency = 1;
			Title.Position = UDim2.new(0, 15, 0.5, 0);
			Title.Size = UDim2.new(1, 0, 0, 30);
			Title.Font = Enum.Font.Cartoon;
			Title.Text = text;
			Title.AnchorPoint = Vector2.new(0, 0.5);
			Title.TextColor3 = Themes[CurrentTheme].Text;
			Title.TextSize = 15;
			Title.TextXAlignment = Enum.TextXAlignment.Left;

			bar.Name = "bar";
			bar.Parent = sliderr;
			bar.BackgroundColor3 = Themes[CurrentTheme].Dark;
			bar.Size = UDim2.new(0, 100, 0, 12); -- Más grueso
			bar.Position = UDim2.new(1, -10, 0.5, 0);
			bar.BackgroundTransparency = 0;
			bar.AnchorPoint = Vector2.new(1, 0.5);
			CreateRounded(bar, 6)
			
			ValueText.Parent = bar;
			ValueText.BackgroundTransparency = 1;
			ValueText.Position = UDim2.new(0, -38, 0.5, 0);
			ValueText.Size = UDim2.new(0, 30, 0, 30);
			ValueText.Font = Enum.Font.GothamMedium;
			ValueText.Text = set;
			ValueText.AnchorPoint = Vector2.new(0, 0.5);
			ValueText.TextColor3 = Themes[CurrentTheme].Text;
			ValueText.TextSize = 12;
			ValueText.TextXAlignment = Enum.TextXAlignment.Right;
			
			bar1.Name = "bar1";
			bar1.Parent = bar;
			ApplyStyledGradientBorder(bar1)
			bar1.BackgroundTransparency = 0;
			bar1.Size = UDim2.new(set / max, 0, 1, 0);
			CreateRounded(bar1, 6)

			circlebar.Name = "circlebar";
			circlebar.Parent = bar1;
			circlebar.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
			circlebar.Position = UDim2.new(1, 0, 0.5, 0);
			circlebar.AnchorPoint = Vector2.new(0.5, 0.5);
			circlebar.Size = UDim2.new(0, 15, 0, 15);
			CreateRounded(circlebar, 100)

			local Value = set or min
			pcall(callback, Value)
			
			local Dragging = false
			local sliderIdentifier = bar

			local function StartDrag(input)
				if _G.ActiveSlider and _G.ActiveSlider ~= sliderIdentifier then return end
				Dragging = true
				_G.ActiveSlider = sliderIdentifier
				MainFramePage.ScrollingEnabled = false
			end
			
			bar.InputBegan:Connect(StartDrag)
			
			UserInputService.InputEnded:Connect(function(Input)
				if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Dragging and _G.ActiveSlider == sliderIdentifier then
					Dragging = false;
					_G.ActiveSlider = nil
					MainFramePage.ScrollingEnabled = true
				end;
			end);

			UserInputService.InputChanged:Connect(function(Input)
				if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
					local relativeX = math.clamp(Input.Position.X - bar.AbsolutePosition.X, 0, bar.AbsoluteSize.X)
					local percentage = relativeX / bar.AbsoluteSize.X
					
					Value = min + (max - min) * percentage
					if callback then pcall(callback, Value) end
					ValueText.Text = tostring(math.floor(Value + 0.5));
					
					bar1.Size = UDim2.new(percentage, 0, 1, 0)
					
					local goalPos = UDim2.new(1, 0, 0.5, 0)
					TweenService:Create(circlebar, TweenInfo.new(0.1), {Position = goalPos}):Play()
				end;
			end);
		end;
		function main:Textbox(text, disappear, callback)
			local Textbox = Instance.new("Frame");
			local TextboxCorner = Instance.new("UICorner");
			local TextboxLabel = Instance.new("TextLabel");
			local RealTextbox = Instance.new("TextBox");
			local UICorner = Instance.new("UICorner");
			local TextBoxIcon = Instance.new("ImageLabel");
			Textbox.Name = "Textbox";
			Textbox.Parent = MainFramePage;
			Textbox.BackgroundColor3 = Themes[CurrentTheme].LighterDark;
			Textbox.BackgroundTransparency = 0;
			Textbox.Size = UDim2.new(1, 0, 0, 35);
			TextboxCorner.CornerRadius = UDim.new(0, 5);
			TextboxCorner.Name = "TextboxCorner";
			TextboxCorner.Parent = Textbox;
			TextboxLabel.Name = "TextboxLabel";
			TextboxLabel.Parent = Textbox;
			TextboxLabel.BackgroundTransparency = 1;
			TextboxLabel.Position = UDim2.new(0, 15, 0.5, 0);
			TextboxLabel.Text = text;
			TextboxLabel.Size = UDim2.new(1, 0, 0, 35);
			TextboxLabel.Font = Enum.Font.Nunito;
			TextboxLabel.AnchorPoint = Vector2.new(0, 0.5);
			TextboxLabel.TextColor3 = Themes[CurrentTheme].Text;
			TextboxLabel.TextSize = 15;
			TextboxLabel.TextTransparency = 0;
			TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left;
			RealTextbox.Name = "RealTextbox";
			RealTextbox.Parent = Textbox;
			RealTextbox.BackgroundColor3 = Themes[CurrentTheme].Dark;
			RealTextbox.BackgroundTransparency = 0;
			RealTextbox.Position = UDim2.new(1, -5, 0.5, 0);
			RealTextbox.AnchorPoint = Vector2.new(1, 0.5);
			RealTextbox.Size = UDim2.new(0, 80, 0, 25);
			RealTextbox.Font = Enum.Font.Gotham;
			RealTextbox.Text = "";
			RealTextbox.TextColor3 = Themes[CurrentTheme].Text;
			RealTextbox.TextSize = 11;
			RealTextbox.TextTransparency = 0;
			RealTextbox.ClipsDescendants = true;
			RealTextbox.FocusLost:Connect(function()
				callback(RealTextbox.Text);
			end);
			UICorner.CornerRadius = UDim.new(0, 5);
			UICorner.Parent = RealTextbox;
		end;
		function main:Label(text)
			local Frame = Instance.new("Frame");
			local Label = Instance.new("TextLabel");
			local labelfunc = {};
			Frame.Name = "Frame";
			Frame.Parent = MainFramePage;
			Frame.BackgroundTransparency = 1;
			Frame.Size = UDim2.new(1, 0, 0, 30);
			Label.Name = "Label";
			Label.Parent = Frame;
			Label.BackgroundTransparency = 1;
			Label.Size = UDim2.new(1, -30, 0, 30);
			Label.Font = Enum.Font.Nunito;
			Label.Position = UDim2.new(0, 30, 0.5, 0);
			Label.AnchorPoint = Vector2.new(0, 0.5);
			Label.TextColor3 = Themes[CurrentTheme].SubText;
			Label.TextSize = 15;
			Label.Text = text;
			Label.TextXAlignment = Enum.TextXAlignment.Left;
			local ImageLabel = Instance.new("ImageLabel");
			ImageLabel.Name = "ImageLabel";
			ImageLabel.Parent = Frame;
			ImageLabel.BackgroundTransparency = 1;
			ImageLabel.ImageTransparency = 0;
			ImageLabel.Position = UDim2.new(0, 10, 0.5, 0);
			ImageLabel.Size = UDim2.new(0, 14, 0, 14);
			ImageLabel.AnchorPoint = Vector2.new(0, 0.5);
			ImageLabel.Image = "rbxassetid://10723415903";
			ImageLabel.ImageColor3 = Themes[CurrentTheme].SubText;
			function labelfunc:Set(newtext)
				Label.Text = newtext;
			end;
			return labelfunc;
		end;
		function main:Seperator(text)
			local Seperator = Instance.new("Frame");
			local Sep2 = Instance.new("TextLabel");
			
			Seperator.Name = "Seperator";
			Seperator.Parent = MainFramePage;
			Seperator.BackgroundTransparency = 1;
			Seperator.Size = UDim2.new(1, 0, 0, 36);
			
			local function createRing(offset)
				local Ring = Instance.new("ImageLabel")
				Ring.Parent = Seperator
				Ring.Size = UDim2.new(0, 20, 0, 20)
				Ring.AnchorPoint = Vector2.new(0.5, 0.5)
				Ring.Position = offset
				Ring.BackgroundTransparency = 1
				Ring.Image = "rbxassetid://5915348391"
				Ring.ImageColor3 = Color3.fromRGB(255,255,255)
				ApplyStyledGradientBorder(Ring)
				local tweenInfo = TweenInfo.new(2 + math.random(), Enum.EasingStyle.Linear, Enum.EasingDirection.Out, -1)
				local tween = TweenService:Create(Ring, tweenInfo, {Rotation = Ring.Rotation + 360})
				tween:Play()
			end
			
			createRing(UDim2.new(0, 30, 0.5, 0))
			createRing(UDim2.new(1, -30, 0.5, 0))

			Sep2.Name = "Sep2";
			Sep2.Parent = Seperator;
			Sep2.BackgroundTransparency = 1;
			Sep2.AnchorPoint = Vector2.new(0.5, 0.5);
			Sep2.Position = UDim2.new(0.5, 0, 0.5, 0);
			Sep2.Size = UDim2.new(1, -80, 0, 36);
			Sep2.Font = Enum.Font.GothamBold;
			Sep2.Text = text;
			Sep2.TextColor3 = Themes[CurrentTheme].Text;
			Sep2.TextSize = 14;
		end;
		function main:Line()
			local Linee = Instance.new("Frame");
			local Line = Instance.new("Frame");
			local UIGradient = Instance.new("UIGradient");
			Linee.Name = "Linee";
			Linee.Parent = MainFramePage;
			Linee.BackgroundTransparency = 1;
			Linee.Position = UDim2.new(0, 0, 0.119999997, 0);
			Linee.Size = UDim2.new(1, 0, 0, 20);
			Line.Name = "Line";
			Line.Parent = Linee;
			Line.BackgroundColor3 = Color3.new(125, 125, 125);
			Line.BorderSizePixel = 0;
			Line.Position = UDim2.new(0, 0, 0, 10);
			Line.Size = UDim2.new(1, 0, 0, 1);
			UIGradient.Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, _G.Dark),
				ColorSequenceKeypoint.new(0.4, _G.Primary),
				ColorSequenceKeypoint.new(0.5, _G.Primary),
				ColorSequenceKeypoint.new(0.6, _G.Primary),
				ColorSequenceKeypoint.new(1, _G.Dark)
			});
			UIGradient.Parent = Line;
		end;
		return main, assetsToLoad;
	end;
	return uitab, NoxHub; -- Devuelve la UI principal para la lógica de precarga
end;

return Update;
