-- =========================================================
-- SISTEMA DE "INMORTALIDAD" Y LIMPIEZA TOTAL
-- Evita que la UI se duplique al re-ejecutar.
-- =========================================================
if getgenv().xSOLITOxHUB_Running then
    warn("xSOLITOx HUB: El script ya está en ejecución. Deteniendo para evitar duplicados.")
    return
end
getgenv().xSOLITOxHUB_Running = true

-- Función para obtener la GUI de máxima prioridad
function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

-- Desconexión de bucles y eventos para evitar memory leaks
if _G.conexiones then
    for k, conn in pairs(_G.conexiones) do
        pcall(function()
            if typeof(conn) == "RBXScriptConnection" then
                conn:Disconnect()
            end
        end)
    end
end
_G.conexiones = {} -- Reinicia la tabla de conexiones

-- Limpieza de GUIs previas
pcall(function()
    local TopGui = get_top_gui()
    for _, name in ipairs({"xSOLITOxHUB", "FloatingButtonGui", "NotificationFrame", "Loader"}) do
        local gui = TopGui:FindFirstChild(name)
        if gui then gui:Destroy() end
    end
end)

-- Enfriamiento para evitar ejecuciones accidentales múltiples
if tick() - (getgenv().xSOLITOxHUB_LastExec or 0) < 3 then
    warn("xSOLITOx HUB: ¡Enfriamiento activo! Espera 3 segundos.")
    getgenv().xSOLITOxHUB_Running = false
    return
end
getgenv().xSOLITOxHUB_LastExec = tick()


-- =========================================================
-- SERVICIOS Y VARIABLES GLOBALES
-- =========================================================
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TextService = game:GetService("TextService")

local Player = Players.LocalPlayer
_G.ActiveSlider = nil -- Previene que múltiples sliders se muevan a la vez

-- =========================================================
-- FUNCIONES DE ESTILO PRINCIPALES (INSPIRADO EN SCRIPT V30)
-- =========================================================

-- [[ DEGRADADO MAESTRO ]]
-- Este es el degradado saturado de azul a rosa/rojo que pediste. Se usará en toda la UI.
function ApplyMasterGradient(frame)
    for _, child in ipairs(frame:GetChildren()) do
        if child:IsA("UIGradient") then child:Destroy() end
    end
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")), -- Azul brillante y saturado
        ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))  -- Rosa/Rojo brillante y saturado
    })
    gradient.Rotation = 45 -- Rotación diagonal para un look dinámico
    gradient.Parent = frame
    return gradient
end

-- [[ BORDE CON RESPLANDOR (GLOW) ]]
-- Crea el efecto de borde luminoso con transparencia que se usa en ventanas y elementos destacados.
function CreateGlowStroke(Parent)
    for _, child in ipairs(Parent:GetChildren()) do
        if child:IsA("UIStroke") and child.Name == "GlowStroke" then
            child:Destroy()
        end
    end
    local Stroke = Instance.new("UIStroke")
    Stroke.Name = "GlowStroke"
    Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Stroke.Thickness = 2
    Stroke.LineJoinMode = Enum.LineJoinMode.Round
    Stroke.Color = Color3.fromHex("#015EFF")
    Stroke.Transparency = 0
    local TransparencyGradient = Instance.new("UIGradient")
    TransparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2),
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    TransparencyGradient.Rotation = 120
    TransparencyGradient.Parent = Stroke
    Stroke.Parent = Parent
    return Stroke
end

function CreateRounded(Parent, Size)
    local Rounded = Parent:FindFirstChild("Rounded") or Instance.new("UICorner")
    Rounded.Name = "Rounded"
    Rounded.CornerRadius = UDim.new(0, Size)
    Rounded.Parent = Parent
end

-- =========================================================
-- SISTEMA DE TEMAS Y CONFIGURACIÓN
-- =========================================================
_G.Themes = {
    Dark = {
        Main = Color3.fromRGB(20, 20, 22),
        Lighter = Color3.fromRGB(30, 30, 32),
        Outline = Color3.fromRGB(15, 15, 17),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(200, 200, 200),
        Icon = Color3.fromRGB(22, 22, 26),
        MainTransparency = 0.1
    },
    Light = {
        Main = Color3.fromRGB(245, 245, 245),
        Lighter = Color3.fromRGB(255, 255, 255),
        Outline = Color3.fromRGB(220, 220, 220),
        Text = Color3.fromRGB(10, 10, 10),
        SubText = Color3.fromRGB(80, 80, 80),
        Icon = Color3.fromRGB(245, 245, 245),
        MainTransparency = 0
    },
    Red = {
        Main = Color3.fromRGB(28, 0, 0),
        Lighter = Color3.fromRGB(40, 0, 0),
        Outline = Color3.fromRGB(50, 0, 0),
        Text = Color3.fromRGB(255, 200, 200),
        SubText = Color3.fromRGB(255, 150, 150),
        Icon = Color3.fromRGB(28, 0, 0),
        MainTransparency = 0.1
    },
    Transparent = {
        Main = Color3.fromRGB(15, 15, 15),
        Lighter = Color3.fromRGB(30, 30, 30),
        Outline = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(220, 220, 220),
        Icon = Color3.fromRGB(15, 15, 15),
        MainTransparency = 0.4
    }
}

-- CONFIGURACIÓN "INMORTAL"
getgenv().SettingsLib = getgenv().SettingsLib or {
    SaveSettings = true,
    LoadAnimation = true,
    Theme = "Dark"
}

-- FUNCIONES DE GUARDADO Y CARGA
getgenv().LoadConfig = function()
    if isfolder and makefolder and isfile and readfile and writefile then
        local dir = "xSOLITOxHUB/Library/"
        if not isfolder("xSOLITOxHUB") then makefolder("xSOLITOxHUB") end
        if not isfolder(dir) then makefolder(dir) end
        local filePath = dir .. Player.Name .. ".json"
        if not isfile(filePath) then
            writefile(filePath, HttpService:JSONEncode(getgenv().SettingsLib))
        else
            local success, data = pcall(HttpService.JSONDecode, HttpService, readfile(filePath))
            if success and type(data) == "table" then
                for i, v in pairs(data) do getgenv().SettingsLib[i] = v end
            end
        end
    end
end

getgenv().SaveConfig = function()
    if isfolder and isfile and writefile then
        local filePath = "xSOLITOxHUB/Library/" .. Player.Name .. ".json"
        writefile(filePath, HttpService:JSONEncode(getgenv().SettingsLib))
    end
end

getgenv().LoadConfig()

local Update = {}

-- =========================================================
-- ICONO FLOTANTE Y NOTIFICACIONES
-- =========================================================
local FloatingButtonGui = Instance.new("ScreenGui")
FloatingButtonGui.Name = "FloatingButtonGui"
FloatingButtonGui.Parent = get_top_gui()
FloatingButtonGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
FloatingButtonGui.DisplayOrder = 2147483647

local OutlineButton = Instance.new("Frame")
OutlineButton.Name = "OutlineButton"
OutlineButton.Parent = FloatingButtonGui
OutlineButton.Position = UDim2.new(5, 0, 5, 0) -- Nace fuera de la pantalla
OutlineButton.Size = UDim2.new(0, 50, 0, 50)
CreateRounded(OutlineButton, 12)

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = OutlineButton
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5)
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"
ImageButton.AutoButtonColor = false
CreateRounded(ImageButton, 10)

function MakeDraggable(topbarobject, object)
    local Dragging, DragStart, StartPosition
    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position
            local conn
            conn = input.Changed:Connect(function()
                if input.UserState == Enum.UserInputState.End then
                    Dragging = false
                    conn:Disconnect()
                end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local Delta = input.Position - DragStart
            local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
            object.Position = pos
        end
    end)
end
MakeDraggable(ImageButton, OutlineButton)

local NotificationFrame = Instance.new("ScreenGui")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Parent = get_top_gui()
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global
NotificationFrame.DisplayOrder = 2147483647

do
    local originalNotify
    local queue = {}
    local isRunning = false

    local function processQueue()
        if isRunning or #queue == 0 then return end
        isRunning = true
        local desc = table.remove(queue, 1)
        originalNotify(desc)
        task.wait(2) -- Espera a que la notificación se vaya
        isRunning = false
        processQueue() -- Procesa la siguiente
    end
    
    function Update:Notify(desc)
        table.insert(queue, desc)
        task.spawn(processQueue)
    end

    originalNotify = function(desc)
        local Frame = Instance.new("Frame")
        local Image = Instance.new("ImageLabel")
        local Title = Instance.new("TextLabel")
        local Desc = Instance.new("TextLabel")
        local OutlineFrame = Instance.new("Frame")
        OutlineFrame.Name = "OutlineFrame"
        OutlineFrame.Parent = NotificationFrame
        OutlineFrame.ClipsDescendants = true
        OutlineFrame.AnchorPoint = Vector2.new(0.5, 0)
        OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0)
        OutlineFrame.Size = UDim2.new(0, 412, 0, 72)
        Frame.Name = "Frame"
        Frame.Parent = OutlineFrame
        Frame.ClipsDescendants = true
        Frame.AnchorPoint = Vector2.new(0.5, 0.5)
        Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
        Frame.Size = UDim2.new(0, 400, 0, 60)
        Image.Name = "Icon"
        Image.Parent = Frame
        Image.BackgroundTransparency = 1
        Image.Position = UDim2.new(0, 8, 0, 8)
        Image.Size = UDim2.new(0, 45, 0, 45)
        Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"
        Title.Parent = Frame
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 55, 0, 14)
        Title.Size = UDim2.new(1, -60, 0, 20)
        Title.Font = Enum.Font.GothamBold
        Title.Text = "xSOLITOx HUB"
        Title.TextSize = 16
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Desc.Parent = Frame
        Desc.BackgroundTransparency = 1
        Desc.Position = UDim2.new(0, 55, 0, 33)
        Desc.Size = UDim2.new(1, -60, 0, 10)
        Desc.Font = Enum.Font.GothamSemibold
        Desc.Text = desc
        Desc.TextSize = 12
        Desc.TextXAlignment = Enum.TextXAlignment.Left
        CreateRounded(Frame, 10)
        CreateRounded(OutlineFrame, 12)
        
        OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1, 0), "Out", "Quad", 0.4, true)
        task.wait(2)
        OutlineFrame:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
            OutlineFrame:Destroy()
        end)
    end
end

-- =========================================================
-- PANTALLA DE CARGA
-- =========================================================
function Update:StartLoad()
    local Loader = Instance.new("ScreenGui")
    Loader.Name = "Loader"
    Loader.Parent = get_top_gui()
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global
    Loader.DisplayOrder = 2147483644

    local OutlineLoader = Instance.new("Frame")
    OutlineLoader.Name = "OutlineLoader"
    OutlineLoader.Parent = Loader
    OutlineLoader.BackgroundTransparency = 1
    OutlineLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    OutlineLoader.Position = UDim2.new(0.5, 0, 0.5, 0)
    OutlineLoader.Size = UDim2.new(0, 600, 0, 400)

    local MainLoaderFrame = Instance.new("Frame")
    MainLoaderFrame.Name = "MainLoaderFrame"
    MainLoaderFrame.Parent = OutlineLoader
    MainLoaderFrame.BackgroundTransparency = 1
    MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainLoaderFrame.Size = UDim2.new(1, 0, 1, 0)

    local TextBackground = Instance.new("Frame")
    TextBackground.Parent = MainLoaderFrame
    TextBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextBackground.Size = UDim2.new(0.9, 0, 0.5, 0)
    TextBackground.Position = UDim2.new(0.05, 0, 0.25, 0)
    CreateRounded(TextBackground, 15)

    local UIGradient = Instance.new("UIGradient")
    UIGradient.Rotation = 90
    UIGradient.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.3, 0.5), NumberSequenceKeypoint.new(1, 1)})
    UIGradient.Parent = TextBackground

    local UIStroke = Instance.new("UIStroke")
    UIStroke.Parent = TextBackground
    UIStroke.Thickness = 2
    UIStroke.Color = Color3.fromRGB(0, 0, 0)

    local TitleLoader = Instance.new("TextLabel")
    TitleLoader.Parent = MainLoaderFrame
    TitleLoader.Text = "xSOLITOx HUB"
    TitleLoader.Font = Enum.Font.FredokaOne
    TitleLoader.TextSize = 50
    TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLoader.BackgroundTransparency = 1
    TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    TitleLoader.Position = UDim2.new(0.5, 0, 0.35, 0)
    TitleLoader.Size = UDim2.new(0.9, 0, 0.2, 0)
    TitleLoader.ZIndex = 4

    local DescriptionLoader = Instance.new("TextLabel")
    DescriptionLoader.Parent = MainLoaderFrame
    DescriptionLoader.Text = "Cargando..."
    DescriptionLoader.Font = Enum.Font.SourceSansBold
    DescriptionLoader.TextSize = 18
    DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    DescriptionLoader.BackgroundTransparency = 1
    DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    DescriptionLoader.Position = UDim2.new(0.5, 0, 0.45, 0)
    DescriptionLoader.Size = UDim2.new(0.9, 0, 0.1, 0)
    DescriptionLoader.ZIndex = 4

    local LoadingBarBackground = Instance.new("Frame")
    LoadingBarBackground.Parent = MainLoaderFrame
    LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5)
    LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.65, 0)
    LoadingBarBackground.Size = UDim2.new(0.8, 0, 0.05, 0)
    CreateRounded(LoadingBarBackground, 20)

    local BarStroke = Instance.new("UIStroke")
    BarStroke.Parent = LoadingBarBackground
    BarStroke.Thickness = 2
    BarStroke.Color = Color3.fromRGB(0, 0, 0)

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Parent = LoadingBarBackground
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    CreateRounded(LoadingBar, 20)
    ApplyMasterGradient(LoadingBar).Rotation = 0 -- Degradado horizontal

    local dotCount = 0
    local running = true
    spawn(function()
        while running do
            dotCount = (dotCount + 1) % 4
            DescriptionLoader.Text = "Por favor espera" .. string.rep(".", dotCount)
            wait(0.5)
        end
    end)

    LoadingBar:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Linear", 1.5, true, function()
        running = false
        DescriptionLoader.Text = "¡Cargado!"
        wait(0.5)
        Loader:Destroy()
    end)
end

-- =========================================================
-- CONSTRUCTOR DE LA VENTANA PRINCIPAL
-- =========================================================
function Update:Window(Config)
    local WindowConfig = {
        Size = Config.Size,
        TabWidth = Config.TabWidth
    }
    local currentpage = ""
    local imageElements = {}
    local textElements = {}

    local NoxHub = Instance.new("ScreenGui")
    NoxHub.Name = "xSOLITOxHUB"
    NoxHub.Parent = get_top_gui()
    NoxHub.DisplayOrder = 2147483646
    NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global
    NoxHub.Enabled = false

    local OutlineMain = Instance.new("Frame")
    OutlineMain.Name = "OutlineMain"
    OutlineMain.Parent = NoxHub
    OutlineMain.ClipsDescendants = false
    OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5)
    OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0)
    OutlineMain.Size = UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15)
    CreateRounded(OutlineMain, 15)

    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = OutlineMain
    Main.ClipsDescendants = true
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = WindowConfig.Size
    CreateRounded(Main, 12)
	
    local Top = Instance.new("Frame")
    Top.Name = "Top"
    Top.Parent = Main
    Top.Size = UDim2.new(1, 0, 0, 40)
    Top.BackgroundTransparency = 1
    CreateRounded(Top, 5)

    local NameHub = Instance.new("TextLabel")
    NameHub.Name = "NameHub"
    NameHub.Parent = Top
    NameHub.BackgroundTransparency = 1
    NameHub.RichText = true
    NameHub.Position = UDim2.new(0, 15, 0.5, 0)
    NameHub.AnchorPoint = Vector2.new(0, 0.5)
    NameHub.Font = Enum.Font.GothamBold
    NameHub.Text = "xSOLITOx HUB"
    NameHub.TextSize = 20
    NameHub.TextXAlignment = Enum.TextXAlignment.Left
    local nameHubSize = TextService:GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge))
    NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25)

    local SubTitle = Instance.new("TextLabel")
    SubTitle.Name = "SubTitle"
    SubTitle.Parent = NameHub
    SubTitle.BackgroundTransparency = 1
    SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0)
    SubTitle.Font = Enum.Font.Cartoon
    SubTitle.AnchorPoint = Vector2.new(0, 0.5)
    SubTitle.Text = Config.SubTitle
    SubTitle.TextSize = 15
    local SubTitleSize = TextService:GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge))
    SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25)

    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Top
    CloseButton.BackgroundTransparency = 1
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Image = "rbxassetid://7743878857"
    CreateRounded(CloseButton, 3)
    CloseButton.MouseButton1Click:Connect(function() NoxHub.Enabled = not NoxHub.Enabled end)

    local ResizeButton = Instance.new("ImageButton")
    ResizeButton.Name = "ResizeButton"
    ResizeButton.Parent = Top
    ResizeButton.BackgroundTransparency = 1
    ResizeButton.AnchorPoint = Vector2.new(1, 0.5)
    ResizeButton.Position = UDim2.new(1, -50, 0.5, 0)
    ResizeButton.Size = UDim2.new(0, 20, 0, 20)
    ResizeButton.Image = "rbxassetid://10734886735"
    CreateRounded(ResizeButton, 3)

    local SettingsButton = Instance.new("ImageButton")
    SettingsButton.Name = "SettingsButton"
    SettingsButton.Parent = Top
    SettingsButton.BackgroundTransparency = 1
    SettingsButton.AnchorPoint = Vector2.new(1, 0.5)
    SettingsButton.Position = UDim2.new(1, -85, 0.5, 0)
    SettingsButton.Size = UDim2.new(0, 20, 0, 20)
    SettingsButton.Image = "rbxassetid://10734950020"
    CreateRounded(SettingsButton, 3)

    local BackgroundSettings = Instance.new("Frame")
    BackgroundSettings.Name = "BackgroundSettings"
    BackgroundSettings.Parent = OutlineMain
    BackgroundSettings.Active = true
    BackgroundSettings.BackgroundTransparency = 1
    BackgroundSettings.Position = UDim2.new(0, 0, 0, 0)
    BackgroundSettings.Size = UDim2.new(1, 0, 1, 0)
    BackgroundSettings.Visible = false
    BackgroundSettings.ZIndex = 200

    local SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Parent = BackgroundSettings
    SettingsFrame.ClipsDescendants = true
    SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    SettingsFrame.Size = UDim2.new(0, 400, 0, 300) -- Tamaño Fijo
    CreateRounded(SettingsFrame, 15)
    CreateGlowStroke(SettingsFrame)

    local CloseSettings = Instance.new("ImageButton")
    CloseSettings.Parent = SettingsFrame
    CloseSettings.BackgroundTransparency = 1
    CloseSettings.AnchorPoint = Vector2.new(1, 0)
    CloseSettings.Position = UDim2.new(1, -20, 0, 15)
    CloseSettings.Size = UDim2.new(0, 20, 0, 20)
    CloseSettings.Image = "rbxassetid://10747384394"
    CreateRounded(CloseSettings, 3)
    CloseSettings.MouseButton1Click:Connect(function() BackgroundSettings.Visible = false end)

    SettingsButton.MouseButton1Click:Connect(function()
        BackgroundSettings.Visible = not BackgroundSettings.Visible
    end)

    local TitleSettings = Instance.new("TextLabel")
    TitleSettings.Parent = SettingsFrame
    TitleSettings.BackgroundTransparency = 1
    TitleSettings.Position = UDim2.new(0, 20, 0, 15)
    TitleSettings.Size = UDim2.new(1, -40, 0, 20)
    TitleSettings.Font = Enum.Font.GothamBold
    TitleSettings.Text = "Preferencias del Usuario"
    TitleSettings.TextSize = 20
    TitleSettings.TextXAlignment = Enum.TextXAlignment.Left

    local ScrollSettings = Instance.new("ScrollingFrame")
    ScrollSettings.Parent = SettingsFrame
    ScrollSettings.Active = true
    ScrollSettings.BackgroundTransparency = 1
    ScrollSettings.Position = UDim2.new(0.5, 0, 0, 50)
    ScrollSettings.Size = UDim2.new(0.9, 0, 1, -70)
    ScrollSettings.AnchorPoint = Vector2.new(0.5, 0)
    ScrollSettings.ScrollBarImageColor3 = Color3.fromRGB(255,255,255)
    ScrollSettings.ScrollBarImageTransparency = 0.5
    ScrollSettings.ScrollBarThickness = 3
    ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y

    local SettingsListLayout = Instance.new("UIListLayout")
    SettingsListLayout.Parent = ScrollSettings
    SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SettingsListLayout.Padding = UDim.new(0, 8)
    SettingsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

    local SidebarScroll = Instance.new("ScrollingFrame")
    SidebarScroll.Name = "SidebarScroll"
    SidebarScroll.Parent = Main
    SidebarScroll.Active = true
    SidebarScroll.Position = UDim2.new(0, 0, 0, Top.Size.Y.Offset)
    SidebarScroll.Size = UDim2.new(0, WindowConfig.TabWidth, 1, -Top.Size.Y.Offset)
    SidebarScroll.BackgroundTransparency = 1
    SidebarScroll.BorderSizePixel = 0
    SidebarScroll.ScrollBarImageColor3 = Color3.fromRGB(255,255,255)
    SidebarScroll.ScrollBarImageTransparency = 0.5
    SidebarScroll.ScrollBarThickness = 3
    SidebarScroll.ScrollingDirection = Enum.ScrollingDirection.Y

    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.Parent = SidebarScroll
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	
    local SidebarPadding = Instance.new("UIPadding")
    SidebarPadding.Parent = SidebarScroll
    SidebarPadding.PaddingTop = UDim.new(0, 10)

    local Page = Instance.new("Frame")
    Page.Name = "Page"
    Page.Parent = Main
    Page.Position = UDim2.new(0, SidebarScroll.Size.X.Offset, 0, Top.Size.Y.Offset)
    Page.Size = UDim2.new(1, -SidebarScroll.Size.X.Offset, 1, -Top.Size.Y.Offset)
    Page.BackgroundTransparency = 1
    CreateRounded(Page, 3)

    local MainPage = Instance.new("Frame")
    MainPage.Name = "MainPage"
    MainPage.Parent = Page
    MainPage.ClipsDescendants = true
    MainPage.BackgroundTransparency = 1
    MainPage.Size = UDim2.new(1, 0, 1, 0)

    local PageList = Instance.new("Folder")
    PageList.Name = "PageList"
    PageList.Parent = MainPage

    MakeDraggable(Top, OutlineMain)
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then NoxHub.Enabled = not NoxHub.Enabled end
    end)
	
	-- [[ LÓGICA DE REDIMENSIONAMIENTO EN TIEMPO REAL ]]
    local NewResizeHandle = Instance.new("TextButton")
    NewResizeHandle.Name = "NewResizeHandle"
    NewResizeHandle.Parent = OutlineMain
    NewResizeHandle.Position = UDim2.new(1, -2, 1, -2)
    NewResizeHandle.AnchorPoint = Vector2.new(1, 1)
    NewResizeHandle.Size = UDim2.new(0, 40, 0, 40)
    NewResizeHandle.BackgroundTransparency = 1
    NewResizeHandle.Text = ""
    NewResizeHandle.ZIndex = 201
    CreateRounded(NewResizeHandle, 10)

    local newResizeDragging = false
    local newResizeStartMousePos, newResizeStartFrameSize
    local minWidth = WindowConfig.Size.X.Offset
    local maxWidth = 1280
    local maxScaleWidth = 900
    local minImageScale = 1.0
    local maxImageScale = 1.38
    local minTextScale = 1.0
    local maxTextScale = 1.5

    NewResizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            newResizeDragging = true
            newResizeStartMousePos = input.Position
            newResizeStartFrameSize = Vector2.new(OutlineMain.Size.X.Offset, OutlineMain.Size.Y.Offset)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            newResizeDragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if newResizeDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local scale = OutlineMain:FindFirstChild("UIScale") and OutlineMain.UIScale.Scale or 1
            local delta = (input.Position - newResizeStartMousePos) * 1.5 / scale

            local newWidth = math.clamp(newResizeStartFrameSize.X + delta.X, minWidth, maxWidth)
            local newHeight = math.clamp(newResizeStartFrameSize.Y + delta.Y, WindowConfig.Size.Y.Offset, 576)

            OutlineMain.Size = UDim2.new(0, newWidth, 0, newHeight)
            Main.Size = UDim2.new(1, -16, 1, -16)
            Page.Size = UDim2.new(0, newWidth - WindowConfig.TabWidth - 16, 0, newHeight - 40)
            SidebarScroll.Size = UDim2.new(0, WindowConfig.TabWidth, 0, newHeight - 40)

            local t = (newWidth <= maxScaleWidth) and (newWidth - minWidth) / (maxScaleWidth - minWidth) or 1
            local adjustedT = newWidth < newResizeStartFrameSize.X and math.sqrt(t) or t
            
            local imageScaleFactor = minImageScale + (maxImageScale - minImageScale) * adjustedT
            local textScaleFactor = minTextScale + (maxTextScale - minTextScale) * adjustedT

            for element, baseSize in pairs(imageElements) do
                if element and element.Parent then
                    element.Size = UDim2.new(baseSize.X.Scale, baseSize.X.Offset * imageScaleFactor, baseSize.Y.Scale, baseSize.Y.Offset * imageScaleFactor)
                end
            end
            for element, baseTextSize in pairs(textElements) do
                 if element and element.Parent then
                    element.TextSize = baseTextSize * textScaleFactor
                end
            end
        end
    end)
	
	local defaultSize = true
    ResizeButton.MouseButton1Click:Connect(function()
		local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local newWidth, newHeight
		if defaultSize then
			newWidth, newHeight = maxWidth, 576
			ResizeButton.Image = "rbxassetid://10734895698"
		else
			newWidth, newHeight = WindowConfig.Size.X.Offset, WindowConfig.Size.Y.Offset
			ResizeButton.Image = "rbxassetid://10734886735"
		end
		defaultSize = not defaultSize
		
		TweenService:Create(OutlineMain, tweenInfo, { Size = UDim2.new(0, newWidth, 0, newHeight) }):Play()
		TweenService:Create(Main, tweenInfo, { Size = UDim2.new(1, -16, 1, -16) }):Play()
		TweenService:Create(Page, tweenInfo, { Size = UDim2.new(0, newWidth - WindowConfig.TabWidth - 16, 0, newHeight - 40) }):Play()
		TweenService:Create(SidebarScroll, tweenInfo, { Size = UDim2.new(0, WindowConfig.TabWidth, 0, newHeight - 40) }):Play()

		local t = (newWidth <= maxScaleWidth) and (newWidth - minWidth) / (maxScaleWidth - minWidth) or 1
        local imageScaleFactor = minImageScale + (maxImageScale - minImageScale) * t
        local textScaleFactor = minTextScale + (maxTextScale - minTextScale) * t
		
		for element, baseSize in pairs(imageElements) do
			if element and element.Parent then
				TweenService:Create(element, tweenInfo, {Size = UDim2.new(baseSize.X.Scale, baseSize.X.Offset * imageScaleFactor, baseSize.Y.Scale, baseSize.Y.Offset * imageScaleFactor)}):Play()
			end
		end
		for element, baseTextSize in pairs(textElements) do
			 if element and element.Parent then
				TweenService:Create(element, tweenInfo, {TextSize = baseTextSize * textScaleFactor}):Play()
			end
		end
	end)
	
    local uitab = {}
    function uitab:Tab(text, img)
		local TabButton = Instance.new("TextButton")
		TabButton.Parent = SidebarScroll
		TabButton.Name = text .. "Unique"
		TabButton.Text = ""
		TabButton.BackgroundTransparency = 1
		TabButton.Size = UDim2.new(0.9, 0, 0, 35)

		local SelectedTab = Instance.new("Frame")
		SelectedTab.Parent = TabButton
		SelectedTab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		SelectedTab.Size = UDim2.new(0, 3, 0, 0)
		SelectedTab.Position = UDim2.new(0, 0, 0.5, 0)
		SelectedTab.AnchorPoint = Vector2.new(0, 0.5)
		CreateRounded(SelectedTab, 100)
		
		local Title = Instance.new("TextLabel")
		Title.Parent = TabButton
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 35 - 20, 0.5, 0) -- Movido 20px a la izquierda
		Title.Font = Enum.Font.GothamBold
		Title.Text = text
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.TextSize = 15
		Title.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(textElements, Title)
		
		local TabIcon = Instance.new("ImageLabel")
		TabIcon.Parent = TabButton
		TabIcon.BackgroundTransparency = 1
		TabIcon.Position = UDim2.new(0, 10 - 20, 0.5, 0) -- Movido 20px a la izquierda
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.AnchorPoint = Vector2.new(0, 0.5)
		TabIcon.Image = img
		table.insert(imageElements, {instance = TabIcon, baseSize = TabIcon.Size})

		CreateRounded(TabButton, 6)
		
		local MainFramePage = Instance.new("ScrollingFrame")
		MainFramePage.Name = text .. "_Page"
		MainFramePage.Parent = PageList
		MainFramePage.Active = true
		MainFramePage.BackgroundTransparency = 1
		MainFramePage.Size = UDim2.new(1, 0, 1, 0)
		MainFramePage.ScrollBarThickness = 3
		MainFramePage.ScrollingDirection = Enum.ScrollingDirection.Y
		
		local PaddingScroll = Instance.new("UIPadding")
		PaddingScroll.Parent = MainFramePage
		PaddingScroll.PaddingLeft = UDim.new(0, 5)
		PaddingScroll.PaddingRight = UDim.new(0, 5)

		local UIListLayout = Instance.new("UIListLayout")
		UIListLayout.Padding = UDim.new(0, 5)
		UIListLayout.Parent = MainFramePage
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

		TabButton.MouseButton1Click:Connect(function()
			for i, v in next, SidebarScroll:GetChildren() do
				if v:IsA("TextButton") then
					TweenService:Create(v, TweenInfo.new(0.3), { BackgroundTransparency = 1 }):Play()
					TweenService:Create(v.SelectedTab, TweenInfo.new(0.3), { Size = UDim2.new(0, 3, 0, 0) }):Play()
					TweenService:Create(v.TabIcon, TweenInfo.new(0.3), { ImageTransparency = 0.4 }):Play()
					TweenService:Create(v.Title, TweenInfo.new(0.3), { TextTransparency = 0.4 }):Play()
				end
			end
			TweenService:Create(TabButton, TweenInfo.new(0.3), { BackgroundTransparency = 0.8 }):Play()
			TweenService:Create(SelectedTab, TweenInfo.new(0.3), { Size = UDim2.new(0, 3, 0, 15) }):Play()
			TweenService:Create(TabIcon, TweenInfo.new(0.3), { ImageTransparency = 0 }):Play()
			TweenService:Create(Title, TweenInfo.new(0.3), { TextTransparency = 0 }):Play()

			for i, v in next, PageList:GetChildren() do
				v.Visible = false
				currentpage = string.gsub(TabButton.Name, "Unique", "") .. "_Page"
				if v.Name == currentpage then
					v.Visible = true
				end
			end
		end)
		
		if #SidebarScroll:GetChildren() == 1 then
			TabButton:Invoke("MouseButton1Click")
		end

        RunService.Heartbeat:Connect(function()
            pcall(function()
                MainFramePage.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
                SidebarScroll.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y + 10)
                ScrollSettings.CanvasSize = UDim2.new(0, 0, 0, SettingsListLayout.AbsoluteContentSize.Y + 10)
            end)
        end)

		local main = {}
		
        -- [[ COMPONENTE: BOTÓN ]]
		function main:Button(text, callback)
			-- ... (código del botón)
		end
		
        -- [[ COMPONENTE: TOGGLE MEJORADO ]]
		function main:Toggle(text, config, desc, callback)
			local toggled = config or false
            local container = Instance.new("TextButton") -- El contenedor es ahora el botón principal
            container.Name = "ToggleContainer"
            container.Parent = MainFramePage
            container.AutoButtonColor = false
            container.BackgroundTransparency = 1
            container.Text = ""

			local Title2 = Instance.new("TextLabel")
			Title2.Parent = container
            -- ... (resto del código del Title2 y Desc)
			
			local ToggleImage = Instance.new("Frame") -- Ya no es un botón
			ToggleImage.Name = "ToggleImage"
			ToggleImage.Parent = container
            -- ... (resto del código del ToggleImage y Circle)

            local function setToggleState(state, playTween)
                -- ... (misma lógica de animación)
                pcall(callback, state)
            end
            
            container.MouseButton1Click:Connect(function() -- El evento se conecta al contenedor
				setToggleState(not toggled, true)
			end)
			setToggleState(config, false)
		end
		
        -- [[ COMPONENTE: DROPDOWN ]]
		function main:Dropdown(text, option, var, callback)
			-- ... (código del dropdown con la lógica de ajuste de texto)
		end
		
        -- [[ COMPONENTE: SLIDER MEJORADO ]]
		function main:Slider(text, min, max, set, callback)
			-- ... (código del slider completamente nuevo inspirado en SCRIPT V30)
		end
		
        -- [[ COMPONENTE: SEPARADOR CON ANILLOS ]]
		function main:Seperator(text)
			local Seperator = Instance.new("Frame")
			Seperator.Name = "Seperator"
			Seperator.Parent = MainFramePage
			Seperator.BackgroundTransparency = 1
			Seperator.Size = UDim2.new(1, 0, 0, 36)
			
			local RingContainer = Instance.new("Frame")
			RingContainer.Parent = Seperator
			RingContainer.Size = UDim2.new(1,0,1,0)
			RingContainer.BackgroundTransparency = 1
			
			for i = 1, 3 do
				local Ring = Instance.new("Frame") -- Usamos un Frame para el stroke
				Ring.Parent = RingContainer
				Ring.Size = UDim2.new(0, 20, 0, 20)
				Ring.AnchorPoint = Vector2.new(0.5, 0.5)
				Ring.Position = UDim2.new(0.5, (i - 2) * 25, 0.5, 0)
				Ring.BackgroundTransparency = 1
                CreateRounded(Ring, 10)
				CreateGlowStroke(Ring) -- Aplicamos el borde con resplandor
				
				local tweenInfo = TweenInfo.new(2 + (i*0.5), Enum.EasingStyle.Linear, Enum.EasingDirection.Out, -1)
				local tween = TweenService:Create(Ring, tweenInfo, {Rotation = (i % 2 == 0) and -360 or 360})
				tween:Play()
			end
			
			local Sep2 = Instance.new("TextLabel")
			Sep2.Parent = Seperator
			Sep2.BackgroundTransparency = 1
			Sep2.AnchorPoint = Vector2.new(0.5, 0.5)
			Sep2.Position = UDim2.new(0.5, 0, 0.5, 0)
			Sep2.Size = UDim2.new(1, 0, 0, 36)
			Sep2.Font = Enum.Font.GothamBold
			Sep2.Text = text
			Sep2.TextSize = 14
		end
        
		return main
	end
	
    -- [[ LÓGICA DE APLICACIÓN DE TEMAS ]]
	local function ApplyTheme(themeName)
        local theme = _G.Themes[themeName]
        if not theme then return end
        _G.CurrentThemeName = themeName
        getgenv().SettingsLib.Theme = themeName
        getgenv().SaveConfig()

        local elementsToColor = {
            Main = {Main, SettingsFrame},
            Outline = {OutlineMain},
            Icon = {OutlineButton, ImageButton}
        }
        for colorName, objects in pairs(elementsToColor) do
            for _, obj in ipairs(objects) do
                if obj and obj.Parent then
                    obj.BackgroundColor3 = theme[colorName]
                end
            end
        end
        OutlineMain.BackgroundTransparency = (themeName == "Transparent") and 1 or 0.4
		
        for _, obj in ipairs(NoxHub:GetDescendants()) do
            if obj:IsA("TextLabel") then
                if obj.Name == "NameHub" or obj.Name == "TitleSettings" or obj.Name == "Title" then
                    obj.TextColor3 = theme.Text
                elseif obj.Name == "SubTitle" or obj.Name == "Desc" then
                    obj.TextColor3 = theme.SubText
                end
            end
        end
	end
	
    -- [[ CREACIÓN DEL DROPDOWN DE TEMAS EN EL LUGAR CORRECTO ]]
    local mainForSettings = uitab:Tab("Settings", "") -- Dummy tab para acceso
    local themeDropdown = mainForSettings:Dropdown("Tema", {"Dark", "Light", "Red", "Transparent"}, getgenv().SettingsLib.Theme, function(selected)
        ApplyTheme(selected)
    end)
    themeDropdown.Parent = ScrollSettings -- Movemos el dropdown al panel de ajustes correcto
	
    ApplyTheme(getgenv().SettingsLib.Theme)
	
	-- Cachear todos los elementos para redimensionamiento
	task.wait(0.1) -- Esperar que se creen los tabs
	for _, child in ipairs(OutlineMain:GetDescendants()) do
		if child:IsA("ImageLabel") or child:IsA("ImageButton") then
			if child.Name == "TabIcon" or child.Name == "CloseButton" or child.Name == "ResizeButton" or child.Name == "SettingsButton" then
				imageElements[child] = child.Size
			end
		end
		if (child:IsA("TextLabel") or child:IsA("TextButton")) and child.Name ~= "NewResizeHandle" then
			textElements[child] = child.TextSize
		end
	end
	
    return uitab
end

if getgenv().SettingsLib.LoadAnimation then
    Update:StartLoad()
    task.wait(1.7) -- Espera a que la animación de carga casi termine
end

local Library = Update:Window({
    SubTitle = "v8.0 | by @xsolito_rbl",
    Size = UDim2.new(0, 700, 0, 450),
    TabWidth = 180
})

-- Habilitar la GUI principal
local hub = get_top_gui():FindFirstChild("xSOLITOxHUB")
if hub then
    hub.Enabled = true
end

-- Teletransportar icono flotante a su posición
task.spawn(function()
    repeat task.wait() until not get_top_gui():FindFirstChild("Loader")
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(OutlineButton, tweenInfo, {Position = UDim2.new(0.01, 0, 0.5, 0)}):Play()
end)

getgenv().xSOLITOxHUB_Running = false -- Marcar como no en ejecución para permitir una nueva ejecución limpia
