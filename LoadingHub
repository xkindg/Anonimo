--[[
	Nombre de la Librería: Diamond UI Library
	Versión: 2.0 (Modificada)
	Autor Original: Desconocido
	Modificaciones por: Gemini & Tu Nombre
	Fecha de Modificación: 16/08/2025
]]

-- Juramento: Este es el código completo, sin omisiones.

local Library = {}
Library.CreatedElements = {}
Library.Connections = {}

-- Servicios de Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Configuración por defecto de la librería (se sobreescribirá con la guardada)
Library.Config = {
	Theme = "Negro",
	FloatIconPosition = UDim2.new(0, 20, 0.5, 0),
	WindowPosition = UDim2.new(0.5, -300, 0.5, -250),
	WindowSize = UDim2.new(0, 600, 0, 500)
}

--[[=================================================================================
	SISTEMA DE TEMAS
	Descripción: Define los colores para todos los componentes de la UI.
	La función ApplyTheme recorre todos los elementos creados y aplica los colores
	del tema seleccionado.
==================================================================================]]

Library.Themes = {
	["Negro"] = {
		WindowTitle = Color3.fromRGB(200, 200, 200),
		MainFrame = Color3.fromRGB(20, 20, 20),
		Shadow = Color3.fromRGB(10, 10, 10),
		Tabs = Color3.fromRGB(30, 30, 30),
		Text = Color3.fromRGB(255, 255, 255),
		TextSecondary = Color3.fromRGB(180, 180, 180),
		ComponentBackground = Color3.fromRGB(40, 40, 40),
		Primary = Color3.fromRGB(0, 110, 255), -- Azul vibrante
		PrimaryGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 50, 150))
		}),
		RedGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 20, 20))
		}),
		FloatIcon = Color3.fromRGB(0, 110, 255),
		IsShadowEnabled = true
	},
	["Blanco"] = {
		WindowTitle = Color3.fromRGB(80, 80, 80),
		MainFrame = Color3.fromRGB(245, 245, 245),
		Shadow = Color3.fromRGB(200, 200, 200),
		Tabs = Color3.fromRGB(230, 230, 230),
		Text = Color3.fromRGB(10, 10, 10),
		TextSecondary = Color3.fromRGB(100, 100, 100),
		ComponentBackground = Color3.fromRGB(220, 220, 220),
		Primary = Color3.fromRGB(0, 110, 255),
		PrimaryGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 50, 150))
		}),
		RedGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 20, 20))
		}),
		FloatIcon = Color3.fromRGB(0, 110, 255),
		IsShadowEnabled = true
	},
	["Rojo"] = {
		WindowTitle = Color3.fromRGB(220, 220, 220),
		MainFrame = Color3.fromRGB(40, 10, 10),
		Shadow = Color3.fromRGB(20, 5, 5),
		Tabs = Color3.fromRGB(50, 15, 15),
		Text = Color3.fromRGB(255, 255, 255),
		TextSecondary = Color3.fromRGB(200, 180, 180),
		ComponentBackground = Color3.fromRGB(60, 20, 20),
		Primary = Color3.fromRGB(255, 40, 40),
		PrimaryGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 20, 20))
		}),
		RedGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 20, 20))
		}),
		FloatIcon = Color3.fromRGB(255, 40, 40),
		IsShadowEnabled = true
	},
	["Transparente"] = {
		WindowTitle = Color3.fromRGB(255, 255, 255),
		MainFrame = Color3.fromRGB(20, 20, 20),
		Shadow = Color3.fromRGB(10, 10, 10),
		Tabs = Color3.fromRGB(30, 30, 30),
		Text = Color3.fromRGB(255, 255, 255),
		TextSecondary = Color3.fromRGB(200, 200, 200),
		ComponentBackground = Color3.fromRGB(40, 40, 40),
		Primary = Color3.fromRGB(0, 110, 255),
		PrimaryGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 50, 150))
		}),
		RedGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 80, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 20, 20))
		}),
		FloatIcon = Color3.fromRGB(0, 110, 255),
		IsShadowEnabled = false, -- Deshabilita el fondo-sombra
		-- Transparencias
		MainFrameTransparency = 0.85,
		TabsTransparency = 0.8,
		ComponentTransparency = 0.75,
	},
}

function Library:ApplyTheme(themeName)
	local theme = Library.Themes[themeName]
	if not theme then return end

	Library.Config.Theme = themeName -- Guarda el tema actual en la configuración

	local mainFrameTransparency = theme.MainFrameTransparency or 0
	local tabsTransparency = theme.TabsTransparency or 0
	local componentTransparency = theme.ComponentTransparency or 0

	for _, element in pairs(Library.CreatedElements) do
		if not element.Object or not element.Object.Parent then continue end
		
		local obj = element.Object
		local elementType = element.Type

		if elementType == "MainFrame" then
			obj.BackgroundColor3 = theme.MainFrame
			obj.BackgroundTransparency = mainFrameTransparency
		elseif elementType == "WindowTitle" then
			obj.TextColor3 = theme.WindowTitle
		elseif elementType == "Shadow" then
			obj.Visible = theme.IsShadowEnabled
			obj.ImageColor3 = theme.Shadow
		elseif elementType == "TabsFrame" then
			obj.BackgroundColor3 = theme.Tabs
			obj.BackgroundTransparency = tabsTransparency
		elseif elementType == "TabButton" then
			obj.TextColor3 = theme.Text
		elseif elementType == "TabButtonSelected" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient then
				gradient.Color = theme.PrimaryGradient
			end
		elseif elementType == "ContentFrame" then
			-- No necesita cambio de color, solo es un contenedor
		elseif elementType == "CategoryTitle" then
			obj.TextColor3 = theme.Text
		elseif elementType == "CategoryTitleUnderline" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient then
				gradient.Color = theme.PrimaryGradient
			end
		elseif elementType == "Button" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient then
				gradient.Color = theme.PrimaryGradient
			end
			local textLabel = obj:FindFirstChildOfClass("TextLabel")
			if textLabel then textLabel.TextColor3 = theme.Text end
		elseif elementType == "ResetButton" then
			local textLabel = obj:FindFirstChildOfClass("TextLabel")
			if textLabel then textLabel.TextColor3 = theme.Text end
		elseif elementType == "ToggleFrame" then
			obj.BackgroundColor3 = theme.ComponentBackground
			obj.BackgroundTransparency = componentTransparency
		elseif elementType == "ToggleLabel" then
			obj.TextColor3 = theme.Text
		elseif elementType == "ToggleSwitch" then
			local isToggled = obj.BackgroundColor3 == Library.Themes[element.LastTheme].Primary
			if isToggled then
				obj.BackgroundColor3 = theme.Primary
			else
				obj.BackgroundColor3 = theme.ComponentBackground:Lerp(Color3.new(0,0,0), 0.3)
			end
			element.LastTheme = themeName -- Actualiza el último tema para futuras comparaciones
		elseif elementType == "DropdownFrame" then
			obj.BackgroundColor3 = theme.ComponentBackground
			obj.BackgroundTransparency = componentTransparency
		elseif elementType == "DropdownLabel" then
			obj.TextColor3 = theme.Text
		elseif elementType == "DropdownList" then
			obj.BackgroundColor3 = theme.MainFrame
			obj.BackgroundTransparency = mainFrameTransparency
		elseif elementType == "DropdownOption" then
			obj.TextColor3 = theme.Text
		elseif elementType == "SliderFrame" then
			obj.BackgroundColor3 = theme.ComponentBackground
			obj.BackgroundTransparency = componentTransparency
		elseif elementType == "SliderLabel" then
			obj.TextColor3 = theme.Text
		elseif elementType == "SliderTrack" then
			obj.BackgroundColor3 = theme.Text
		elseif elementType == "SliderFill" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient then
				gradient.Color = theme.PrimaryGradient
			end
		elseif elementType == "SliderValue" then
			obj.TextColor3 = theme.MainFrame:ContrastingColor()
		elseif elementType == "TextboxFrame" then
			obj.BackgroundColor3 = theme.ComponentBackground
			obj.BackgroundTransparency = componentTransparency
		elseif elementType == "Textbox" then
			obj.TextColor3 = theme.Text
			obj.PlaceholderColor3 = theme.TextSecondary
		elseif elementType == "FloatIcon" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient then
				gradient.Color = theme.PrimaryGradient
			end
		elseif elementType == "ResetDialog" then
			obj.BackgroundColor3 = theme.MainFrame
			obj.BackgroundTransparency = mainFrameTransparency
		elseif elementType == "ResetDialogText" then
			obj.TextColor3 = theme.Text
		elseif elementType == "ResetDialogButton" then
			local gradient = obj:FindFirstChildOfClass("UIGradient")
			if gradient and element.IsConfirm then
				gradient.Color = theme.RedGradient
			elseif gradient then
				gradient.Color = theme.PrimaryGradient
			end
			obj:FindFirstChildOfClass("TextLabel").TextColor3 = theme.Text
		end
	end
end

--[[=================================================================================
	FUNCIONES AUXILIARES DE ESTILO
	Descripción: Pequeñas funciones que ayudan a crear elementos visuales
	recurrentes como bordes, gradientes y esquinas redondeadas.
==================================================================================]]

local function ApplyPrimaryGradient(obj)
	for _, child in ipairs(obj:GetChildren()) do
		if child:IsA("UIGradient") then child:Destroy() end
	end
	local gradient = Instance.new("UIGradient")
	gradient.Color = Library.Themes[Library.Config.Theme].PrimaryGradient
	gradient.Rotation = 45
	gradient.Parent = obj
	return gradient
end

local function ApplyRedGradient(obj)
	for _, child in ipairs(obj:GetChildren()) do
		if child:IsA("UIGradient") then child:Destroy() end
	end
	local gradient = Instance.new("UIGradient")
	gradient.Color = Library.Themes[Library.Config.Theme].RedGradient
	gradient.Rotation = 45
	gradient.Parent = obj
	return gradient
end

-- Esto crea: Un borde exterior con degradado para resaltar un frame.
local function CreateBorder(parent)
	local border = Instance.new("ImageLabel")
	border.Name = "Border"
	border.Parent = parent
	border.Size = UDim2.new(1, 4, 1, 4)
	border.Position = UDim2.new(0.5, 0, 0.5, 0)
	border.AnchorPoint = Vector2.new(0.5, 0.5)
	border.BackgroundTransparency = 1
	border.Image = "rbxassetid://2793623834"
	border.ScaleType = Enum.ScaleType.Slice
	border.SliceCenter = Rect.new(10, 10, 118, 118)
	border.ZIndex = parent.ZIndex - 1

	local gradient = Instance.new("UIGradient")
	gradient.Color = Library.Themes[Library.Config.Theme].PrimaryGradient
	gradient.Rotation = 90
	gradient.Parent = border

	Library.CreatedElements[#Library.CreatedElements + 1] = { Object = border, Type = "Border" }
	return border
end

--[[=================================================================================
	CREACIÓN DE LA VENTANA PRINCIPAL (UI)
	Descripción: La función principal que inicializa toda la interfaz gráfica.
	Crea la ventana, el icono flotante, las pestañas y el contenido.
==================================================================================]]

function Library:CreateWindow(title)
	for _, v in pairs(Library.Connections) do
		v:Disconnect()
	end
	table.clear(Library.Connections)

	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = title .. "UI"
	ScreenGui.Parent = getcoregui() or game.Players.LocalPlayer:WaitForChild("PlayerGui")
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global

	local MainFrame = Instance.new("Frame")
	MainFrame.Name = "MainFrame"
	MainFrame.Parent = ScreenGui
	MainFrame.Size = Library.Config.WindowSize
	MainFrame.Position = Library.Config.WindowPosition
	MainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
	MainFrame.BackgroundTransparency = 1
	MainFrame.Active = true
	MainFrame.Visible = true
	MainFrame.ClipsDescendants = false
	MainFrame.ZIndex = 1000

	-- Sombra / Fondo exterior
	local Shadow = Instance.new("ImageLabel")
	Shadow.Name = "Shadow"
	Shadow.Parent = MainFrame
	Shadow.Size = UDim2.new(1, 20, 1, 20)
	Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
	Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
	Shadow.BackgroundTransparency = 1
	Shadow.Image = "rbxassetid://6312572188"
	Shadow.ImageColor3 = Color3.fromRGB(10, 10, 10)
	Shadow.ScaleType = Enum.ScaleType.Slice
	Shadow.SliceCenter = Rect.new(49, 49, 49, 49)
	Shadow.ZIndex = MainFrame.ZIndex - 1

	local WindowFrame = Instance.new("Frame")
	WindowFrame.Name = "WindowFrame"
	WindowFrame.Parent = MainFrame
	WindowFrame.Size = UDim2.new(1, 0, 1, 0)
	WindowFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	WindowFrame.BorderSizePixel = 0
	WindowFrame.ZIndex = MainFrame.ZIndex + 1
	local corner = Instance.new("UICorner", WindowFrame)
	corner.CornerRadius = UDim.new(0, 8)

	-- Título de la ventana
	local WindowTitle = Instance.new("TextLabel")
	WindowTitle.Name = "WindowTitle"
	WindowTitle.Parent = WindowFrame
	WindowTitle.Size = UDim2.new(1, -10, 0, 40)
	WindowTitle.Position = UDim2.new(0.5, 0, 0, 0)
	WindowTitle.AnchorPoint = Vector2.new(0.5, 0)
	WindowTitle.BackgroundTransparency = 1
	WindowTitle.Font = Enum.Font.GothamBold
	WindowTitle.Text = title
	WindowTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
	WindowTitle.TextSize = 20
	WindowTitle.ZIndex = WindowFrame.ZIndex + 1

	-- Contenedor de Pestañas
	local TabsFrame = Instance.new("Frame")
	TabsFrame.Name = "TabsFrame"
	TabsFrame.Parent = WindowFrame
	TabsFrame.Size = UDim2.new(0, 120, 1, -40)
	TabsFrame.Position = UDim2.new(0, 0, 0, 40)
	TabsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	TabsFrame.BorderSizePixel = 0
	TabsFrame.ZIndex = WindowFrame.ZIndex + 1
	local tabsListLayout = Instance.new("UIListLayout", TabsFrame)
	tabsListLayout.Padding = UDim.new(0, 5)
	tabsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

	-- Contenedor del contenido
	local ContentFrame = Instance.new("Frame")
	ContentFrame.Name = "ContentFrame"
	ContentFrame.Parent = WindowFrame
	ContentFrame.Size = UDim2.new(1, -120, 1, -40)
	ContentFrame.Position = UDim2.new(0, 120, 0, 40)
	ContentFrame.BackgroundTransparency = 1
	ContentFrame.ZIndex = WindowFrame.ZIndex + 1

	-- Registro de elementos para el sistema de temas
	Library.CreatedElements = {
		{ Object = WindowFrame, Type = "MainFrame" },
		{ Object = WindowTitle, Type = "WindowTitle" },
		{ Object = Shadow, Type = "Shadow" },
		{ Object = TabsFrame, Type = "TabsFrame" },
		{ Object = ContentFrame, Type = "ContentFrame" }
	}
	
	-- Icono flotante para abrir/cerrar
	local FloatIcon = Instance.new("Frame")
	FloatIcon.Name = "FloatIcon"
	FloatIcon.Parent = ScreenGui
	FloatIcon.Size = UDim2.new(0, 50, 0, 50)
	FloatIcon.Position = Library.Config.FloatIconPosition
	FloatIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	FloatIcon.BorderSizePixel = 0
	FloatIcon.ZIndex = 999
	local fiCorner = Instance.new("UICorner", FloatIcon)
	fiCorner.CornerRadius = UDim.new(0, 6)
	local fiGradient = ApplyPrimaryGradient(FloatIcon)
	fiGradient.Rotation = 90
	
	local fiImage = Instance.new("ImageLabel")
	fiImage.Parent = FloatIcon
	fiImage.Size = UDim2.new(1, -10, 1, -10)
	fiImage.Position = UDim2.new(0.5, 0, 0.5, 0)
	fiImage.AnchorPoint = Vector2.new(0.5, 0.5)
	fiImage.BackgroundTransparency = 1
	fiImage.Image = "rbxassetid://11139562799" -- Icono de flechas
	fiImage.ZIndex = FloatIcon.ZIndex + 1
	
	Library.CreatedElements[#Library.CreatedElements + 1] = { Object = FloatIcon, Type = "FloatIcon" }

	local fiButton = Instance.new("TextButton")
	fiButton.Parent = FloatIcon
	fiButton.Size = UDim2.new(1, 0, 1, 0)
	fiButton.BackgroundTransparency = 1
	fiButton.Text = ""
	fiButton.ZIndex = FloatIcon.ZIndex + 2
	fiButton.MouseButton1Click:Connect(function()
		MainFrame.Visible = not MainFrame.Visible
	end)

	-- Lógica de arrastre del icono flotante
	local isDraggingIcon = false
	fiButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDraggingIcon = true
			local initialPos = input.Position
			local initialIconPos = FloatIcon.Position
			local moveConn, endConn

			moveConn = UserInputService.InputChanged:Connect(function(moveInput)
				if (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) and isDraggingIcon then
					local delta = moveInput.Position - initialPos
					FloatIcon.Position = UDim2.new(initialIconPos.X.Scale, initialIconPos.X.Offset + delta.X, initialIconPos.Y.Scale, initialIconPos.Y.Offset + delta.Y)
				end
			end)

			endConn = UserInputService.InputEnded:Connect(function(endInput)
				if (endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch) and isDraggingIcon then
					isDraggingIcon = false
					Library.Config.FloatIconPosition = FloatIcon.Position
					moveConn:Disconnect()
					endConn:Disconnect()
				end
			end)
			table.insert(Library.Connections, moveConn)
			table.insert(Library.Connections, endConn)
		end
	end)

	-- Lógica de arrastre de la ventana principal
	local isDraggingWindow = false
	WindowTitle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDraggingWindow = true
			local initialPos = input.Position
			local initialWindowPos = MainFrame.Position
			local moveConn, endConn
			
			moveConn = UserInputService.InputChanged:Connect(function(moveInput)
				if (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) and isDraggingWindow then
					local delta = moveInput.Position - initialPos
					MainFrame.Position = UDim2.new(initialWindowPos.X.Scale, initialWindowPos.X.Offset + delta.X, initialWindowPos.Y.Scale, initialWindowPos.Y.Offset + delta.Y)
				end
			end)
			
			endConn = UserInputService.InputEnded:Connect(function(endInput)
				if (endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch) and isDraggingWindow then
					isDraggingWindow = false
					Library.Config.WindowPosition = MainFrame.Position
					moveConn:Disconnect()
					endConn:Disconnect()
				end
			end)
			table.insert(Library.Connections, moveConn)
			table.insert(Library.Connections, endConn)
		end
	end)

	-- Lógica de redimensión de la ventana
	local resizeHandleSize = 12 -- Tamaño del área de agarre
	local minSize = Vector2.new(450, 350)
	
	local RightResize = Instance.new("Frame")
	RightResize.Parent = WindowFrame
	RightResize.Size = UDim2.new(0, resizeHandleSize, 1, 0)
	RightResize.Position = UDim2.new(1, -resizeHandleSize, 0, 0)
	RightResize.BackgroundTransparency = 1
	RightResize.ZIndex = WindowFrame.ZIndex + 10
	
	local BottomResize = Instance.new("Frame")
	BottomResize.Parent = WindowFrame
	BottomResize.Size = UDim2.new(1, 0, 0, resizeHandleSize)
	BottomResize.Position = UDim2.new(0, 0, 1, -resizeHandleSize)
	BottomResize.BackgroundTransparency = 1
	BottomResize.ZIndex = WindowFrame.ZIndex + 10
	
	local BottomRightResize = Instance.new("Frame")
	BottomRightResize.Parent = WindowFrame
	BottomRightResize.Size = UDim2.new(0, resizeHandleSize, 0, resizeHandleSize)
	BottomRightResize.Position = UDim2.new(1, -resizeHandleSize, 1, -resizeHandleSize)
	BottomRightResize.BackgroundTransparency = 1
	BottomRightResize.ZIndex = WindowFrame.ZIndex + 11

	local function startResize(handle)
		local isResizing = true
		local initialMousePos = UserInputService:GetMouseLocation()
		local initialSize = MainFrame.AbsoluteSize
		local moveConn, endConn
		
		moveConn = UserInputService.InputChanged:Connect(function(input)
			if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and isResizing then
				local delta = input.Position - initialMousePos
				local newSize = initialSize
				if handle == RightResize or handle == BottomRightResize then
					newSize = Vector2.new(math.max(minSize.X, initialSize.X + delta.X), newSize.Y)
				end
				if handle == BottomResize or handle == BottomRightResize then
					newSize = Vector2.new(newSize.X, math.max(minSize.Y, initialSize.Y + delta.Y))
				end
				MainFrame.Size = UDim2.fromOffset(newSize.X, newSize.Y)
			end
		end)

		endConn = UserInputService.InputEnded:Connect(function(input)
			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and isResizing then
				isResizing = false
				Library.Config.WindowSize = MainFrame.Size
				moveConn:Disconnect()
				endConn:Disconnect()
			end
		end)
		table.insert(Library.Connections, moveConn)
		table.insert(Library.Connections, endConn)
	end
	
	RightResize.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then startResize(RightResize) end end)
	BottomResize.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then startResize(BottomResize) end end)
	BottomRightResize.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then startResize(BottomRightResize) end end)
	

	local Window = {}
	local Tabs = {}
	local CurrentTab = nil

	-- Esto crea: Una nueva pestaña en la barra lateral.
	function Window:CreateTab(name)
		local TabContent = Instance.new("ScrollingFrame")
		TabContent.Name = name .. "Content"
		TabContent.Parent = ContentFrame
		TabContent.Size = UDim2.new(1, 0, 1, 0)
		TabContent.BackgroundTransparency = 1
		TabContent.BorderSizePixel = 0
		TabContent.Visible = false
		TabContent.ScrollingDirection = Enum.ScrollingDirection.Y
		TabContent.ScrollBarThickness = 6
		TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
		TabContent.CanvasSize = UDim2.new()
		
		local contentListLayout = Instance.new("UIListLayout", TabContent)
		contentListLayout.Padding = UDim.new(0, 15)
		contentListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		contentListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

		Library.CreatedElements[#Library.CreatedElements + 1] = { Object = TabContent, Type = "ContentFrame" }

		local TabButton = Instance.new("TextButton")
		TabButton.Name = name .. "Button"
		TabButton.Parent = TabsFrame
		TabButton.Size = UDim2.new(1, -10, 0, 40)
		TabButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.BackgroundTransparency = 1
		TabButton.Font = Enum.Font.GothamBold
		TabButton.Text = name
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.TextSize = 16
		TabButton.ZIndex = TabsFrame.ZIndex + 1

		local SelectionIndicator = Instance.new("Frame", TabButton)
		SelectionIndicator.Name = "SelectionIndicator"
		SelectionIndicator.Size = UDim2.new(0, 4, 0.8, 0)
		SelectionIndicator.Position = UDim2.new(0, 0, 0.5, 0)
		SelectionIndicator.AnchorPoint = Vector2.new(0, 0.5)
		SelectionIndicator.BackgroundColor3 = Color3.new(1, 1, 1)
		SelectionIndicator.BackgroundTransparency = 1 -- Oculto por defecto
		SelectionIndicator.ZIndex = TabButton.ZIndex + 1
		local siCorner = Instance.new("UICorner", SelectionIndicator)
		siCorner.CornerRadius = UDim.new(1, 0)
		ApplyPrimaryGradient(SelectionIndicator)
		
		Library.CreatedElements[#Library.CreatedElements + 1] = { Object = TabButton, Type = "TabButton" }
		Library.CreatedElements[#Library.CreatedElements + 1] = { Object = SelectionIndicator, Type = "TabButtonSelected" }

		local Tab = { Content = TabContent }
		Tabs[name] = Tab

		TabButton.MouseButton1Click:Connect(function()
			if CurrentTab == Tab then return end

			for tabName, tabData in pairs(Tabs) do
				tabData.Content.Visible = false
				local button = TabsFrame:FindFirstChild(tabName .. "Button")
				if button then
					button.TextXAlignment = Enum.TextXAlignment.Center
					button.SelectionIndicator.BackgroundTransparency = 1
				end
			end
			
			Tab.Content.Visible = true
			TabButton.TextXAlignment = Enum.TextXAlignment.Left
			TabButton.TextOffset = Vector2.new(15, 0)
			SelectionIndicator.BackgroundTransparency = 0
			CurrentTab = Tab
		end)

		-- Seleccionar la primera pestaña por defecto
		if not CurrentTab then
			TabButton.TextXAlignment = Enum.TextXAlignment.Left
			TabButton.TextOffset = Vector2.new(15, 0)
			SelectionIndicator.BackgroundTransparency = 0
			Tab.Content.Visible = true
			CurrentTab = Tab
		end

		local TabObject = {}

		-- Esto crea: Un título de categoría con una línea debajo y animaciones.
		function TabObject:CreateCategory(text)
			local TitleFrame = Instance.new("Frame")
			TitleFrame.Name = "CategoryTitleFrame"
			TitleFrame.Parent = Tab.Content
			TitleFrame.Size = UDim2.new(0.95, 0, 0, 40)
			TitleFrame.BackgroundTransparency = 1
			
			local TitleLabel = Instance.new("TextLabel", TitleFrame)
			TitleLabel.Size = UDim2.new(1, 0, 1, -10)
			TitleLabel.BackgroundTransparency = 1
			TitleLabel.Font = Enum.Font.GothamBold
			TitleLabel.Text = text
			TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			TitleLabel.TextSize = 22
			TitleLabel.TextXAlignment = Enum.TextXAlignment.Center
			
			local Underline = Instance.new("Frame", TitleFrame)
			Underline.Size = UDim2.new(1, 0, 0, 3)
			Underline.Position = UDim2.new(0.5, 0, 1, 0)
			Underline.AnchorPoint = Vector2.new(0.5, 1)
			Underline.BorderSizePixel = 0
			ApplyPrimaryGradient(Underline)

			-- Animaciones de carga circulares a los lados del título
			local function createLoadingCircle(parent, position)
				local circle = Instance.new("Frame", parent)
				circle.Size = UDim2.new(0, 15, 0, 15)
				circle.Position = position
				circle.AnchorPoint = Vector2.new(0.5, 0.5)
				circle.BackgroundTransparency = 1
				local gradient = Instance.new("UIGradient", circle)
				gradient.Transparency = NumberSequence.new({
					NumberSequenceKeypoint.new(0, 0),
					NumberSequenceKeypoint.new(0.5, 0),
					NumberSequenceKeypoint.new(0.51, 1),
					NumberSequenceKeypoint.new(1, 1),
				})
				ApplyPrimaryGradient(gradient)
				
				spawn(function()
					while circle.Parent do
						TweenService:Create(gradient, TweenInfo.new(1, Enum.EasingStyle.Linear), {Rotation = gradient.Rotation + 360}):Play()
						wait(1)
					end
				end)
			end

			local textBounds = TitleLabel.TextBounds
			local titleWidth = textBounds.X
			local spacing = 10
			
			createLoadingCircle(TitleLabel, UDim2.new(0.5, -(titleWidth/2) - spacing, 0.5, 0))
			createLoadingCircle(TitleLabel, UDim2.new(0.5, -(titleWidth/2) - spacing - 20, 0.5, 0))
			createLoadingCircle(TitleLabel, UDim2.new(0.5, -(titleWidth/2) - spacing - 40, 0.5, 0))

			createLoadingCircle(TitleLabel, UDim2.new(0.5, (titleWidth/2) + spacing, 0.5, 0))
			createLoadingCircle(TitleLabel, UDim2.new(0.5, (titleWidth/2) + spacing + 20, 0.5, 0))
			createLoadingCircle(TitleLabel, UDim2.new(0.5, (titleWidth/2) + spacing + 40, 0.5, 0))


			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = TitleLabel, Type = "CategoryTitle" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Underline, Type = "CategoryTitleUnderline" }
		end
		
		-- Esto crea: Un botón estándar con icono opcional.
		function TabObject:CreateButton(text, callback, icon)
			local ButtonFrame = Instance.new("Frame")
			ButtonFrame.Name = "ButtonFrame"
			ButtonFrame.Parent = Tab.Content
			ButtonFrame.Size = UDim2.new(0.95, 0, 0, 45)
			ButtonFrame.BackgroundTransparency = 1
			
			local Button = Instance.new("TextButton", ButtonFrame)
			Button.Size = UDim2.new(1, 0, 1, 0)
			Button.Text = ""
			Button.AutoButtonColor = false
			local bCorner = Instance.new("UICorner", Button)
			bCorner.CornerRadius = UDim.new(0, 8)
			ApplyPrimaryGradient(Button)
			
			local textOffset = 0
			if icon then
				local buttonIcon = Instance.new("ImageLabel", Button)
				buttonIcon.Size = UDim2.new(0, 26, 0, 26)
				buttonIcon.Position = UDim2.new(0, 15, 0.5, 0)
				buttonIcon.AnchorPoint = Vector2.new(0, 0.5)
				buttonIcon.BackgroundTransparency = 1
				buttonIcon.Image = icon
				buttonIcon.ScaleType = Enum.ScaleType.Fit
				textOffset = 45
			end

			local ButtonText = Instance.new("TextLabel", Button)
			ButtonText.Size = UDim2.new(1, -textOffset - 10, 1, 0)
			ButtonText.Position = UDim2.new(0, textOffset, 0, 0)
			ButtonText.BackgroundTransparency = 1
			ButtonText.Font = Enum.Font.GothamBold
			ButtonText.Text = text
			ButtonText.TextColor3 = Color3.fromRGB(255, 255, 255)
			ButtonText.TextSize = 18
			
			local conn = Button.MouseButton1Click:Connect(function()
				pcall(callback)
			end)
			table.insert(Library.Connections, conn)

			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Button, Type = "Button" }
		end
		
		-- Esto crea: Un interruptor (toggle) para activar/desactivar opciones.
		function TabObject:CreateToggle(text, default, callback)
			local ToggleFrame = Instance.new("Frame")
			ToggleFrame.Name = "ToggleFrame"
			ToggleFrame.Parent = Tab.Content
			ToggleFrame.Size = UDim2.new(0.95, 0, 0, 50)
			ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			local tfCorner = Instance.new("UICorner", ToggleFrame)
			tfCorner.CornerRadius = UDim.new(0, 8)

			local ToggleLabel = Instance.new("TextLabel", ToggleFrame)
			ToggleLabel.Size = UDim2.new(1, -90, 1, 0)
			ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
			ToggleLabel.BackgroundTransparency = 1
			ToggleLabel.Font = Enum.Font.GothamBold
			ToggleLabel.Text = text
			ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			ToggleLabel.TextSize = 18
			ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

			local Switch = Instance.new("Frame", ToggleFrame)
			Switch.Size = UDim2.new(0, 60, 0, 30)
			Switch.Position = UDim2.new(1, -15, 0.5, 0)
			Switch.AnchorPoint = Vector2.new(1, 0.5)
			Switch.BackgroundColor3 = default and Color3.fromRGB(0, 110, 255) or Color3.fromRGB(50, 50, 50)
			local sCorner = Instance.new("UICorner", Switch)
			sCorner.CornerRadius = UDim.new(1, 0)
			
			local Circle = Instance.new("Frame", Switch)
			Circle.Size = UDim2.new(0, 24, 0, 24)
			Circle.Position = default and UDim2.new(1, -3, 0.5, 0) or UDim2.new(0, 3, 0.5, 0)
			Circle.AnchorPoint = default and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
			Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			local cCorner = Instance.new("UICorner", Circle)
			cCorner.CornerRadius = UDim.new(1, 0)
			
			local toggled = default
			local function updateToggle(state)
				toggled = state
				local theme = Library.Themes[Library.Config.Theme]
				TweenService:Create(Switch, TweenInfo.new(0.2), {BackgroundColor3 = toggled and theme.Primary or theme.ComponentBackground:Lerp(Color3.new(0,0,0), 0.3)}):Play()
				TweenService:Create(Circle, TweenInfo.new(0.2), {
					Position = toggled and UDim2.new(1, -3, 0.5, 0) or UDim2.new(0, 3, 0.5, 0),
					AnchorPoint = toggled and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
				}):Play()
				pcall(callback, toggled)
			end

			local Button = Instance.new("TextButton", ToggleFrame)
			Button.Size = UDim2.new(1, 0, 1, 0)
			Button.BackgroundTransparency = 1
			Button.Text = ""
			local conn = Button.MouseButton1Click:Connect(function()
				updateToggle(not toggled)
			end)
			table.insert(Library.Connections, conn)
			
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = ToggleFrame, Type = "ToggleFrame" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = ToggleLabel, Type = "ToggleLabel" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Switch, Type = "ToggleSwitch", LastTheme = Library.Config.Theme }
		end

		-- Esto crea: Una lista desplegable (dropdown) para seleccionar una opción.
		function TabObject:CreateDropdown(text, options, callback)
			local DropdownFrame = Instance.new("Frame")
			DropdownFrame.Name = "DropdownFrame"
			DropdownFrame.Parent = Tab.Content
			DropdownFrame.Size = UDim2.new(0.95, 0, 0, 50)
			DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			DropdownFrame.ClipsDescendants = true
			local dfCorner = Instance.new("UICorner", DropdownFrame)
			dfCorner.CornerRadius = UDim.new(0, 8)
			
			local CurrentSelection = options[1]
			
			local DropdownLabel = Instance.new("TextLabel", DropdownFrame)
			DropdownLabel.Size = UDim2.new(1, -90, 1, 0)
			DropdownLabel.Position = UDim2.new(0, 15, 0, 0)
			DropdownLabel.BackgroundTransparency = 1
			DropdownLabel.Font = Enum.Font.GothamBold
			DropdownLabel.Text = text .. ": " .. CurrentSelection
			DropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			DropdownLabel.TextSize = 18
			DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left

			local DropdownIcon = Instance.new("ImageLabel", DropdownFrame)
			DropdownIcon.Size = UDim2.new(0, 25, 0, 25)
			DropdownIcon.Position = UDim2.new(1, -20, 0.5, 0)
			DropdownIcon.AnchorPoint = Vector2.new(1, 0.5)
			DropdownIcon.BackgroundTransparency = 1
			DropdownIcon.Image = "rbxassetid://3926305904" -- Chevron Down
			DropdownIcon.ImageColor3 = Color3.fromRGB(255, 255, 255)
			
			-- Flechas de navegación
			local LeftArrow = Instance.new("ImageButton", DropdownFrame)
			LeftArrow.Size = UDim2.new(0, 20, 0, 20)
			LeftArrow.Position = UDim2.new(1, -75, 0.5, 0)
			LeftArrow.AnchorPoint = Vector2.new(1, 0.5)
			LeftArrow.BackgroundTransparency = 1
			LeftArrow.Image = "rbxassetid://3926307971" -- Chevron Left
			
			local RightArrow = Instance.new("ImageButton", DropdownFrame)
			RightArrow.Size = UDim2.new(0, 20, 0, 20)
			RightArrow.Position = UDim2.new(1, -50, 0.5, 0)
			RightArrow.AnchorPoint = Vector2.new(1, 0.5)
			RightArrow.BackgroundTransparency = 1
			RightArrow.Image = "rbxassetid://3926307976" -- Chevron Right

			local DropdownList = Instance.new("ScrollingFrame", DropdownFrame)
			DropdownList.Size = UDim2.new(1, 0, 0, 150)
			DropdownList.Position = UDim2.new(0, 0, 1, 5)
			DropdownList.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			DropdownList.BorderSizePixel = 0
			DropdownList.Visible = false
			DropdownList.ZIndex = DropdownFrame.ZIndex + 10
			DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
			local dlCorner = Instance.new("UICorner", DropdownList)
			dlCorner.CornerRadius = UDim.new(0, 8)
			local dlLayout = Instance.new("UIListLayout", DropdownList)
			dlLayout.Padding = UDim.new(0, 2)
			
			local isOpen = false
			local function toggleDropdown()
				isOpen = not isOpen
				DropdownList.Visible = isOpen
				local height = isOpen and 50 + math.min(150, #options * 42 + 5) or 50
				TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(0.95, 0, 0, height)}):Play()
				TweenService:Create(DropdownIcon, TweenInfo.new(0.2), {Rotation = isOpen and 180 or 0}):Play()
			end

			local function updateSelection(newSelection)
				CurrentSelection = newSelection
				DropdownLabel.Text = text .. ": " .. CurrentSelection
				pcall(callback, CurrentSelection)
			end

			for _, optionName in ipairs(options) do
				local OptionButton = Instance.new("TextButton", DropdownList)
				OptionButton.Name = optionName
				OptionButton.Size = UDim2.new(1, -10, 0, 40)
				OptionButton.Position = UDim2.new(0.5, 0, 0, 0)
				OptionButton.AnchorPoint = Vector2.new(0.5, 0)
				OptionButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				OptionButton.BackgroundTransparency = 1
				OptionButton.Font = Enum.Font.Gotham
				OptionButton.Text = optionName
				OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
				OptionButton.TextSize = 16
				
				local conn = OptionButton.MouseButton1Click:Connect(function()
					updateSelection(optionName)
					toggleDropdown()
				end)
				table.insert(Library.Connections, conn)
				Library.CreatedElements[#Library.CreatedElements + 1] = { Object = OptionButton, Type = "DropdownOption" }
			end

			local function cycleOption(direction)
				local currentIndex = table.find(options, CurrentSelection)
				local nextIndex = currentIndex + direction
				if nextIndex > #options then nextIndex = 1 end
				if nextIndex < 1 then nextIndex = #options end
				updateSelection(options[nextIndex])
			end

			local leftConn = LeftArrow.MouseButton1Click:Connect(function() cycleOption(-1) end)
			local rightConn = RightArrow.MouseButton1Click:Connect(function() cycleOption(1) end)
			table.insert(Library.Connections, leftConn)
			table.insert(Library.Connections, rightConn)

			local MainButton = Instance.new("TextButton", DropdownFrame)
			MainButton.Size = UDim2.new(1, 0, 1, 0)
			MainButton.BackgroundTransparency = 1
			MainButton.Text = ""
			local conn = MainButton.MouseButton1Click:Connect(toggleDropdown)
			table.insert(Library.Connections, conn)

			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DropdownFrame, Type = "DropdownFrame" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DropdownLabel, Type = "DropdownLabel" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DropdownList, Type = "DropdownList" }
		end
		
		-- Esto crea: Un dropdown especializado para seleccionar jugadores.
		function TabObject:CreatePlayerDropdown(text, callback)
			-- Contenedor principal para dropdown, toggle y flechas
			local MainContainer = Instance.new("Frame", Tab.Content)
			MainContainer.Name = "PlayerDropdownContainer"
			MainContainer.Size = UDim2.new(0.95, 0, 0, 100) -- Altura inicial para dropdown y toggle
			MainContainer.BackgroundTransparency = 1
			MainContainer.ClipsDescendants = false

			local DropdownWrapper = Instance.new("Frame", MainContainer)
			DropdownWrapper.Size = UDim2.new(1, 0, 0, 50)
			DropdownWrapper.BackgroundTransparency = 1
			DropdownWrapper.ClipsDescendants = true
			
			local DropdownFrame = Instance.new("Frame", DropdownWrapper)
			DropdownFrame.Name = "DropdownFrame"
			DropdownFrame.Size = UDim2.new(1, 0, 1, 0)
			DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			local dfCorner = Instance.new("UICorner", DropdownFrame)
			dfCorner.CornerRadius = UDim.new(0, 8)
			
			local SelectedPlayerLabel = Instance.new("TextLabel", DropdownFrame)
			SelectedPlayerLabel.Size = UDim2.new(1, -60, 1, 0)
			SelectedPlayerLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
			SelectedPlayerLabel.AnchorPoint = Vector2.new(0.5, 0.5)
			SelectedPlayerLabel.BackgroundTransparency = 1
			SelectedPlayerLabel.Font = Enum.Font.GothamBold
			SelectedPlayerLabel.Text = text
			SelectedPlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			SelectedPlayerLabel.TextSize = 18
			
			local DropdownIcon = Instance.new("ImageLabel", DropdownFrame)
			DropdownIcon.Size = UDim2.new(0, 25, 0, 25)
			DropdownIcon.Position = UDim2.new(1, -20, 0.5, 0)
			DropdownIcon.AnchorPoint = Vector2.new(1, 0.5)
			DropdownIcon.BackgroundTransparency = 1
			DropdownIcon.Image = "rbxassetid://3926305904"
			
			local PlayerListFrame = Instance.new("ScrollingFrame", DropdownWrapper)
			PlayerListFrame.Size = UDim2.new(1, 0, 0, 200)
			PlayerListFrame.Position = UDim2.new(0, 0, 1, 5)
			PlayerListFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			PlayerListFrame.BorderSizePixel = 0
			PlayerListFrame.Visible = false
			PlayerListFrame.ZIndex = DropdownFrame.ZIndex + 10
			PlayerListFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
			local plfCorner = Instance.new("UICorner", PlayerListFrame)
			plfCorner.CornerRadius = UDim.new(0, 8)
			local plfLayout = Instance.new("UIListLayout", PlayerListFrame)
			plfLayout.Padding = UDim.new(0, 5)
			plfLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
			
			local SpectateFrame = Instance.new("Frame", MainContainer)
			SpectateFrame.Size = UDim2.new(1, 0, 0, 50)
			SpectateFrame.Position = UDim2.new(0, 0, 0, 50)
			SpectateFrame.BackgroundTransparency = 1
			
			-- Lógica interna del componente
			local selectedPlayer = nil
			local isSpectating = false
			local spectateConn = nil
			local playerButtonMap = {}
			
			local function stopSpectating()
				if spectateConn then spectateConn:Disconnect(); spectateConn = nil end
				local lPlr = Players.LocalPlayer
				if lPlr and lPlr.Character then
					local hum = lPlr.Character:FindFirstChildOfClass("Humanoid")
					if hum and workspace.CurrentCamera.CameraSubject ~= hum then
						workspace.CurrentCamera.CameraSubject = hum
					end
				end
			end
			
			local function startSpectating()
				stopSpectating()
				if not (isSpectating and selectedPlayer and selectedPlayer.Character) then return end
				spectateConn = RunService.RenderStepped:Connect(function()
					if not (isSpectating and selectedPlayer and selectedPlayer.Character) then stopSpectating(); return end
					local targetHum = selectedPlayer.Character:FindFirstChildOfClass("Humanoid")
					if targetHum and workspace.CurrentCamera.CameraSubject ~= targetHum then
						workspace.CurrentCamera.CameraSubject = targetHum
					end
				end)
			end
			
			local function onSpectateToggled(enabled)
				isSpectating = enabled
				if isSpectating then startSpectating() else stopSpectating() end
			end

			-- Toggle de "Mirar"
			local SpectateToggleLabel = Instance.new("TextLabel", SpectateFrame)
			SpectateToggleLabel.Size = UDim2.new(0, 50, 1, 0)
			SpectateToggleLabel.Position = UDim2.new(0, 15, 0, 0)
			SpectateToggleLabel.BackgroundTransparency = 1
			SpectateToggleLabel.Font = Enum.Font.GothamBold
			SpectateToggleLabel.Text = "Mirar:"
			SpectateToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			SpectateToggleLabel.TextSize = 18
			SpectateToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

			local Switch = Instance.new("Frame", SpectateFrame)
			Switch.Size = UDim2.new(0, 60, 0, 30)
			Switch.Position = UDim2.new(0, 80, 0.5, 0)
			Switch.AnchorPoint = Vector2.new(0, 0.5)
			Switch.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			local sCorner = Instance.new("UICorner", Switch)
			sCorner.CornerRadius = UDim.new(1, 0)
			
			local Circle = Instance.new("Frame", Switch)
			Circle.Size = UDim2.new(0, 24, 0, 24)
			Circle.Position = UDim2.new(0, 3, 0.5, 0)
			Circle.AnchorPoint = Vector2.new(0, 0.5)
			Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			local cCorner = Instance.new("UICorner", Circle)
			cCorner.CornerRadius = UDim.new(1, 0)

			local ToggleButton = Instance.new("TextButton", Switch)
			ToggleButton.Size = UDim2.new(1,0,1,0)
			ToggleButton.BackgroundTransparency = 1
			ToggleButton.Text = ""
			ToggleButton.MouseButton1Click:Connect(function()
				isSpectating = not isSpectating
				local theme = Library.Themes[Library.Config.Theme]
				TweenService:Create(Switch, TweenInfo.new(0.2), {BackgroundColor3 = isSpectating and theme.Primary or theme.ComponentBackground:Lerp(Color3.new(0,0,0), 0.3)}):Play()
				TweenService:Create(Circle, TweenInfo.new(0.2), {
					Position = isSpectating and UDim2.new(1, -3, 0.5, 0) or UDim2.new(0, 3, 0.5, 0),
					AnchorPoint = isSpectating and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
				}):Play()
				onSpectateToggled(isSpectating)
			end)
			
			-- Flechas
			local RightArrow = Instance.new("ImageButton", SpectateFrame)
			RightArrow.Size = UDim2.new(0, 25, 0, 25)
			RightArrow.Position = UDim2.new(1, -15, 0.5, 0)
			RightArrow.AnchorPoint = Vector2.new(1, 0.5)
			RightArrow.BackgroundTransparency = 1
			RightArrow.Image = "rbxassetid://3926307976" -- Chevron Right
			
			local LeftArrow = Instance.new("ImageButton", SpectateFrame)
			LeftArrow.Size = UDim2.new(0, 25, 0, 25)
			LeftArrow.Position = UDim2.new(1, -45, 0.5, 0)
			LeftArrow.AnchorPoint = Vector2.new(1, 0.5)
			LeftArrow.BackgroundTransparency = 1
			LeftArrow.Image = "rbxassetid://3926307971" -- Chevron Left
			
			local function showPlayerInfoDialog(player)
				-- (Función de diálogo adaptada de tu código de ejemplo)
			end

			local isOpen = false
			local function toggleDropdown()
				isOpen = not isOpen
				PlayerListFrame.Visible = isOpen
				local height = isOpen and 50 + math.min(200, #Players:GetPlayers() * 55 + 5) or 50
				TweenService:Create(DropdownWrapper, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, height)}):Play()
				TweenService:Create(DropdownIcon, TweenInfo.new(0.2), {Rotation = isOpen and 180 or 0}):Play()
			end

			local function updateSelection(player)
				selectedPlayer = player
				SelectedPlayerLabel.Text = player and player.DisplayName or text
				if isSpectating then startSpectating() end
				pcall(callback, player)
			end
			
			local function addPlayerToList(player)
				if playerButtonMap[player] then return end
				
				local PlayerButton = Instance.new("TextButton", PlayerListFrame)
				PlayerButton.Name = player.Name
				PlayerButton.Size = UDim2.new(0.95, 0, 0, 50)
				PlayerButton.BackgroundTransparency = 1
				PlayerButton.Text = ""
				playerButtonMap[player] = PlayerButton
				
				local PFP = Instance.new("ImageLabel", PlayerButton)
				PFP.Size = UDim2.new(0, 40, 0, 40)
				PFP.Position = UDim2.new(0, 5, 0.5, 0)
				PFP.AnchorPoint = Vector2.new(0, 0.5)
				PFP.BackgroundTransparency = 1
				local pfpCorner = Instance.new("UICorner", PFP)
				pfpCorner.CornerRadius = UDim.new(1, 0)
				
				local _, thumb = pcall(Players.GetUserThumbnailAsync, Players, player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48)
				if thumb then PFP.Image = thumb end
				
				local PlayerName = Instance.new("TextLabel", PlayerButton)
				PlayerName.Size = UDim2.new(1, -100, 1, 0)
				PlayerName.Position = UDim2.new(0, 50, 0, 0)
				PlayerName.BackgroundTransparency = 1
				PlayerName.Font = Enum.Font.Gotham
				PlayerName.TextColor3 = Color3.fromRGB(255, 255, 255)
				PlayerName.TextSize = 16
				PlayerName.Text = player.DisplayName .. " (@" .. player.Name .. ")"
				PlayerName.TextXAlignment = Enum.TextXAlignment.Left

				local InfoButton = Instance.new("ImageButton", PlayerButton)
				InfoButton.Size = UDim2.new(0,30,0,30)
				InfoButton.Position = UDim2.new(1,-15,0.5,0)
				InfoButton.AnchorPoint = Vector2.new(1,0.5)
				InfoButton.BackgroundTransparency = 1
				InfoButton.Image = "rbxassetid://6034849721" -- Icono de info
				InfoButton.MouseButton1Click:Connect(function()
					-- Aquí iría la lógica de la ventana de info.
					print("Info para: " .. player.Name)
				end)

				PlayerButton.MouseButton1Click:Connect(function()
					updateSelection(player)
					toggleDropdown()
				end)
			end

			local function removePlayerFromList(player)
				if playerButtonMap[player] then
					playerButtonMap[player]:Destroy()
					playerButtonMap[player] = nil
				end
				if selectedPlayer == player then
					updateSelection(nil)
				end
			end
			
			local function cyclePlayer(direction)
				local playerList = Players:GetPlayers()
				if #playerList == 0 then return end
				
				local currentIndex = table.find(playerList, selectedPlayer) or 0
				local nextIndex = currentIndex + direction
				if nextIndex > #playerList then nextIndex = 1 end
				if nextIndex < 1 then nextIndex = #playerList end
				
				updateSelection(playerList[nextIndex])
			end

			RightArrow.MouseButton1Click:Connect(function() cyclePlayer(1) end)
			LeftArrow.MouseButton1Click:Connect(function() cyclePlayer(-1) end)
			
			for _, player in ipairs(Players:GetPlayers()) do addPlayerToList(player) end
			Players.PlayerAdded:Connect(addPlayerToList)
			Players.PlayerRemoving:Connect(removePlayerFromList)
			
			local MainButton = Instance.new("TextButton", DropdownFrame)
			MainButton.Size = UDim2.new(1, 0, 1, 0)
			MainButton.BackgroundTransparency = 1
			MainButton.Text = ""
			MainButton.MouseButton1Click:Connect(toggleDropdown)
			
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DropdownFrame, Type = "DropdownFrame" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = SelectedPlayerLabel, Type = "DropdownLabel" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = PlayerListFrame, Type = "DropdownList" }
		end

		-- Esto crea: Un slider para ajustar valores numéricos.
		function TabObject:CreateSlider(text, min, max, default, callback)
			local SliderFrame = Instance.new("Frame")
			SliderFrame.Name = "SliderFrame"
			SliderFrame.Parent = Tab.Content
			SliderFrame.Size = UDim2.new(0.95, 0, 0, 60)
			SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			local sfCorner = Instance.new("UICorner", SliderFrame)
			sfCorner.CornerRadius = UDim.new(0, 8)
			
			local SliderLabel = Instance.new("TextLabel", SliderFrame)
			SliderLabel.Size = UDim2.new(1, -15, 0, 30)
			SliderLabel.Position = UDim2.new(0, 15, 0, 0)
			SliderLabel.BackgroundTransparency = 1
			SliderLabel.Font = Enum.Font.GothamBold
			SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			SliderLabel.TextSize = 18
			SliderLabel.TextXAlignment = Enum.TextXAlignment.Left

			local Track = Instance.new("Frame", SliderFrame)
			Track.Size = UDim2.new(1, -30, 0, 8)
			Track.Position = UDim2.new(0.5, 0, 0, 40)
			Track.AnchorPoint = Vector2.new(0.5, 0)
			Track.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			local tCorner = Instance.new("UICorner", Track)
			tCorner.CornerRadius = UDim.new(1, 0)

			local Fill = Instance.new("Frame", Track)
			Fill.BackgroundColor3 = Color3.fromRGB(0, 110, 255)
			ApplyPrimaryGradient(Fill)
			local fCorner = Instance.new("UICorner", Fill)
			fCorner.CornerRadius = UDim.new(1, 0)
			
			local ValueLabel = Instance.new("TextLabel", Fill)
			ValueLabel.Size = UDim2.new(0, 50, 0, 20)
			ValueLabel.Position = UDim2.new(1, 0, 0.5, 0)
			ValueLabel.AnchorPoint = Vector2.new(1, 0.5)
			ValueLabel.BackgroundTransparency = 1
			ValueLabel.Font = Enum.Font.GothamBold
			ValueLabel.TextSize = 14
			ValueLabel.ZIndex = Fill.ZIndex + 1

			local currentValue = default
			local function updateSlider(value)
				currentValue = math.clamp(value, min, max)
				local percent = (currentValue - min) / (max - min)
				Fill.Size = UDim2.new(percent, 0, 1, 0)
				SliderLabel.Text = text .. ": " .. string.format("%.2f", currentValue)
				ValueLabel.Text = string.format("%.0f", currentValue)
				pcall(callback, currentValue)
			end
			updateSlider(default)
			ValueLabel.TextColor3 = Library.Themes[Library.Config.Theme].MainFrame:ContrastingColor()
			
			local SliderButton = Instance.new("TextButton", Track)
			SliderButton.Size = UDim2.new(1, 0, 3, 0)
			SliderButton.Position = UDim2.new(0.5, 0, 0.5, 0)
			SliderButton.AnchorPoint = Vector2.new(0.5, 0.5)
			SliderButton.BackgroundTransparency = 1
			SliderButton.Text = ""
			SliderButton.ZIndex = Track.ZIndex + 5

			local isDragging = false
			SliderButton.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDragging = true
					Tab.Content.ScrollingEnabled = false
				end
			end)
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 and isDragging then
					isDragging = false
					Tab.Content.ScrollingEnabled = true
				end
			end)
			UserInputService.InputChanged:Connect(function(input)
				if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					local percent = (input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X
					percent = math.clamp(percent, 0, 1)
					local newValue = min + (max - min) * percent
					updateSlider(newValue)
				end
			end)
			
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = SliderFrame, Type = "SliderFrame" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = SliderLabel, Type = "SliderLabel" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Track, Type = "SliderTrack" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Fill, Type = "SliderFill" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = ValueLabel, Type = "SliderValue" }
		end

		-- Esto crea: Una caja de texto para que el usuario escriba.
		function TabObject:CreateTextbox(text, placeholder, callback)
			local TextboxFrame = Instance.new("Frame")
			TextboxFrame.Name = "TextboxFrame"
			TextboxFrame.Parent = Tab.Content
			TextboxFrame.Size = UDim2.new(0.95, 0, 0, 50)
			TextboxFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			local tbCorner = Instance.new("UICorner", TextboxFrame)
			tbCorner.CornerRadius = UDim.new(0, 8)
			
			local Box = Instance.new("TextBox", TextboxFrame)
			Box.Size = UDim2.new(1, -30, 1, -10)
			Box.Position = UDim2.new(0.5, 0, 0.5, 0)
			Box.AnchorPoint = Vector2.new(0.5, 0.5)
			Box.BackgroundTransparency = 1
			Box.Font = Enum.Font.Gotham
			Box.PlaceholderText = placeholder
			Box.Text = text or ""
			Box.TextColor3 = Color3.fromRGB(255, 255, 255)
			Box.PlaceholderColor3 = Color3.fromHex("A0A0A0")
			Box.TextSize = 18
			Box.ClearTextOnFocus = false

			local conn = Box.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					pcall(callback, Box.Text)
				end
			end)
			table.insert(Library.Connections, conn)

			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = TextboxFrame, Type = "TextboxFrame" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = Box, Type = "Textbox" }
		end
		
		return TabObject
	end
	
	-- Pestaña de Ajustes
	task.spawn(function()
		local SettingsTab = Window:CreateTab("Ajustes")
		
		SettingsTab:CreateCategory("Personalización")
		
		-- Selector de temas
		local themeNames = {}
		for name, _ in pairs(Library.Themes) do table.insert(themeNames, name) end
		SettingsTab:CreateDropdown("Tema de la Interfaz", themeNames, function(selectedTheme)
			Library:ApplyTheme(selectedTheme)
			-- Aquí deberías llamar a tu función de guardado
		end)
		
		SettingsTab:CreateCategory("Configuración")
		
		-- Botón de Reset
		local ResetButton = Instance.new("TextButton", SettingsTab.Content)
		ResetButton.Size = UDim2.new(0.95, 0, 0, 45)
		ResetButton.Text = ""
		ResetButton.BackgroundColor3 = Color3.fromRGB(150,20,20)
		ResetButton.AutoButtonColor = false
		local rbCorner = Instance.new("UICorner", ResetButton)
		rbCorner.CornerRadius = UDim.new(0, 8)
		ApplyRedGradient(ResetButton)
		
		local ResetIcon = Instance.new("ImageLabel", ResetButton)
		ResetIcon.Size = UDim2.new(0,26,0,26)
		ResetIcon.Position = UDim2.new(0,15,0.5,0)
		ResetIcon.AnchorPoint = Vector2.new(0,0.5)
		ResetIcon.BackgroundTransparency = 1
		ResetIcon.Image = "rbxassetid://6185343254" -- Icono de resetear
		
		local ResetText = Instance.new("TextLabel", ResetButton)
		ResetText.Size = UDim2.new(1,-50,1,0)
		ResetText.Position = UDim2.new(0,50,0,0)
		ResetText.BackgroundTransparency = 1
		ResetText.Font = Enum.Font.GothamBold
		ResetText.Text = "Resetear Configuración"
		ResetText.TextColor3 = Color3.fromRGB(255, 255, 255)
		ResetText.TextSize = 18
		
		ResetButton.MouseButton1Click:Connect(function()
			local DialogBG = Instance.new("Frame", ScreenGui)
			DialogBG.Size = UDim2.new(1,0,1,0)
			DialogBG.BackgroundColor3 = Color3.new(0,0,0)
			DialogBG.BackgroundTransparency = 0.5
			DialogBG.ZIndex = 9998
			
			local DialogFrame = Instance.new("Frame", DialogBG)
			DialogFrame.Size = UDim2.new(0,350,0,150)
			DialogFrame.Position = UDim2.new(0.5,0,0.5,0)
			DialogFrame.AnchorPoint = Vector2.new(0.5,0.5)
			DialogFrame.ZIndex = 9999
			local dfCorner = Instance.new("UICorner", DialogFrame)
			dfCorner.CornerRadius = UDim.new(0, 8)
			CreateBorder(DialogFrame)
			
			local DialogText = Instance.new("TextLabel", DialogFrame)
			DialogText.Size = UDim2.new(0.9,0,0,50)
			DialogText.Position = UDim2.new(0.5,0,0,20)
			DialogText.AnchorPoint = Vector2.new(0.5,0)
			DialogText.BackgroundTransparency = 1
			DialogText.Font = Enum.Font.Gotham
			DialogText.Text = "¿Estás seguro de que quieres resetear toda tu configuración? Esta acción no se puede deshacer."
			DialogText.TextSize = 16
			DialogText.TextWrapped = true
			
			local function createDialogButton(text, isConfirm)
				local btn = Instance.new("TextButton", DialogFrame)
				btn.Size = UDim2.new(0, 150, 0, 40)
				btn.Text = ""
				local bCorner = Instance.new("UICorner", btn)
				bCorner.CornerRadius = UDim.new(0, 6)
				
				local btnText = Instance.new("TextLabel", btn)
				btnText.Size = UDim2.new(1,0,1,0)
				btnText.BackgroundTransparency = 1
				btnText.Text = text
				btnText.Font = Enum.Font.GothamBold
				btnText.TextSize = 16
				
				Library.CreatedElements[#Library.CreatedElements + 1] = { Object = btn, Type = "ResetDialogButton", IsConfirm = isConfirm }
				return btn
			end
			
			local ConfirmButton = createDialogButton("Sí, resetear", true)
			ConfirmButton.Position = UDim2.new(0.25,0,1,-25)
			ConfirmButton.AnchorPoint = Vector2.new(0.5,1)
			
			local CancelButton = createDialogButton("Cancelar", false)
			CancelButton.Position = UDim2.new(0.75,0,1,-25)
			CancelButton.AnchorPoint = Vector2.new(0.5,1)
			
			ApplyRedGradient(ConfirmButton)
			ApplyPrimaryGradient(CancelButton)

			ConfirmButton.MouseButton1Click:Connect(function()
				-- Aquí iría tu lógica para borrar el archivo de configuración
				-- pcall(delfile, "TuArchivoDeConfig.json")
				DialogBG:Destroy()
				-- Luego podrías notificar al usuario que reinicie el script
			end)
			CancelButton.MouseButton1Click:Connect(function() DialogBG:Destroy() end)
			
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DialogFrame, Type = "ResetDialog" }
			Library.CreatedElements[#Library.CreatedElements + 1] = { Object = DialogText, Type = "ResetDialogText" }
		end)
		
		Library.CreatedElements[#Library.CreatedElements + 1] = { Object = ResetButton, Type = "ResetButton" }
	end)

	-- Aplicar el tema guardado o por defecto
	Library:ApplyTheme(Library.Config.Theme)

	return Window
end

return Library
