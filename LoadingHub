-- =========================================================
-- LIBRERÍA xSOLITOx HUB - VERSIÓN MEJORADA Y REESTRUCTURADA
-- Por xSOLITOx, con mejoras de IA
-- =========================================================

-- =========================================================
-- >> INICIO: SISTEMA ANTI-DUPLICACIÓN Y LIMPIEZA
-- Esto crea: un mecanismo para evitar que la UI se duplique al re-ejecutar.
-- =========================================================
if getgenv().xSOLITOxHUB_Running then return end
getgenv().xSOLITOxHUB_Running = true

pcall(function()
    local CoreGui = game:GetService("CoreGui")
    for _, v in ipairs(CoreGui:GetChildren()) do
        if v.Name == "xSOLITOx HUB" or v.Name == "ScreenGui" or v.Name == "NotificationFrame" or v.Name == "LoaderGUI" then
            v:Destroy()
        end
    end
end)
-- =========================================================
-- << FIN: SISTEMA ANTI-DUPLICACIÓN Y LIMPIEZA
-- =========================================================

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")

local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

--[[
    Esto crea: la función de estilo principal para degradados.
    Aplica el degradado saturado de azul a rojo/rosa extraído del SCRIPT V30.
    Este será el estándar para elementos activos como botones, toggles y sliders.
]]
local function ApplyMasterGradient(frame)
	for _, child in ipairs(frame:GetChildren()) do
		if child:IsA("UIGradient") then child:Destroy() end
	end
	
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")),
		ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))
	})
	gradient.Rotation = 0 -- Horizontal para el efecto morado sutil en el medio
	gradient.Parent = frame
	return gradient
end

--[[
    Esto crea: la función de estilo para bordes con resplandor.
    Aplica un borde con un efecto de 'glow' y transparencia degradada.
	Se usará en ventanas emergentes y otros contenedores especiales.
]]
local function CreateGlowStroke(Parent)
    for _, child in ipairs(Parent:GetChildren()) do
        if child:IsA("UIStroke") and child.Name == "GlowStroke" then child:Destroy() end
    end

    local Stroke = Instance.new("UIStroke")
    Stroke.Name = "GlowStroke"
    Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Stroke.Thickness = 2
    Stroke.LineJoinMode = Enum.LineJoinMode.Round
    Stroke.Color = Color3.fromRGB(1, 94, 255) 
	Stroke.Transparency = 0

    local TransparencyGradient = Instance.new("UIGradient")
    TransparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2), 
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    TransparencyGradient.Rotation = 120
    TransparencyGradient.Parent = Stroke
    Stroke.Parent = Parent
	return Stroke
end

--[[
    Esto crea: los temas de la Interfaz.
    Define las paletas de colores para los diferentes temas de la UI.
]]
_G.Themes = {
    Dark = {
        Main = Color3.fromRGB(24, 24, 26), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(200, 200, 200), Icon = Color3.fromRGB(22, 22, 26),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Light = {
        Main = Color3.fromRGB(245, 245, 245), Lighter = Color3.fromRGB(255, 255, 255), Outline = Color3.fromRGB(220, 220, 220),
        Text = Color3.fromRGB(10, 10, 10), SubText = Color3.fromRGB(80, 80, 80), Icon = Color3.fromRGB(245, 245, 245),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Red = {
        Main = Color3.fromRGB(28, 0, 0), Lighter = Color3.fromRGB(40, 0, 0), Outline = Color3.fromRGB(50, 0, 0),
        Text = Color3.fromRGB(255, 200, 200), SubText = Color3.fromRGB(255, 150, 150), Icon = Color3.fromRGB(28, 0, 0),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Transparent = {
        Main = Color3.fromRGB(15, 15, 15), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(220, 220, 220), Icon = Color3.fromRGB(15, 15, 15),
        MainTransparency = 0.3, OutlineTransparency = 1 -- El Outline es invisible, solo se ve el borde del Main.
    }
}
_G.CurrentThemeName = "Dark"

-- Colores base para compatibilidad inicial
_G.Primary = Color3.fromRGB(100, 100, 100);
_G.Dark = _G.Themes.Dark.Main
_G.Third = Color3.fromRGB(255, 0, 0);
_G.ActiveSlider = nil 

function CreateRounded(Parent, Size)
	local Rounded = Parent:FindFirstChild("Rounded") or Instance.new("UICorner")
	Rounded.Name = "Rounded";
	Rounded.Parent = Parent;
	Rounded.CornerRadius = UDim.new(0, Size);
end;

function MakeDraggable(topbarobject, object)
	local Dragging, DragInput, DragStart, StartPosition
	local function Update(input)
		local Delta = input.Position - DragStart;
		local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y);
		TweenService:Create(object, TweenInfo.new(0.15), { Position = pos }):Play();
	end;
	topbarobject.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true; DragStart = input.Position; StartPosition = object.Position;
			input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then Dragging = false end end);
		end;
	end);
	topbarobject.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then DragInput = input end;
	end);
	UserInputService.InputChanged:Connect(function(input) if input == DragInput and Dragging then Update(input) end end);
end;

local ScreenGui = Instance.new("ScreenGui");
ScreenGui.Name = "ScreenGui"
ScreenGui.Parent = game.CoreGui;
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.DisplayOrder = 2147483647;

local OutlineButton = Instance.new("Frame");
OutlineButton.Name = "OutlineButton";
OutlineButton.Parent = ScreenGui;
OutlineButton.ClipsDescendants = true;
OutlineButton.Position = UDim2.new(0, 10, 0, 10);
OutlineButton.Size = UDim2.new(0, 50, 0, 50);
CreateRounded(OutlineButton, 12);

local ImageButton = Instance.new("ImageButton");
ImageButton.Parent = OutlineButton;
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0);
ImageButton.Size = UDim2.new(0, 40, 0, 40);
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5);
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
ImageButton.AutoButtonColor = false;
MakeDraggable(ImageButton, OutlineButton);
CreateRounded(ImageButton, 10);

ImageButton.MouseButton1Click:connect(function()
	local hub = game.CoreGui:FindFirstChild("xSOLITOx HUB") or get_top_gui():FindFirstChild("xSOLITOx HUB")
	if hub then hub.Enabled = not hub.Enabled end
end);

local NotificationFrame = Instance.new("ScreenGui");
NotificationFrame.Name = "NotificationFrame";
NotificationFrame.Parent = game.CoreGui;
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global;
NotificationFrame.DisplayOrder = 2147483647;

local NotificationList = {};
local function RemoveOldestNotification()
	if #NotificationList > 0 then
		local removed = table.remove(NotificationList, 1);
		removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function() removed[1]:Destroy() end);
	end;
end;
spawn(function()
	while wait() do
		if #NotificationList > 0 then wait(2); RemoveOldestNotification() end;
	end;
end);
local Update = {};
function Update:Notify(desc)
	local Frame = Instance.new("Frame"); local Image = Instance.new("ImageLabel");
	local Title = Instance.new("TextLabel"); local Desc = Instance.new("TextLabel");
	local OutlineFrame = Instance.new("Frame");
	OutlineFrame.Name = "OutlineFrame"; OutlineFrame.Parent = NotificationFrame;
	OutlineFrame.ClipsDescendants = true; OutlineFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30);
	OutlineFrame.AnchorPoint = Vector2.new(0.5, 1); OutlineFrame.BackgroundTransparency = 0.4;
	OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0); OutlineFrame.Size = UDim2.new(0, 412, 0, 72);
	Frame.Name = "Frame"; Frame.Parent = OutlineFrame; Frame.ClipsDescendants = true;
	Frame.AnchorPoint = Vector2.new(0.5, 0.5); Frame.BackgroundColor3 = _G.Dark; Frame.BackgroundTransparency = 0.1;
	Frame.Position = UDim2.new(0.5, 0, 0.5, 0); Frame.Size = UDim2.new(0, 400, 0, 60);
	Image.Name = "Icon"; Image.Parent = Frame; Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	Image.BackgroundTransparency = 1; Image.Position = UDim2.new(0, 8, 0, 8); Image.Size = UDim2.new(0, 45, 0, 45);
	Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
	Title.Parent = Frame; Title.BackgroundColor3 = _G.Primary; Title.BackgroundTransparency = 1;
	Title.Position = UDim2.new(0, 55, 0, 14); Title.Size = UDim2.new(0, 10, 0, 20); Title.Font = Enum.Font.GothamBold;
	Title.Text = "xSOLITOx HUB"; Title.TextColor3 = Color3.fromRGB(255, 255, 255); Title.TextSize = 16;
	Title.TextXAlignment = Enum.TextXAlignment.Left; Desc.Parent = Frame; Desc.BackgroundColor3 = _G.Primary;
	Desc.BackgroundTransparency = 1; Desc.Position = UDim2.new(0, 55, 0, 33); Desc.Size = UDim2.new(0, 10, 0, 10);
	Desc.Font = Enum.Font.GothamSemibold; Desc.TextTransparency = 0.3; Desc.Text = desc;
	Desc.TextColor3 = Color3.fromRGB(200, 200, 200); Desc.TextSize = 12; Desc.TextXAlignment = Enum.TextXAlignment.Left;
	CreateRounded(Frame, 10); CreateRounded(OutlineFrame, 12);
	OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true);
	table.insert(NotificationList, {OutlineFrame, title});
end;

-- Esto crea: la pantalla de carga inicial con una barra de progreso animada.
function Update:StartLoad()
    local Loader = Instance.new("ScreenGui"); Loader.Name = "LoaderGUI"; Loader.Parent = game.CoreGui;
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global; Loader.DisplayOrder = 2147483647;
    local LoaderFrame = Instance.new("Frame"); LoaderFrame.Name = "LoaderFrame"; LoaderFrame.Parent = Loader;
    LoaderFrame.ClipsDescendants = true; LoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
    LoaderFrame.BackgroundTransparency = 0; LoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
    LoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0); LoaderFrame.Size = UDim2.new(1.5, 0, 1.5, 0);
    local MainLoaderFrame = Instance.new("Frame"); MainLoaderFrame.Name = "MainLoaderFrame"; MainLoaderFrame.Parent = LoaderFrame;
    MainLoaderFrame.ClipsDescendants = true; MainLoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
    MainLoaderFrame.BackgroundTransparency = 0; MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
    MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0); MainLoaderFrame.Size = UDim2.new(0.5, 0, 0.5, 0);
    local TitleLoader = Instance.new("TextLabel"); TitleLoader.Parent = MainLoaderFrame; TitleLoader.Text = "xSOLITOx HUB";
    TitleLoader.Font = Enum.Font.FredokaOne; TitleLoader.TextSize = 50; TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255);
    TitleLoader.BackgroundTransparency = 1; TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5);
    TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0); TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
    local DescriptionLoader = Instance.new("TextLabel"); DescriptionLoader.Parent = MainLoaderFrame;
    DescriptionLoader.Text = "Loading.."; DescriptionLoader.Font = Enum.Font.Gotham; DescriptionLoader.TextSize = 15;
    DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255); DescriptionLoader.BackgroundTransparency = 1;
    DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5); DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0);
    DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
    local LoadingBarBackground = Instance.new("Frame"); LoadingBarBackground.Parent = MainLoaderFrame;
    LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50); LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5);
    LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0); LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0);
    LoadingBarBackground.ClipsDescendants = true; LoadingBarBackground.ZIndex = 2;
    local LoadingBar = Instance.new("Frame"); LoadingBar.Parent = LoadingBarBackground;
    ApplyMasterGradient(LoadingBar);
    LoadingBar.Size = UDim2.new(0, 0, 1, 0); LoadingBar.ZIndex = 3;
    CreateRounded(LoadingBarBackground, 20); CreateRounded(LoadingBar, 20);
    local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
    local barTweenPart1 = TweenService:Create(LoadingBar, barTweenInfoPart1, {Size = UDim2.new(0.25, 0, 1, 0)});
    local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
    local barTweenPart2 = TweenService:Create(LoadingBar, barTweenInfoPart2, {Size = UDim2.new(1, 0, 1, 0)});
    barTweenPart1:Play();
    function Update:Loaded() barTweenPart2:Play() end;
    barTweenPart1.Completed:Connect(function()
        local running = true;
        barTweenPart2.Completed:Connect(function() wait(1); running = false; DescriptionLoader.Text = "¡Cargado!"; wait(0.5); Loader:Destroy() end);
        spawn(function()
            while running do local dotCount = (dotCount or 0 + 1) % 4; DescriptionLoader.Text = "Por favor espera" .. string.rep(".", dotCount); wait(0.5) end
        end);
    end);
end;

local SettingsLib = { SaveSettings = true, LoadAnimation = true, Theme = "Dark" };
(getgenv()).LoadConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfolder("xSOLITOx HUB") then makefolder("xSOLITOx HUB") end;
		if not isfolder("xSOLITOx HUB/Library/") then makefolder("xSOLITOx HUB/Library/") end;
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then
			writefile(filePath, (game:GetService("HttpService")):JSONEncode(SettingsLib));
		else
			local success, data = pcall(game:GetService("HttpService").JSONDecode, game:GetService("HttpService"), readfile(filePath))
            if success and type(data) == "table" then
                for i, v in pairs(data) do SettingsLib[i] = v end
            end
		end;
	else
		return warn("Status : Executor no detectado");
	end;
end;
(getgenv()).SaveConfig = function()
	if readfile and writefile and isfile and isfolder then
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then (getgenv()).Load() else
			writefile(filePath, (game:GetService("HttpService")):JSONEncode(SettingsLib));
		end;
	else
		return warn("Status : Executor no detectado");
	end;
end;
(getgenv()).LoadConfig();

function Update:SaveSettings() return SettingsLib.SaveSettings end
function Update:LoadAnimation() return SettingsLib.LoadAnimation end

-- Esto crea: la ventana principal de la interfaz y todos sus componentes.
function Update:Window(Config)
	assert(Config.SubTitle, "v4");
	local WindowConfig = { Size = Config.Size, TabWidth = Config.TabWidth };
	local abc = false; local currentpage = "";
	local NoxHub = Instance.new("ScreenGui"); NoxHub.Name = "xSOLITOx HUB"; NoxHub.Parent = get_top_gui();
	NoxHub.DisplayOrder = 2147483646; NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global; NoxHub.Enabled = false 
	
	local allTextElements = {}
    local allImageElements = {}

	local OutlineMain = Instance.new("Frame"); OutlineMain.Name = "OutlineMain"; OutlineMain.Parent = NoxHub;
	OutlineMain.ClipsDescendants = true; OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5);
	OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0); OutlineMain.Size = UDim2.new(0, 0, 0, 0);
	CreateRounded(OutlineMain, 15);
	
	local Main = Instance.new("Frame"); Main.Name = "Main"; Main.Parent = OutlineMain;
	Main.ClipsDescendants = true; Main.AnchorPoint = Vector2.new(0.5, 0.5);
	Main.Position = UDim2.new(0.5, 0, 0.5, 0); Main.Size = WindowConfig.Size;
	OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true);
	CreateRounded(Main, 12);
	
	local DragButton = Instance.new("Frame"); DragButton.Name = "DragButton"; DragButton.Parent = Main;
	DragButton.Position = UDim2.new(1, 5, 1, 5); DragButton.AnchorPoint = Vector2.new(1, 1);
	DragButton.Size = UDim2.new(0, 30, 0, 30); DragButton.BackgroundTransparency = 1; DragButton.ZIndex = 10;
	local CircleDragButton = Instance.new("UICorner"); CircleDragButton.Name = "CircleDragButton"; CircleDragButton.Parent = DragButton;
	CircleDragButton.CornerRadius = UDim.new(0, 99);
	
	local Top = Instance.new("Frame"); Top.Name = "Top"; Top.Parent = Main;
	Top.Size = UDim2.new(1, 0, 0, 40); Top.BackgroundTransparency = 1; CreateRounded(Top, 5);
	
	local NameHub = Instance.new("TextLabel"); NameHub.Name = "NameHub"; NameHub.Parent = Top;
	NameHub.BackgroundTransparency = 1; NameHub.RichText = true; NameHub.Position = UDim2.new(0, 15, 0.5, 0);
	NameHub.AnchorPoint = Vector2.new(0, 0.5); NameHub.Size = UDim2.new(0, 1, 0, 25); NameHub.Font = Enum.Font.GothamBold;
	NameHub.Text = "xSOLITOx HUB"; NameHub.TextSize = 20; NameHub.TextXAlignment = Enum.TextXAlignment.Left;
	local nameHubSize = TextService:GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge));
	NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25);
	
	local SubTitle = Instance.new("TextLabel"); SubTitle.Name = "SubTitle"; SubTitle.Parent = NameHub;
	SubTitle.BackgroundTransparency = 1; SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0);
	SubTitle.Size = UDim2.new(0, 1, 0, 20); SubTitle.Font = Enum.Font.Cartoon; SubTitle.AnchorPoint = Vector2.new(0, 0.5);
	SubTitle.Text = Config.SubTitle; SubTitle.TextSize = 15;
	local SubTitleSize = TextService:GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge));
	SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25);
	
	local CloseButton = Instance.new("ImageButton"); CloseButton.Name = "CloseButton"; CloseButton.Parent = Top;
	CloseButton.BackgroundTransparency = 1; CloseButton.AnchorPoint = Vector2.new(1, 0.5);
	CloseButton.Position = UDim2.new(1, -15, 0.5, 0); CloseButton.Size = UDim2.new(0, 20, 0, 20);
	CloseButton.Image = "rbxthumb://type=Asset&id=7743878857&w=150&h=150";
	CreateRounded(CloseButton, 3);
	CloseButton.MouseButton1Click:connect(function()
		local hub = get_top_gui():FindFirstChild("xSOLITOx HUB"); if hub then hub.Enabled = not hub.Enabled end
	end);
	
	local ResizeButton = Instance.new("ImageButton"); ResizeButton.Name = "ResizeButton"; ResizeButton.Parent = Top;
	ResizeButton.BackgroundTransparency = 1; ResizeButton.AnchorPoint = Vector2.new(1, 0.5);
	ResizeButton.Position = UDim2.new(1, -50, 0.5, 0); ResizeButton.Size = UDim2.new(0, 20, 0, 20);
	ResizeButton.Image = "rbxthumb://type=Asset&id=10734886735&w=150&h=150";
	CreateRounded(ResizeButton, 3);
	
	local BackgroundSettings = Instance.new("Frame"); BackgroundSettings.Name = "BackgroundSettings"; BackgroundSettings.Parent = OutlineMain;
	BackgroundSettings.ClipsDescendants = true; BackgroundSettings.Active = true; BackgroundSettings.AnchorPoint = Vector2.new(0, 0);
	BackgroundSettings.BackgroundTransparency = 1; BackgroundSettings.Position = UDim2.new(0, 0, 0, 0);
	BackgroundSettings.Size = UDim2.new(1, 0, 1, 0); BackgroundSettings.Visible = false; CreateRounded(BackgroundSettings, 15);
	
	local SettingsFrame = Instance.new("Frame"); SettingsFrame.Name = "SettingsFrame"; SettingsFrame.Parent = BackgroundSettings;
	SettingsFrame.ClipsDescendants = true; SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5); SettingsFrame.BackgroundTransparency = 0;
	SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0); SettingsFrame.Size = UDim2.new(0, 0, 0, 0);
	CreateRounded(SettingsFrame, 15); CreateGlowStroke(SettingsFrame);
	
	local CloseSettings = Instance.new("ImageButton"); CloseSettings.Name = "CloseSettings"; CloseSettings.Parent = SettingsFrame;
	CloseSettings.BackgroundTransparency = 1; CloseSettings.AnchorPoint = Vector2.new(1, 0);
	CloseSettings.Position = UDim2.new(1, -20, 0, 15); CloseSettings.Size = UDim2.new(0, 20, 0, 20);
	CloseSettings.Image = "rbxthumb://type=Asset&id=10747384394&w=150&h=150";
	CreateRounded(CloseSettings, 3);
	CloseSettings.MouseButton1Click:connect(function()
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0,0,0,0), Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
		task.wait(0.3); BackgroundSettings.Visible = false;
	end);
	
	local SettingsButton = Instance.new("ImageButton"); SettingsButton.Name = "SettingsButton"; SettingsButton.Parent = Top;
	SettingsButton.BackgroundTransparency = 1; SettingsButton.AnchorPoint = Vector2.new(1, 0.5);
	SettingsButton.Position = UDim2.new(1, -85, 0.5, 0); SettingsButton.Size = UDim2.new(0, 20, 0, 20);
	SettingsButton.Image = "rbxthumb://type=Asset&id=10734950020&w=150&h=150";
	CreateRounded(SettingsButton, 3);
	SettingsButton.MouseButton1Click:connect(function()
		BackgroundSettings.Visible = true; BackgroundSettings.BackgroundTransparency = 1;
		SettingsFrame.Size = UDim2.new(0,0,0,0); SettingsFrame.Position = UDim2.new(0.5,0,0.5,0)
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0.7, 0, 0.7, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 0.3}):Play()
	end);
	
	local TitleSettings = Instance.new("TextLabel"); TitleSettings.Name = "TitleSettings"; TitleSettings.Parent = SettingsFrame;
	TitleSettings.BackgroundTransparency = 1; TitleSettings.Position = UDim2.new(0, 20, 0, 15);
	TitleSettings.Size = UDim2.new(1, 0, 0, 20); TitleSettings.Font = Enum.Font.GothamBold;
	TitleSettings.AnchorPoint = Vector2.new(0, 0); TitleSettings.Text = "Preferencias del usuario";
	TitleSettings.TextSize = 20; TitleSettings.TextXAlignment = Enum.TextXAlignment.Left;
	
	local SettingsMenuList = Instance.new("Frame"); SettingsMenuList.Name = "SettingsMenuList"; SettingsMenuList.Parent = SettingsFrame;
	SettingsMenuList.ClipsDescendants = true; SettingsMenuList.AnchorPoint = Vector2.new(0, 0);
	SettingsMenuList.BackgroundTransparency = 1; SettingsMenuList.Position = UDim2.new(0, 0, 0, 50);
	SettingsMenuList.Size = UDim2.new(1, 0, 1, -70); CreateRounded(SettingsMenuList, 15);
	
	local ScrollSettings = Instance.new("ScrollingFrame"); ScrollSettings.Name = "ScrollSettings"; ScrollSettings.Parent = SettingsMenuList;
	ScrollSettings.Active = true; ScrollSettings.BackgroundTransparency = 1;
	ScrollSettings.Size = UDim2.new(1, 0, 1, 0); ScrollSettings.ScrollBarThickness = 3;
	ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y; CreateRounded(SettingsMenuList, 5);
	
	local SettingsListLayout = Instance.new("UIListLayout"); SettingsListLayout.Name = "SettingsListLayout"; SettingsListLayout.Parent = ScrollSettings;
	SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder; SettingsListLayout.Padding = UDim.new(0, 8);
	
	local uitab = {}; -- Mover uitab aquí para que esté en el scope de las funciones de abajo
	local main_instance -- Placeholder para la instancia 'main'
	
	local function CreateCheckbox(title, state, callback)
		local checked = state or false;
		local Background = Instance.new("Frame"); Background.Name = "Background"; Background.Parent = ScrollSettings;
		Background.ClipsDescendants = true; Background.BackgroundTransparency = 1; Background.Size = UDim2.new(1, 0, 0, 20);
		local Title = Instance.new("TextLabel"); Title.Name = "Title"; Title.Parent = Background;
		Title.BackgroundTransparency = 1; Title.Position = UDim2.new(0, 60, 0.5, 0);
		Title.Size = UDim2.new(1, -60, 0, 20); Title.Font = Enum.Font.Code; Title.AnchorPoint = Vector2.new(0, 0.5);
		Title.Text = title or ""; Title.TextSize = 15; Title.TextXAlignment = Enum.TextXAlignment.Left;
		
		local CheckboxContainer = Instance.new("Frame"); CheckboxContainer.Name = "CheckboxContainer"; CheckboxContainer.Parent = Background;
		CheckboxContainer.BackgroundTransparency = 0; CheckboxContainer.BackgroundColor3 = Color3.fromRGB(100,100,100);
		CheckboxContainer.AnchorPoint = Vector2.new(0, 0.5); CheckboxContainer.Position = UDim2.new(0, 30, 0.5, 0);
		CheckboxContainer.Size = UDim2.new(0, 20, 0, 20); CreateRounded(CheckboxContainer, 5);

		local Checkbox = Instance.new("ImageButton"); Checkbox.Name = "Checkbox"; Checkbox.Parent = CheckboxContainer;
		Checkbox.BackgroundTransparency = 1; Checkbox.Size = UDim2.new(1,0,1,0); Checkbox.Image = "rbxthumb://type=Asset&id=10709790644&w=150&h=150";
		Checkbox.ImageTransparency = 1; Checkbox.ImageColor3 = Color3.fromRGB(245, 245, 245);
		
		local function ToggleState()
			checked = not checked;
			if checked then
				Checkbox.ImageTransparency = 0;
				ApplyMasterGradient(CheckboxContainer)
			else
				Checkbox.ImageTransparency = 1;
				if CheckboxContainer:FindFirstChild("UIGradient") then CheckboxContainer.UIGradient:Destroy() end;
			end;
			pcall(callback, checked);
		end

		Checkbox.MouseButton1Click:Connect(ToggleState)

		if checked then Checkbox.ImageTransparency = 0; ApplyMasterGradient(CheckboxContainer)
		else Checkbox.ImageTransparency = 1 end
	end;
	
	local function CreateStyledButtonForSettings(title, callback)
		local Button = Instance.new("Frame"); Button.Name = "ButtonContainer"; Button.Parent = ScrollSettings;
		Button.BackgroundTransparency = 1; Button.Size = UDim2.new(1, 0, 0, 36); CreateRounded(Button, 5);

		local TextButton = Instance.new("TextButton"); TextButton.Name = "StyledButton"; TextButton.Parent = Button;
		TextButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200); TextButton.BackgroundTransparency = 0.8;
		TextButton.AnchorPoint = Vector2.new(1, 0.5); TextButton.Position = UDim2.new(1, -10, 0.5, 0);
		TextButton.Size = UDim2.new(0, 25, 0, 25); TextButton.Text = ""; CreateRounded(TextButton, 4);
		
		local ImageLabel = Instance.new("ImageLabel"); ImageLabel.Parent = TextButton; ImageLabel.BackgroundTransparency = 1;
		ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5); ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0);
		ImageLabel.Size = UDim2.new(0, 15, 0, 15); ImageLabel.Image = "rbxthumb://type=Asset&id=10734898355&w=150&h=150"; ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255);
		
		local TextLabel = Instance.new("TextLabel"); TextLabel.Parent = Button; TextLabel.BackgroundTransparency = 1;
		TextLabel.AnchorPoint = Vector2.new(0.5, 0.5); TextLabel.Position = UDim2.new(0.5, -20, 0.5, 0);
		TextLabel.Size = UDim2.new(1, -60, 1, 0); TextLabel.Font = Enum.Font.Cartoon;
		TextLabel.Text = title; TextLabel.TextXAlignment = Enum.TextXAlignment.Center; TextLabel.TextSize = 15;

		local ArrowRight = Instance.new("ImageLabel"); ArrowRight.Parent = Button; ArrowRight.BackgroundTransparency = 1;
		ArrowRight.AnchorPoint = Vector2.new(0, 0.5); ArrowRight.Position = UDim2.new(0, 15, 0.5, 0);
		ArrowRight.Size = UDim2.new(0, 15, 0, 15); ArrowRight.Image = "rbxthumb://type=Asset&id=10709768347&w=150&h=150";

		TextButton.MouseButton1Click:Connect(callback);
	end;
	
	CreateCheckbox("Guardar Configuración", SettingsLib.SaveSettings, function(state) SettingsLib.SaveSettings = state; (getgenv()).SaveConfig() end);
	CreateCheckbox("Animación de Carga", SettingsLib.LoadAnimation, function(state) SettingsLib.LoadAnimation = state; (getgenv()).SaveConfig() end);
	CreateStyledButtonForSettings("Resetear Config", function() if isfolder("xSOLITOx HUB") then delfolder("xSOLITOx HUB") end; Update:Notify("Configuración reseteada!") end);
	
	local Tab = Instance.new("Frame"); Tab.Name = "Tab"; Tab.Parent = Main;
	Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset); Tab.BackgroundTransparency = 1;
	Tab.Size = UDim2.new(0, WindowConfig.TabWidth, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8);
	
	local ScrollTab = Instance.new("ScrollingFrame"); ScrollTab.Name = "ScrollTab"; ScrollTab.Parent = Tab;
	ScrollTab.Active = true; ScrollTab.BackgroundTransparency = 1; ScrollTab.Size = UDim2.new(1, 0, 1, 0);
	ScrollTab.ScrollBarThickness = 0; ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y; CreateRounded(Tab, 5);
	
	local TabListLayout = Instance.new("UIListLayout"); TabListLayout.Name = "TabListLayout"; TabListLayout.Parent = ScrollTab;
	TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder; TabListLayout.Padding = UDim.new(0, 2);
	
	local Page = Instance.new("Frame"); Page.Name = "Page"; Page.Parent = Main;
	Page.Position = UDim2.new(0, Tab.Size.X.Offset + 18, 0, Top.Size.Y.Offset);
	Page.Size = UDim2.new(Config.Size.X.Scale, Config.Size.X.Offset - Tab.Size.X.Offset - 25, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8);
	Page.BackgroundTransparency = 1; CreateRounded(Page, 3);
	
	local MainPage = Instance.new("Frame"); MainPage.Name = "MainPage"; MainPage.Parent = Page;
	MainPage.ClipsDescendants = true; MainPage.BackgroundTransparency = 1; MainPage.Size = UDim2.new(1, 0, 1, 0);
	
	local PageList = Instance.new("Folder"); PageList.Name = "PageList"; PageList.Parent = MainPage;
	
	local UIPageLayout = Instance.new("UIPageLayout"); UIPageLayout.Parent = PageList;
	UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder; UIPageLayout.EasingDirection = Enum.EasingDirection.InOut;
	UIPageLayout.EasingStyle = Enum.EasingStyle.Quad; UIPageLayout.FillDirection = Enum.FillDirection.Vertical;
	UIPageLayout.Padding = UDim.new(0, 10); UIPageLayout.TweenTime = 0; UIPageLayout.GamepadInputEnabled = false;
	UIPageLayout.ScrollWheelInputEnabled = false; UIPageLayout.TouchInputEnabled = false;
	MakeDraggable(Top, OutlineMain);
	
	UserInputService.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.Insert then local hub = get_top_gui():FindFirstChild("xSOLITOx HUB"); if hub then hub.Enabled = not hub.Enabled end end
	end);
	
	local Dragging = false; local dragStartPos, dragStartSize;
	DragButton.InputBegan:Connect(function(Input) if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then Dragging = true; dragStartPos = Input.Position; dragStartSize = OutlineMain.AbsoluteSize end end);
	UserInputService.InputEnded:Connect(function(Input) if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then Dragging = false end end);
	
	local function updateOnResize(newSize)
        local scale = (newSize.X - WindowConfig.Size.X.Offset) / (1280 - WindowConfig.Size.X.Offset) -- 1280 is max width example
        scale = math.clamp(scale, 0, 1)

        for element, baseSize in pairs(allTextElements) do
            if element and element.Parent then
                element.TextSize = baseSize + (baseSize * 0.3 * scale)
            end
        end

        for element, baseSize in pairs(allImageElements) do
            if element and element.Parent then
                element.Size = UDim2.new(baseSize.X.Scale, baseSize.X.Offset + (baseSize.X.Offset * 0.3 * scale), baseSize.Y.Scale, baseSize.Y.Offset + (baseSize.Y.Offset * 0.3 * scale))
            end
        end
    end

	UserInputService.InputChanged:Connect(function(Input)
		if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
			local delta = Input.Position - dragStartPos
			local newWidth = math.clamp(dragStartSize.X + delta.X, WindowConfig.Size.X.Offset, 1280)
			local newHeight = math.clamp(dragStartSize.Y + delta.Y, WindowConfig.Size.Y.Offset, 720)
			
			OutlineMain.Size = UDim2.new(0, newWidth, 0, newHeight)
			Main.Size = UDim2.new(0, newWidth - 15, 0, newHeight - 15)
			Page.Size = UDim2.new(0, Main.AbsoluteSize.X - Tab.AbsoluteSize.X - 17, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 8)
			Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 0, Main.AbsoluteSize.Y - Top.AbsoluteSize.Y - 8)

			updateOnResize(Vector2.new(newWidth, newHeight))
		end
	end);
	
	main_instance = uitab:Tab("Dummy", "") -- Create instance to make functions available
	if settingsFrame then
		local scroll = settingsFrame:FindFirstChild("SettingsMenuList"):FindFirstChild("ScrollSettings")
		if scroll then
			local dropdownObject = main_instance:Dropdown("Tema de la Interfaz", {"Dark", "Light", "Red", "Transparent"}, SettingsLib.Theme, function(selectedTheme)
				SettingsLib.Theme = selectedTheme;
				(getgenv()).SaveConfig();
				ApplyTheme(selectedTheme);
			end)
			dropdownObject.Parent = scroll -- Mover al panel de configuración
		end
	end

	for _, child in ipairs(NoxHub:GetDescendants()) do
		if child:IsA("TextLabel") or child:IsA("TextButton") then
			allTextElements[child] = child.TextSize
		elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
			allImageElements[child] = child.Size
		end
	end
	
	ApplyTheme(SettingsLib.Theme)
	return uitab;
end;

-- Esto asegura que las funciones de la librería estén disponibles para la creación de la UI.
local LibUpdate = Update:Window({SubTitle = "v8.0 by xSOLITOx", Size = UDim2.new(0, 700, 0, 450), TabWidth = 180})
local Tab1 = LibUpdate:Tab("Principal", "rbxassetid://...")
Tab1:Button("Click Me", function() print("Clicked") end)
Tab1:Toggle("Toggle Me", false, "A cool toggle", function(state) print("Toggled:", state) end)
-- etc...

task.spawn(function()
    task.wait(0.1)
    local guis_a_mover = {"xSOLITOx HUB", "NotificationFrame", "ScreenGui"}
    local lugar_vip = get_top_gui()
    local core_gui = game:GetService("CoreGui")

    for _, nombre_gui in ipairs(guis_a_mover) do
        pcall(function()
            local gui_encontrada = core_gui:FindFirstChild(nombre_gui)
            if gui_encontrada and gui_encontrada.Parent ~= lugar_vip then
                gui_encontrada.Parent = lugar_vip
            end
        end)
    end
end)

getgenv().xSOLITOxHUB_Running = false
return Update;
