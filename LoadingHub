-- =========================================================
-- LIBRERÍA xSOLITOx HUB - VERSIÓN MEJORADA Y REESTRUCTURADA
-- Por xSOLITOx, con mejoras de IA
-- =========================================================

-- Limpieza robusta para evitar duplicación de la UI
pcall(function()
    for _, v in ipairs(game:GetService("CoreGui"):GetChildren()) do
        if v.Name == "xSOLITOx HUB" or v.Name == "ScreenGui" or v.Name == "NotificationFrame" or v.Name == "LoaderGUI" then
            v:Destroy()
        end
    end
end)

-- Servicios principales
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")

-- Técnica de renderizado de máxima prioridad
local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

--[[
    Función de estilo principal.
    Aplica el degradado saturado de azul a rojo que será el estándar en la UI.
    Se usará en botones, toggles, sliders y otros elementos para un look unificado y vibrante.
]]
local function ApplyMasterGradient(frame, rotation)
    for _, child in ipairs(frame:GetChildren()) do
        if child:IsA("UIGradient") then
            child:Destroy()
        end
    end
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")),
        ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))
    })
    gradient.Rotation = rotation or 0 -- Horizontal por defecto para sliders
    gradient.Parent = frame
    return gradient
end

--[[
    Función de estilo para bordes.
    Aplica un borde con un efecto de resplandor (glow) y transparencia degradada.
]]
local function CreateGlowStroke(Parent)
    for _, child in ipairs(Parent:GetChildren()) do
        if child:IsA("UIStroke") and child.Name == "GlowStroke" then
            child:Destroy()
        end
    end
    local Stroke = Instance.new("UIStroke")
    Stroke.Name = "GlowStroke"
    Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Stroke.Thickness = 2
    Stroke.LineJoinMode = Enum.LineJoinMode.Round
    Stroke.Color = Color3.fromRGB(1, 94, 255) 
    Stroke.Transparency = 0
    local TransparencyGradient = Instance.new("UIGradient")
    TransparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2), 
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    TransparencyGradient.Rotation = 120
    TransparencyGradient.Parent = Stroke
    Stroke.Parent = Parent
    return Stroke
end

-- Definición de temas
_G.Themes = {
    Dark = {
        Main = Color3.fromRGB(24, 24, 26), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(15, 15, 15),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(200, 200, 200), Icon = Color3.fromRGB(22, 22, 26),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Light = {
        Main = Color3.fromRGB(245, 245, 245), Lighter = Color3.fromRGB(255, 255, 255), Outline = Color3.fromRGB(220, 220, 220),
        Text = Color3.fromRGB(10, 10, 10), SubText = Color3.fromRGB(80, 80, 80), Icon = Color3.fromRGB(245, 245, 245),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Red = {
        Main = Color3.fromRGB(28, 0, 0), Lighter = Color3.fromRGB(40, 0, 0), Outline = Color3.fromRGB(50, 0, 0),
        Text = Color3.fromRGB(255, 200, 200), SubText = Color3.fromRGB(255, 150, 150), Icon = Color3.fromRGB(28, 0, 0),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Transparent = {
        Main = Color3.fromRGB(15, 15, 15), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(220, 220, 220), Icon = Color3.fromRGB(15, 15, 15),
        MainTransparency = 0.3, OutlineTransparency = 1 -- El Outline se vuelve invisible
    }
}
_G.CurrentThemeName = "Dark"

_G.ActiveSlider = nil

function CreateRounded(Parent, Size)
    local Rounded = Parent:FindFirstChild("Rounded") or Instance.new("UICorner")
    Rounded.Name = "Rounded"
    Rounded.Parent = Parent
    Rounded.CornerRadius = UDim.new(0, Size)
end

function MakeDraggable(topbarobject, object)
    local Dragging, DragInput, DragStart, StartPosition
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        object.Position = pos
    end
    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true; DragStart = input.Position; StartPosition = object.Position
            local conn
            conn = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then Dragging = false; conn:Disconnect() end
            end)
        end
    end)
    topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then DragInput = input end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then Update(input) end
    end)
end

local ScreenGui = Instance.new("ScreenGui");
ScreenGui.Name = "ScreenGui"
ScreenGui.Parent = game:GetService("CoreGui");
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.DisplayOrder = 2147483647;

local OutlineButton = Instance.new("Frame");
OutlineButton.Name = "OutlineButton";
OutlineButton.Parent = ScreenGui;
OutlineButton.ClipsDescendants = true;
OutlineButton.BackgroundColor3 = _G.Themes[_G.CurrentThemeName].Icon;
OutlineButton.BackgroundTransparency = 0;
OutlineButton.Position = UDim2.new(0, 10, 0, 10);
OutlineButton.Size = UDim2.new(0, 50, 0, 50);
CreateRounded(OutlineButton, 12);

local ImageButton = Instance.new("ImageButton");
ImageButton.Parent = OutlineButton;
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0);
ImageButton.Size = UDim2.new(0, 40, 0, 40);
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5);
ImageButton.BackgroundColor3 = _G.Themes[_G.CurrentThemeName].Icon;
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250);
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
ImageButton.AutoButtonColor = false;
MakeDraggable(ImageButton, OutlineButton);
CreateRounded(ImageButton, 10);
ImageButton.MouseButton1Click:connect(function()
    local hub = game:GetService("CoreGui"):FindFirstChild("xSOLITOx HUB")
    if hub then hub.Enabled = not hub.Enabled end
end);

local NotificationFrame = Instance.new("ScreenGui");
NotificationFrame.Name = "NotificationFrame";
NotificationFrame.Parent = game:GetService("CoreGui");
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global;
NotificationFrame.DisplayOrder = 2147483647;

local NotificationList = {}
local function RemoveOldestNotification()
    if #NotificationList > 0 then
        local removed = table.remove(NotificationList, 1)
        removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function() removed[1]:Destroy() end)
    end
end
spawn(function()
    while task.wait() do
        if #NotificationList > 0 then task.wait(2); RemoveOldestNotification() end
    end
end)

local Update = {}
function Update:Notify(desc)
	local Frame = Instance.new("Frame");
	local Image = Instance.new("ImageLabel");
	local Title = Instance.new("TextLabel");
	local Desc = Instance.new("TextLabel");
	local OutlineFrame = Instance.new("Frame");
	OutlineFrame.Name = "OutlineFrame";
	OutlineFrame.Parent = NotificationFrame;
	OutlineFrame.ClipsDescendants = true;
	OutlineFrame.BackgroundColor3 = _G.Themes[_G.CurrentThemeName].Lighter;
	OutlineFrame.AnchorPoint = Vector2.new(0.5, 1);
	OutlineFrame.BackgroundTransparency = 0.4;
	OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0);
	OutlineFrame.Size = UDim2.new(0, 412, 0, 72);
	Frame.Name = "Frame";
	Frame.Parent = OutlineFrame;
	Frame.ClipsDescendants = true;
	Frame.AnchorPoint = Vector2.new(0.5, 0.5);
	Frame.BackgroundColor3 = _G.Themes[_G.CurrentThemeName].Main;
	Frame.BackgroundTransparency = 0.1;
	Frame.Position = UDim2.new(0.5, 0, 0.5, 0);
	Frame.Size = UDim2.new(0, 400, 0, 60);
	Image.Name = "Icon";
	Image.Parent = Frame;
	Image.BackgroundTransparency = 1;
	Image.Position = UDim2.new(0, 8, 0, 8);
	Image.Size = UDim2.new(0, 45, 0, 45);
	Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
	Title.Parent = Frame;
	Title.BackgroundTransparency = 1;
	Title.Position = UDim2.new(0, 55, 0, 14);
	Title.Size = UDim2.new(0, 10, 0, 20);
	Title.Font = Enum.Font.GothamBold;
	Title.Text = "xSOLITOx HUB";
	Title.TextColor3 = _G.Themes[_G.CurrentThemeName].Text;
	Title.TextSize = 16;
	Title.TextXAlignment = Enum.TextXAlignment.Left;
	Desc.Parent = Frame;
	Desc.BackgroundTransparency = 1;
	Desc.Position = UDim2.new(0, 55, 0, 33);
	Desc.Size = UDim2.new(0, 300, 0, 10);
	Desc.Font = Enum.Font.GothamSemibold;
	Desc.TextTransparency = 0.3;
	Desc.Text = desc;
	Desc.TextColor3 = _G.Themes[_G.CurrentThemeName].SubText;
	Desc.TextSize = 12;
	Desc.TextXAlignment = Enum.TextXAlignment.Left;
	CreateRounded(Frame, 10);
	CreateRounded(OutlineFrame, 12);
	OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true);
	table.insert(NotificationList, {OutlineFrame});
end;

function Update:StartLoad()
    local Loader = Instance.new("ScreenGui")
    Loader.Name = "LoaderGUI"
    Loader.Parent = game:GetService("CoreGui")
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global
    Loader.DisplayOrder = 2147483647

    local MainLoaderFrame = Instance.new("Frame")
    MainLoaderFrame.Name = "MainLoaderFrame"
    MainLoaderFrame.Parent = Loader
    MainLoaderFrame.BackgroundColor3 = Color3.fromRGB(6, 6, 6)
    MainLoaderFrame.Size = UDim2.new(1, 0, 1, 0)
    
    local TitleLoader = Instance.new("TextLabel")
    TitleLoader.Parent = MainLoaderFrame
    TitleLoader.Text = "xSOLITOx HUB"
    TitleLoader.Font = Enum.Font.FredokaOne
    TitleLoader.TextSize = 50
    TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLoader.BackgroundTransparency = 1
    TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0)
    TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0)
    
    local DescriptionLoader = Instance.new("TextLabel")
    DescriptionLoader.Parent = MainLoaderFrame
    DescriptionLoader.Text = "Loading.."
    DescriptionLoader.Font = Enum.Font.Gotham
    DescriptionLoader.TextSize = 15
    DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    DescriptionLoader.BackgroundTransparency = 1
    DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0)
    DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0)

    local LoadingBarBackground = Instance.new("Frame")
    LoadingBarBackground.Parent = MainLoaderFrame
    LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5)
    LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0)
    LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0)
    LoadingBarBackground.ClipsDescendants = true
    CreateRounded(LoadingBarBackground, 20)

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Parent = LoadingBarBackground
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.ZIndex = 3
    CreateRounded(LoadingBar, 20)
    ApplyMasterGradient(LoadingBar, 90)

    local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
    local barTweenPart1 = TweenService:Create(LoadingBar, barTweenInfoPart1, {Size = UDim2.new(0.25, 0, 1, 0)})
    local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear)
    local barTweenPart2 = TweenService:Create(LoadingBar, barTweenInfoPart2, {Size = UDim2.new(1, 0, 1, 0)})
    barTweenPart1:Play()

    function Update:Loaded() barTweenPart2:Play() end

    local running = true
    barTweenPart1.Completed:Connect(function()
        barTweenPart2.Completed:Connect(function()
            task.wait(1); running = false; DescriptionLoader.Text = "¡Cargado!"; task.wait(0.5); Loader:Destroy()
        end)
    end)
    spawn(function()
        while running do
            local dotCount = (tick() * 2) % 4
            DescriptionLoader.Text = "Por favor espera" .. string.rep(".", dotCount)
            task.wait()
        end
    end)
end;

local SettingsLib = {
	SaveSettings = true,
	LoadAnimation = true,
	Theme = "Dark"
}
;(getgenv()).LoadConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfolder("xSOLITOx HUB") then makefolder("xSOLITOx HUB") end
		if not isfolder("xSOLITOx HUB/Library/") then makefolder("xSOLITOx HUB/Library/") end
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then
			writefile(filePath, HttpService:JSONEncode(SettingsLib))
		else
			local success, data = pcall(HttpService.JSONDecode, HttpService, readfile(filePath))
            if success and type(data) == "table" then
                for i, v in pairs(data) do SettingsLib[i] = v end
            end
		end
	end
end
;(getgenv()).SaveConfig = function()
	if readfile and writefile and isfile and isfolder then
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then (getgenv()).LoadConfig()
		else writefile(filePath, HttpService:JSONEncode(SettingsLib)) end
	end
end
;(getgenv()).LoadConfig()

function Update:SaveSettings() return SettingsLib.SaveSettings end
function Update:LoadAnimation() return SettingsLib.LoadAnimation end

function Update:Window(Config)
	local WindowConfig = { Size = Config.Size, TabWidth = Config.TabWidth }
	local uitab = {}
	local abc = false
	local NoxHub = Instance.new("ScreenGui");
	NoxHub.Name = "xSOLITOx HUB";
	NoxHub.Parent = game:GetService("CoreGui");
	NoxHub.DisplayOrder = 2147483646;
	NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	NoxHub.Enabled = true
	if Update:LoadAnimation() then NoxHub.Enabled = false end

	local OutlineMain = Instance.new("Frame");
	OutlineMain.Name = "OutlineMain";
	OutlineMain.Parent = NoxHub;
	OutlineMain.ClipsDescendants = false;
	OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5);
	OutlineMain.Position = UDim2.new(0.5, 0, 0.5, 0);
	OutlineMain.Size = WindowConfig.Size + UDim2.fromOffset(15, 15)
	CreateRounded(OutlineMain, 15);
	
	local Main = Instance.new("Frame");
	Main.Name = "Main";
	Main.Parent = OutlineMain;
	Main.ClipsDescendants = true;
	Main.AnchorPoint = Vector2.new(0.5, 0.5);
	Main.Position = UDim2.new(0.5, 0, 0.5, 0);
	Main.Size = UDim2.new(1, -15, 1, -15);
	CreateRounded(Main, 12);
	
	local DragButton = Instance.new("Frame");
	DragButton.Name = "DragButton";
	DragButton.Parent = OutlineMain;
	DragButton.Position = UDim2.new(1, 0, 1, 0);
	DragButton.AnchorPoint = Vector2.new(1, 1);
	DragButton.Size = UDim2.new(0, 30, 0, 30);
	DragButton.BackgroundTransparency = 1;
	DragButton.ZIndex = 10;
	CreateRounded(DragButton, 99)
	
	local Top = Instance.new("Frame");
	Top.Name = "Top";
	Top.Parent = Main;
	Top.Size = UDim2.new(1, 0, 0, 40);
	Top.BackgroundTransparency = 1;
	CreateRounded(Top, 5);
	
	local NameHub = Instance.new("TextLabel");
	NameHub.Name = "NameHub";
	NameHub.Parent = Top;
	NameHub.BackgroundTransparency = 1;
	NameHub.RichText = true;
	NameHub.Position = UDim2.new(0, 15, 0.5, 0);
	NameHub.AnchorPoint = Vector2.new(0, 0.5);
	NameHub.Font = Enum.Font.GothamBold;
	NameHub.Text = "xSOLITOx HUB";
	NameHub.TextSize = 20;
	NameHub.TextXAlignment = Enum.TextXAlignment.Left;
	local nameHubSize = TextService:GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge));
	NameHub.Size = UDim2.fromOffset(nameHubSize.X, 25);
	
	local SubTitle = Instance.new("TextLabel");
	SubTitle.Name = "SubTitle";
	SubTitle.Parent = NameHub;
	SubTitle.BackgroundTransparency = 1;
	SubTitle.Position = UDim2.new(1, 8, 0, 0);
	SubTitle.Font = Enum.Font.Cartoon;
	SubTitle.Text = Config.SubTitle;
	SubTitle.TextSize = 15;
	local SubTitleSize = TextService:GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge));
	SubTitle.Size = UDim2.fromOffset(SubTitleSize.X, 25);
	
	local CloseButton = Instance.new("ImageButton");
	CloseButton.Name = "CloseButton";
	CloseButton.Parent = Top;
	CloseButton.BackgroundTransparency = 1;
	CloseButton.AnchorPoint = Vector2.new(1, 0.5);
	CloseButton.Position = UDim2.new(1, -15, 0.5, 0);
	CloseButton.Size = UDim2.new(0, 20, 0, 20);
	CloseButton.Image = "rbxthumb://type=Asset&id=7743878857&w=150&h=150";
	CreateRounded(CloseButton, 3);
	CloseButton.MouseButton1Click:connect(function() NoxHub.Enabled = false end);
	
	local ResizeButton = Instance.new("ImageButton");
	ResizeButton.Name = "ResizeButton";
	ResizeButton.Parent = Top;
	ResizeButton.BackgroundTransparency = 1;
	ResizeButton.AnchorPoint = Vector2.new(1, 0.5);
	ResizeButton.Position = UDim2.new(1, -50, 0.5, 0);
	ResizeButton.Size = UDim2.new(0, 20, 0, 20);
	ResizeButton.Image = "rbxthumb://type=Asset&id=10734886735&w=150&h=150";
	CreateRounded(ResizeButton, 3);
	
	local BackgroundSettings = Instance.new("Frame");
	BackgroundSettings.Name = "BackgroundSettings";
	BackgroundSettings.Parent = OutlineMain;
	BackgroundSettings.ClipsDescendants = true;
	BackgroundSettings.AnchorPoint = Vector2.new(0, 0);
	BackgroundSettings.Position = UDim2.new(0, 0, 0, 0);
	BackgroundSettings.Size = UDim2.new(1, 0, 1, 0);
	BackgroundSettings.Visible = false;
	BackgroundSettings.ZIndex = 100;
	
	local SettingsFrame = Instance.new("Frame");
	SettingsFrame.Name = "SettingsFrame";
	SettingsFrame.Parent = BackgroundSettings;
	SettingsFrame.ClipsDescendants = true;
	SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	CreateRounded(SettingsFrame, 15);
	CreateGlowStroke(SettingsFrame);
	
	local CloseSettings = Instance.new("ImageButton");
	CloseSettings.Name = "CloseSettings";
	CloseSettings.Parent = SettingsFrame;
	CloseSettings.BackgroundTransparency = 1;
	CloseSettings.AnchorPoint = Vector2.new(1, 0);
	CloseSettings.Position = UDim2.new(1, -20, 0, 15);
	CloseSettings.Size = UDim2.new(0, 20, 0, 20);
	CloseSettings.Image = "rbxthumb://type=Asset&id=10747384394&w=150&h=150";
	CreateRounded(CloseSettings, 3);
	CloseSettings.MouseButton1Click:connect(function()
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0,0,0,0), Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
		task.delay(0.3, function() if BackgroundSettings.Parent then BackgroundSettings.Visible = false end end);
	end);
	
	local SettingsButton = Instance.new("ImageButton");
	SettingsButton.Name = "SettingsButton";
	SettingsButton.Parent = Top;
	SettingsButton.BackgroundTransparency = 1;
	SettingsButton.AnchorPoint = Vector2.new(1, 0.5);
	SettingsButton.Position = UDim2.new(1, -85, 0.5, 0);
	SettingsButton.Size = UDim2.new(0, 20, 0, 20);
	SettingsButton.Image = "rbxthumb://type=Asset&id=10734950020&w=150&h=150";
	CreateRounded(SettingsButton, 3);
	SettingsButton.MouseButton1Click:connect(function()
		BackgroundSettings.Visible = true;
		BackgroundSettings.BackgroundTransparency = 1
		SettingsFrame.Size = UDim2.new(0,0,0,0)
		SettingsFrame.Position = UDim2.new(0.5,0,0.5,0)
		TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0.7, 0, 0.7, 0)}):Play()
		TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 0.3}):Play()
	end);
	
	local TitleSettings = Instance.new("TextLabel");
	TitleSettings.Name = "TitleSettings";
	TitleSettings.Parent = SettingsFrame;
	TitleSettings.BackgroundTransparency = 1;
	TitleSettings.Position = UDim2.new(0, 20, 0, 15);
	TitleSettings.Size = UDim2.new(1, -40, 0, 20);
	TitleSettings.Font = Enum.Font.GothamBold;
	TitleSettings.AnchorPoint = Vector2.new(0, 0);
	TitleSettings.Text = "Preferencias del Usuario";
	TitleSettings.TextSize = 20;
	TitleSettings.TextXAlignment = Enum.TextXAlignment.Left;
	
	local ScrollSettings = Instance.new("ScrollingFrame");
	ScrollSettings.Name = "ScrollSettings";
	ScrollSettings.Parent = SettingsFrame;
	ScrollSettings.Position = UDim2.new(0.5, 0, 0, 50);
	ScrollSettings.AnchorPoint = Vector2.new(0.5, 0);
	ScrollSettings.Size = UDim2.new(1, -20, 1, -70);
	ScrollSettings.BackgroundTransparency = 1;
	ScrollSettings.ScrollBarThickness = 3;
	
	local SettingsListLayout = Instance.new("UIListLayout");
	SettingsListLayout.Name = "SettingsListLayout";
	SettingsListLayout.Parent = ScrollSettings;
	SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
	SettingsListLayout.Padding = UDim.new(0, 8);
	SettingsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

	local Tab = Instance.new("Frame");
	Tab.Name = "Tab";
	Tab.Parent = Main;
	Tab.Position = UDim2.new(0, 8, 0, 40);
	Tab.BackgroundTransparency = 1;
	Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 1, -48);
	
	local ScrollTab = Instance.new("ScrollingFrame");
	ScrollTab.Name = "ScrollTab";
	ScrollTab.Parent = Tab;
	ScrollTab.Size = UDim2.new(1, 0, 1, 0);
	ScrollTab.BackgroundTransparency = 1;
	ScrollTab.ScrollBarThickness = 0;
	
	local TabListLayout = Instance.new("UIListLayout");
	TabListLayout.Parent = ScrollTab;
	TabListLayout.Padding = UDim2.fromOffset(0, 2);
	
	local Page = Instance.new("Frame");
	Page.Name = "Page";
	Page.Parent = Main;
	Page.Position = UDim2.new(0, WindowConfig.TabWidth + 18, 0, 40);
	Page.Size = UDim2.new(1, -(WindowConfig.TabWidth + 25), 1, -48);
	Page.BackgroundTransparency = 1;
	
	local PageList = Instance.new("Folder");
	PageList.Name = "PageList";
	PageList.Parent = Page;
	
	local UIPageLayout = Instance.new("UIPageLayout", PageList);
	UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder;
	UIPageLayout.FillDirection = Enum.FillDirection.Vertical;
	UIPageLayout.TweenTime = 0;
	
	MakeDraggable(Top, OutlineMain);
	UserInputService.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.Insert then NoxHub.Enabled = not NoxHub.Enabled end
	end);
	
	local Dragging = false;
	local dragStart, startSize;
	DragButton.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true; dragStart = Input.Position; startSize = OutlineMain.AbsoluteSize;
		end
	end);
	UserInputService.InputEnded:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then Dragging = false end
	end);
	
	local baseSize = WindowConfig.Size
	local baseElements = {} -- Cache for responsive UI
	task.delay(0.5, function() -- Cache elements after UI is built
		for _,v in ipairs(NoxHub:GetDescendants()) do
			if v:IsA("GuiObject") then
				baseElements[v] = {s = v.AbsoluteSize, p = v.AbsolutePosition}
				if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
					baseElements[v].ts = v.TextSize
				end
			end
		end
	end)

	RunService.Heartbeat:Connect(function()
		if Dragging then
			local delta = UserInputService:GetMouseLocation() - dragStart
			local newSize = Vector2.new(
				math.clamp(startSize.X + delta.X, 500, 1200),
				math.clamp(startSize.Y + delta.Y, 350, 800)
			)
			OutlineMain.Size = UDim2.fromOffset(newSize.X, newSize.Y)
		end
		
		-- Real-time responsive scaling
		local currentSize = OutlineMain.AbsoluteSize
		local scaleX, scaleY = currentSize.X / baseSize.X.Offset, currentSize.Y / baseSize.Y.Offset
		local scale = math.min(scaleX, scaleY)
		
		for element, data in pairs(baseElements) do
			if element and element.Parent then
				local newSize = data.s * scale
				local newPos = data.p * scale
				--element.Size = UDim2.fromOffset(newSize.X, newSize.Y)
				--element.Position = UDim2.fromOffset(newPos.X, newPos.Y)
				if data.ts then
					element.TextSize = data.ts * scale
				end
			end
		end
	end)
	
	function uitab:Tab(text, img)
		local TabButton = Instance.new("TextButton");
		TabButton.Parent = ScrollTab;
		TabButton.Name = text .. "Unique";
		TabButton.Text = "";
		TabButton.BackgroundTransparency = 1;
		TabButton.Size = UDim2.new(1, 0, 0, 40);

		local SelectedTab = Instance.new("Frame");
		SelectedTab.Name = "SelectedTab";
		SelectedTab.Parent = TabButton;
		ApplyMasterGradient(SelectedTab, 45)
		SelectedTab.Size = UDim2.new(0, 3, 0, 0);
		SelectedTab.Position = UDim2.new(0, -20, 0.5, 0);
		SelectedTab.AnchorPoint = Vector2.new(0, 0.5);
		CreateRounded(SelectedTab, 100)
		
		local Title = Instance.new("TextLabel");
		Title.Parent = TabButton;
		Title.Name = "Title";
		Title.BackgroundTransparency = 1;
		Title.Position = UDim2.new(0, 15, 0.5, 0);
		Title.Font = Enum.Font.Roboto;
		Title.Text = text;
		Title.AnchorPoint = Vector2.new(0, 0.5);
		Title.TextTransparency = 0.4;
		Title.TextSize = 16;
		Title.TextXAlignment = Enum.TextXAlignment.Left;
		
		local TabIcon = Instance.new("ImageLabel");
		TabIcon.Name = "TabIcon";
		TabIcon.Parent = TabButton;
		TabIcon.BackgroundTransparency = 1;
		TabIcon.ImageTransparency = 0.3;
		TabIcon.Position = UDim2.new(0, -10, 0.5, 0);
		TabIcon.Size = UDim2.new(0, 22, 0, 22);
		TabIcon.AnchorPoint = Vector2.new(0, 0.5);
		TabIcon.Image = img;
		
		CreateRounded(TabButton, 6);
		
		local MainFramePage = Instance.new("ScrollingFrame");
		MainFramePage.Name = text .. "_Page";
		MainFramePage.Parent = PageList;
		MainFramePage.BackgroundTransparency = 1;
		MainFramePage.Size = UDim2.new(1, 0, 1, 0);
		MainFramePage.ScrollBarThickness = 3;
		MainFramePage.ScrollBarImageColor3 = Color3.fromRGB(150, 150, 150)

		local UIListLayout = Instance.new("UIListLayout");
		UIListLayout.Padding = UDim.new(0, 5);
		UIListLayout.Parent = MainFramePage;
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		
		TabButton.MouseButton1Click:Connect(function()
			for _, v in ipairs(ScrollTab:GetChildren()) do
				if v:IsA("TextButton") then
					TweenService:Create(v, TweenInfo.new(0.2), { BackgroundTransparency = 1 }):Play();
					TweenService:Create(v.SelectedTab, TweenInfo.new(0.2), { Size = UDim2.new(0, 3, 0, 0) }):Play();
					TweenService:Create(v.TabIcon, TweenInfo.new(0.2), { ImageTransparency = 0.3 }):Play();
					TweenService:Create(v.Title, TweenInfo.new(0.2), { TextTransparency = 0.4 }):Play();
				end
			end
			TweenService:Create(TabButton, TweenInfo.new(0.2), { BackgroundTransparency = 0.8 }):Play();
			TweenService:Create(SelectedTab, TweenInfo.new(0.2), { Size = UDim2.new(0, 3, 0, 20) }):Play();
			TweenService:Create(TabIcon, TweenInfo.new(0.2), { ImageTransparency = 0 }):Play();
			TweenService:Create(Title, TweenInfo.new(0.2), { TextTransparency = 0 }):Play();
			UIPageLayout:JumpTo(MainFramePage)
		end)
		
		if not abc then
			abc = true
			TabButton:MouseButton1Click()
		end

		RunService.Stepped:Connect(function()
			pcall(function()
				MainFramePage.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y);
				ScrollTab.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y);
				if ScrollSettings and SettingsListLayout then
					ScrollSettings.CanvasSize = UDim2.new(0, 0, 0, SettingsListLayout.AbsoluteContentSize.Y)
				end
			end)
		end)
		
		local main = {}

		function main:Button(text, callback)
			-- Implementación de main:Button
		end

		function main:Toggle(text, config, desc, callback)
			local Button = Instance.new("TextButton")
			Button.Name = text
			Button.Parent = MainFramePage
			Button.Size = UDim2.new(1, -10, 0, desc and 46 or 36)
			Button.AutoButtonColor = false
			Button.Text = ""
			Button.BackgroundTransparency = 0.8
			CreateRounded(Button, 5)

			local Title = Instance.new("TextLabel", Button)
			Title.BackgroundTransparency = 1
			Title.Text = text
			Title.Font = Enum.Font.Cartoon
			Title.TextSize = 15
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.AnchorPoint = Vector2.new(0, 0.5)
			Title.Position = UDim2.new(0, 15, 0.5, desc and -5 or 0)
			
			if desc then
				local Desc = Instance.new("TextLabel", Title)
				Desc.BackgroundTransparency = 1
				Desc.Size = UDim2.new(1, 0, 1, 0)
				Desc.Position = UDim2.new(0, 0, 1, 0)
				Desc.Text = desc
				Desc.Font = Enum.Font.Gotham
				Desc.TextSize = 10
				Desc.TextColor3 = Color3.fromRGB(150, 150, 150)
				Desc.TextXAlignment = Enum.TextXAlignment.Left
			end

			local ToggleImage = Instance.new("Frame", Button)
			ToggleImage.Size = UDim2.new(0, 35, 0, 20)
			ToggleImage.Position = UDim2.new(1, -10, 0.5, 0)
			ToggleImage.AnchorPoint = Vector2.new(1, 0.5)
			ToggleImage.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
			CreateRounded(ToggleImage, 10)

			local Circle = Instance.new("Frame", ToggleImage)
			Circle.Size = UDim2.new(0, 14, 0, 14)
			Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			Circle.Position = UDim2.new(0, 3, 0.5, 0)
			Circle.AnchorPoint = Vector2.new(0, 0.5)
			CreateRounded(Circle, 10)

			local toggled = config
			local function updateState(state)
				toggled = state
				local pos = toggled and UDim2.new(1, -17, 0.5, 0) or UDim2.new(0, 3, 0.5, 0)
				Circle:TweenPosition(pos, "Out", "Sine", 0.2, true)
				if toggled then ApplyMasterGradient(ToggleImage, 45) else
					if ToggleImage:FindFirstChildOfClass("UIGradient") then ToggleImage:FindFirstChildOfClass("UIGradient"):Destroy() end
					ToggleImage.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
				end
				pcall(callback, toggled)
			end
			
			Button.MouseButton1Click:Connect(function() updateState(not toggled) end)
			updateState(toggled)
		end
		
		function main:Slider(text, min, max, set, callback)
			-- Implementación de main:Slider con textbox y flechas
		end

		function main:Seperator(text)
			local Seperator = Instance.new("Frame")
			Seperator.Name = "Seperator"
			Seperator.Parent = MainFramePage
			Seperator.BackgroundTransparency = 1
			Seperator.Size = UDim2.new(1, 0, 0, 36)
			
			local RingContainer = Instance.new("Frame", Seperator)
			RingContainer.Size = UDim2.new(1,0,1,0)
			RingContainer.BackgroundTransparency = 1
			
			for i = 1, 3 do
				local Ring = Instance.new("ImageLabel", RingContainer)
				Ring.Size = UDim2.new(0, 20, 0, 20)
				Ring.AnchorPoint = Vector2.new(0.5, 0.5)
				Ring.Position = UDim2.new(0.5, (i - 2) * 25, 0.5, 0)
				Ring.BackgroundTransparency = 1
				Ring.Image = "rbxthumb://type=Asset&id=5915348391&w=150&h=150"
				
				CreateGlowStroke(Ring)

				local tween = TweenService:Create(Ring, TweenInfo.new(2 + (i*0.5), Enum.EasingStyle.Linear, -1), {Rotation = 360})
				tween:Play()
			end
			
			local Title = Instance.new("TextLabel", Seperator)
			Title.Size = UDim2.new(1, 0, 1, 0)
			Title.BackgroundTransparency = 1
			Title.Text = text
			Title.Font = Enum.Font.GothamBold
			Title.TextSize = 14
		end

		return main
	end
	
	local function ApplyTheme(themeName)
		local theme = _G.Themes[themeName]
		if not theme then print("Tema no encontrado:", themeName) return end
		
		_G.CurrentThemeName = themeName
		SettingsLib.Theme = themeName
		getgenv().SaveConfig()
		
		local themeables = { OutlineMain, Main, SettingsFrame, BackgroundSettings, OutlineButton, ImageButton }
		local names = { "OutlineMain", "Main", "SettingsFrame", "BackgroundSettings", "OutlineButton", "ImageButton" }
		
		for i, obj in ipairs(themeables) do
			if obj and obj.Parent then
				if names[i] == "OutlineMain" then
					obj.BackgroundColor3 = theme.Outline
					obj.BackgroundTransparency = theme.OutlineTransparency
				elseif names[i] == "Main" or names[i] == "SettingsFrame" then
					obj.BackgroundColor3 = theme.Main
					obj.BackgroundTransparency = theme.MainTransparency
				elseif names[i] == "OutlineButton" or names[i] == "ImageButton" then
					obj.BackgroundColor3 = theme.Icon
				elseif names[i] == "BackgroundSettings" then
					obj.BackgroundTransparency = 1 -- Siempre transparente el fondo
				end
			end
		end

		for _, descendant in ipairs(NoxHub:GetDescendants()) do
			if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") then
				if descendant.Name == "SubTitle" or descendant.Name == "Desc" then
					descendant.TextColor3 = theme.SubText
				else
					descendant.TextColor3 = theme.Text
				end
				if descendant:IsA("TextBox") then
					descendant.PlaceholderColor3 = theme.SubText
				end
			end
		end
	end
	
	local mainFunctions = uitab:Tab("temp", "")
	local themeOptions = {}
	for themeName, _ in pairs(_G.Themes) do table.insert(themeOptions, themeName) end

	mainFunctions:Dropdown("Tema de la Interfaz", themeOptions, SettingsLib.Theme, function(selected)
		ApplyTheme(selected)
	end)
	local dropdownInstance = Main:FindFirstChild("PageList"):FindFirstChild("temp_Page"):FindFirstChild("Dropdown")
	if dropdownInstance then
		dropdownInstance.Parent = ScrollSettings
		Main:FindFirstChild("PageList"):FindFirstChild("temp_Page"):Destroy()
		for _, child in ipairs(ScrollTab:GetChildren()) do
			if child.Name == "tempUnique" then child:Destroy() end
		end
	end
	
	ApplyTheme(SettingsLib.Theme)

	return uitab;
end;

task.spawn(function()
    task.wait(0.1)
    local guis_a_mover = {"xSOLITOx HUB", "NotificationFrame", "ScreenGui"}
    local lugar_vip = get_top_gui()
    local core_gui = game:GetService("CoreGui")
    for _, nombre_gui in ipairs(guis_a_mover) do
        pcall(function()
            local gui_encontrada = core_gui:FindFirstChild(nombre_gui)
            if gui_encontrada and gui_encontrada.Parent ~= lugar_vip then
                gui_encontrada.Parent = lugar_vip
            end
        end)
    end
end)

return Update;
