-- =========================================================
-- LIBRERÍA xSOLITOx HUB - VERSIÓN FINAL Y PULIDA
-- Por xSOLITOx, con mejoras y reestructuración de IA
-- =========================================================

-- Sistema anti-duplicación: si el script ya se está ejecutando, se detiene.
if getgenv().xSOLITOxHUB_Running then return end
getgenv().xSOLITOxHUB_Running = true

-- Limpieza exhaustiva de versiones anteriores de la UI para evitar duplicados
pcall(function()
    local CoreGui = game:GetService("CoreGui")
    local guis_a_limpiar = {"xSOLITOx HUB", "ScreenGui", "NotificationFrame", "LoaderGUI"}
    for _, name in ipairs(guis_a_limpiar) do
        if CoreGui:FindFirstChild(name) then
            CoreGui[name]:Destroy()
        end
    end
end)


local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")

-- Técnica de renderizado de máxima prioridad
local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

--[[
    Esto crea: el degradado maestro.
    Función de estilo principal que aplica el degradado saturado de azul a rojo,
    replicado exactamente del SCRIPT V30. Es el estilo visual central de la UI.
]]
local function ApplyMasterGradient(frame, rotation)
	for _, child in ipairs(frame:GetChildren()) do
		if child:IsA("UIGradient") then child:Destroy() end
	end
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")), -- Azul brillante y saturado
		ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))  -- Rosa/Rojo brillante y saturado
	})
	gradient.Rotation = rotation or 45
	gradient.Parent = frame
	return gradient
end

--[[
    Esto crea: un borde con efecto de resplandor.
    Aplica un borde con un 'glow' suave, usado en elementos específicos
    como la ventana de ajustes para darle un toque distintivo.
]]
local function CreateGlowStroke(Parent)
    for _, child in ipairs(Parent:GetChildren()) do
        if child:IsA("UIStroke") and child.Name == "GlowStroke" then child:Destroy() end
    end
    local Stroke = Instance.new("UIStroke")
    Stroke.Name = "GlowStroke"
    Stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Stroke.Thickness = 2
    Stroke.LineJoinMode = Enum.LineJoinMode.Round
    Stroke.Color = Color3.fromRGB(1, 94, 255) 
	Stroke.Transparency = 0
    local TransparencyGradient = Instance.new("UIGradient")
    TransparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2), 
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    TransparencyGradient.Rotation = 120
    TransparencyGradient.Parent = Stroke
    Stroke.Parent = Parent
	return Stroke
end

--[[
    Esto crea: esquinas redondeadas para un objeto.
    Una función de utilidad simple para aplicar UICorner a cualquier elemento de la UI.
]]
function CreateRounded(Parent, Size)
	if Parent:FindFirstChild("Rounded") then Parent.Rounded:Destroy() end
	local Rounded = Instance.new("UICorner");
	Rounded.Name = "Rounded";
	Rounded.Parent = Parent;
	Rounded.CornerRadius = UDim.new(0, Size);
end

--[[
    Esto gestiona: el sistema de temas.
    Define las paletas de colores para los temas de la UI y actualiza las variables globales.
]]
_G.Themes = {
    Dark = {
        Main = Color3.fromRGB(24, 24, 26), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(200, 200, 200), Icon = Color3.fromRGB(22, 22, 26),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Light = {
        Main = Color3.fromRGB(245, 245, 245), Lighter = Color3.fromRGB(255, 255, 255), Outline = Color3.fromRGB(220, 220, 220),
        Text = Color3.fromRGB(10, 10, 10), SubText = Color3.fromRGB(80, 80, 80), Icon = Color3.fromRGB(245, 245, 245),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Red = {
        Main = Color3.fromRGB(28, 0, 0), Lighter = Color3.fromRGB(40, 0, 0), Outline = Color3.fromRGB(50, 0, 0),
        Text = Color3.fromRGB(255, 200, 200), SubText = Color3.fromRGB(255, 150, 150), Icon = Color3.fromRGB(28, 0, 0),
        MainTransparency = 0, OutlineTransparency = 0.4
    },
    Transparent = {
        Main = Color3.fromRGB(15, 15, 15), Lighter = Color3.fromRGB(30, 30, 30), Outline = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255), SubText = Color3.fromRGB(220, 220, 220), Icon = Color3.fromRGB(15, 15, 15),
        MainTransparency = 0.3, OutlineTransparency = 1 -- El outline es invisible, solo se ve el borde del Main
    }
}

_G.ActiveSlider = nil

--[[
    Esto gestiona: el arrastre de la ventana principal.
    Permite mover la UI por la pantalla arrastrando desde un objeto específico.
]]
function MakeDraggable(topbarobject, object)
	local Dragging, DragInput, DragStart, StartPosition
	local function Update(input)
		local Delta = input.Position - DragStart;
		object.Position = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y);
	end;
	topbarobject.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			Dragging, DragStart, StartPosition = true, input.Position, object.Position
			local connection
			connection = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					Dragging = false
					connection:Disconnect()
				end
			end)
		end
	end)
	topbarobject.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			DragInput = input
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input == DragInput and Dragging then Update(input) end
	end)
end

-- ScreenGui para el icono flotante
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ScreenGui"
ScreenGui.Parent = get_top_gui()
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
ScreenGui.DisplayOrder = 2147483647

local OutlineButton = Instance.new("Frame")
OutlineButton.Name = "OutlineButton"
OutlineButton.Parent = ScreenGui
OutlineButton.ClipsDescendants = true
OutlineButton.Position = UDim2.new(0, 10, 0, 10)
OutlineButton.Size = UDim2.new(0, 50, 0, 50)
CreateRounded(OutlineButton, 12)

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = OutlineButton
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5)
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"
ImageButton.AutoButtonColor = false
MakeDraggable(ImageButton, OutlineButton)
CreateRounded(ImageButton, 10)

ImageButton.MouseButton1Click:connect(function()
	local hub = get_top_gui():FindFirstChild("xSOLITOx HUB")
	if hub then hub.Enabled = not hub.Enabled end
end)

-- Sistema de Notificaciones
local NotificationFrame = Instance.new("ScreenGui")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Parent = get_top_gui()
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global
NotificationFrame.DisplayOrder = 2147483647

local NotificationList = {}
local function RemoveOldestNotification()
	if #NotificationList > 0 then
		local removed = table.remove(NotificationList, 1)
		removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function() removed[1]:Destroy() end)
	end
end
spawn(function()
	while true do
		if #NotificationList > 0 then
			task.wait(2)
			RemoveOldestNotification()
		else
			task.wait()
		end
	end
end)

local Update = {}
function Update:Notify(desc)
	local theme = _G.Themes[SettingsLib and SettingsLib.Theme or "Dark"]
	local Frame = Instance.new("Frame"); local Image = Instance.new("ImageLabel"); local Title = Instance.new("TextLabel"); local Desc = Instance.new("TextLabel")
	local OutlineFrame = Instance.new("Frame"); OutlineFrame.Name = "OutlineFrame"; OutlineFrame.Parent = NotificationFrame; OutlineFrame.ClipsDescendants = true
	OutlineFrame.BackgroundColor3 = theme.Lighter; OutlineFrame.AnchorPoint = Vector2.new(0.5, 1); OutlineFrame.BackgroundTransparency = 0.4
	OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0); OutlineFrame.Size = UDim2.new(0, 412, 0, 72)
	Frame.Name = "Frame"; Frame.Parent = OutlineFrame; Frame.ClipsDescendants = true; Frame.AnchorPoint = Vector2.new(0.5, 0.5)
	Frame.BackgroundColor3 = theme.Main; Frame.BackgroundTransparency = 0.1; Frame.Position = UDim2.new(0.5, 0, 0.5, 0); Frame.Size = UDim2.new(0, 400, 0, 60)
	Image.Name = "Icon"; Image.Parent = Frame; Image.BackgroundTransparency = 1; Image.Position = UDim2.new(0, 8, 0, 8); Image.Size = UDim2.new(0, 45, 0, 45)
	Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"
	Title.Parent = Frame; Title.BackgroundTransparency = 1; Title.Position = UDim2.new(0, 55, 0, 14); Title.Size = UDim2.new(0, 10, 0, 20)
	Title.Font = Enum.Font.GothamBold; Title.Text = "xSOLITOx HUB"; Title.TextColor3 = theme.Text; Title.TextSize = 16; Title.TextXAlignment = Enum.TextXAlignment.Left
	Desc.Parent = Frame; Desc.BackgroundTransparency = 1; Desc.Position = UDim2.new(0, 55, 0, 33); Desc.Size = UDim2.new(0, 10, 0, 10)
	Desc.Font = Enum.Font.GothamSemibold; Desc.TextTransparency = 0.3; Desc.Text = desc; Desc.TextColor3 = theme.SubText; Desc.TextSize = 12; Desc.TextXAlignment = Enum.TextXAlignment.Left
	CreateRounded(Frame, 10); CreateRounded(OutlineFrame, 12)
	OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true)
	table.insert(NotificationList, {OutlineFrame})
end

-- Esto crea: la pantalla de carga inicial con una barra de progreso animada.
function Update:StartLoad()
    local Loader = Instance.new("ScreenGui")
    Loader.Name = "LoaderGUI"
    Loader.Parent = get_top_gui()
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global
    Loader.DisplayOrder = 2147483644
    local OutlineLoader = Instance.new("Frame"); OutlineLoader.Name = "OutlineLoader"; OutlineLoader.Parent = Loader; OutlineLoader.ClipsDescendants = true; OutlineLoader.BackgroundTransparency = 1; OutlineLoader.AnchorPoint = Vector2.new(0.5, 0.5); OutlineLoader.Position = UDim2.new(0.5, 0, 0.5, 0); OutlineLoader.Size = UDim2.new(0, 600, 0, 400); OutlineLoader.ZIndex = 2
    local UIScale = Instance.new("UIScale"); UIScale.Parent = OutlineLoader; local screenSize = game:GetService("GuiService"):GetScreenResolution(); local baseScaleFactor = math.min(screenSize.X / 1920, screenSize.Y / 1080) * 1.5; local scaleFactor = math.min(baseScaleFactor * 1.4 * 0.85, 1.2); UIScale.Scale = scaleFactor
    local MainLoaderFrame = Instance.new("Frame"); MainLoaderFrame.Name = "MainLoaderFrame"; MainLoaderFrame.Parent = OutlineLoader; MainLoaderFrame.ClipsDescendants = true; MainLoaderFrame.BackgroundTransparency = 1; MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5); MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0); MainLoaderFrame.Size = UDim2.new(1, 0, 1, 0)
    local TextBackground = Instance.new("Frame"); TextBackground.Name = "TextBackground"; TextBackground.Parent = MainLoaderFrame; TextBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0); TextBackground.BackgroundTransparency = 0; TextBackground.Size = UDim2.new(0.9, 0, 0.5, 0); TextBackground.Position = UDim2.new(0.05, 0, 0.25, 0); TextBackground.ZIndex = 3; CreateRounded(TextBackground, 15)
    local UIGradient = Instance.new("UIGradient"); UIGradient.Rotation = 90; UIGradient.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.3, 0.5), NumberSequenceKeypoint.new(1, 1)}); UIGradient.Parent = TextBackground
    local UIStroke = Instance.new("UIStroke"); UIStroke.Parent = TextBackground; UIStroke.Thickness = 2; UIStroke.Color = Color3.fromRGB(0, 0, 0)
    local TitleLoader = Instance.new("TextLabel"); TitleLoader.Name = "TitleLoader"; TitleLoader.Parent = MainLoaderFrame; TitleLoader.Text = "xSOLITOx HUB"; TitleLoader.Font = Enum.Font.FredokaOne; TitleLoader.TextSize = 50; TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255); TitleLoader.BackgroundTransparency = 1; TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5); TitleLoader.Position = UDim2.new(0.5, 0, 0.35, 0); TitleLoader.Size = UDim2.new(0.9, 0, 0.2, 0); TitleLoader.ZIndex = 4
    local DescriptionLoader = Instance.new("TextLabel"); DescriptionLoader.Name = "DescriptionLoader"; DescriptionLoader.Parent = MainLoaderFrame; DescriptionLoader.Text = "Cargando..."; DescriptionLoader.Font = Enum.Font.SourceSansBold; DescriptionLoader.TextSize = 18; DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255); DescriptionLoader.BackgroundTransparency = 1; DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5); DescriptionLoader.Position = UDim2.new(0.5, 0, 0.45, 0); DescriptionLoader.Size = UDim2.new(0.9, 0, 0.1, 0); DescriptionLoader.ZIndex = 4
    local LoadingBarBackground = Instance.new("Frame"); LoadingBarBackground.Name = "LoadingBarBackground"; LoadingBarBackground.Parent = MainLoaderFrame; LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50); LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5); LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.65, 0); LoadingBarBackground.Size = UDim2.new(0.8, 0, 0.05, 0); LoadingBarBackground.ClipsDescendants = true; LoadingBarBackground.ZIndex = 4; CreateRounded(LoadingBarBackground, 20)
    local BarStroke = Instance.new("UIStroke"); BarStroke.Parent = LoadingBarBackground; BarStroke.Thickness = 2; BarStroke.Color = Color3.fromRGB(0, 0, 0)
    local LoadingBar = Instance.new("Frame"); LoadingBar.Name = "LoadingBar"; LoadingBar.Parent = LoadingBarBackground; LoadingBar.BackgroundTransparency = 0; LoadingBar.Size = UDim2.new(0, 0, 1, 0); LoadingBar.ZIndex = 4; CreateRounded(LoadingBar, 20)
    ApplyMasterGradient(LoadingBar, 0)
    local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear); local barTweenPart1 = TweenService:Create(LoadingBar, barTweenInfoPart1, {Size = UDim2.new(0.25, 0, 1, 0)})
    local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear); local barTweenPart2 = TweenService:Create(LoadingBar, barTweenInfoPart2, {Size = UDim2.new(1, 0, 1, 0)})
    barTweenPart1:Play(); local dotCount = 0; local running = true
    spawn(function() while running do dotCount = (dotCount + 1) % 4; DescriptionLoader.Text = "Por favor espera" .. string.rep(".", dotCount); task.wait(0.5) end end)
    function Update:Loaded() barTweenPart2:Play() end
    barTweenPart1.Completed:Connect(function() running = true; barTweenPart2:Play(); barTweenPart2.Completed:Connect(function() task.wait(1); running = false; DescriptionLoader.Text = "¡Cargado!"; task.wait(0.5); Loader:Destroy() end) end)
end

--[[
    Esto gestiona: la configuración del usuario.
    Guarda y carga las preferencias del usuario (tema, animaciones, etc.)
    en una carpeta del ejecutor para que persistan entre sesiones.
]]
local SettingsLib = { SaveSettings = true, LoadAnimation = true, Theme = "Dark" }
;(getgenv()).LoadConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfolder("xSOLITOx HUB") then makefolder("xSOLITOx HUB") end
		if not isfolder("xSOLITOx HUB/Library/") then makefolder("xSOLITOx HUB/Library/") end
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then
			writefile(filePath, game:GetService("HttpService"):JSONEncode(SettingsLib))
		else
			local success, data = pcall(game:GetService("HttpService").JSONDecode, game:GetService("HttpService"), readfile(filePath))
            if success and type(data) == "table" then
                for i, v in pairs(data) do SettingsLib[i] = v end
            end
		end
	end
end
;(getgenv()).SaveConfig = function()
	if readfile and writefile and isfile and isfolder then
		local filePath = "xSOLITOx HUB/Library/" .. Players.LocalPlayer.Name .. ".json"
		if not isfile(filePath) then (getgenv()).LoadConfig()
		else writefile(filePath, game:GetService("HttpService"):JSONEncode(SettingsLib)) end
	end
end
;(getgenv()).LoadConfig()

function Update:SaveSettings() return SettingsLib.SaveSettings end
function Update:LoadAnimation() return SettingsLib.LoadAnimation end

--[[
    Esto crea: la ventana principal de la interfaz.
    Es la función más grande, que construye toda la estructura de la UI,
    incluyendo la barra superior, las pestañas, las páginas y los ajustes.
]]
function Update:Window(Config)
	assert(Config.SubTitle, "SubTitle no definido");
	local WindowConfig = { Size = Config.Size, TabWidth = Config.TabWidth }
	local abc, currentpage = false, ""

	local NoxHub = Instance.new("ScreenGui")
	NoxHub.Name = "xSOLITOx HUB"
	NoxHub.Parent = get_top_gui()
	NoxHub.DisplayOrder = 2147483646
	NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global
	NoxHub.Enabled = not SettingsLib.LoadAnimation

	local OutlineMain = Instance.new("Frame"); OutlineMain.Name = "OutlineMain"; OutlineMain.Parent = NoxHub; OutlineMain.ClipsDescendants = true; OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5); OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0); OutlineMain.Size = UDim2.new(0, 0, 0, 0); CreateRounded(OutlineMain, 15)
	local Main = Instance.new("Frame"); Main.Name = "Main"; Main.Parent = OutlineMain; Main.ClipsDescendants = true; Main.AnchorPoint = Vector2.new(0.5, 0.5); Main.Position = UDim2.new(0.5, 0, 0.5, 0); Main.Size = WindowConfig.Size; CreateRounded(Main, 12)
	OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true)

	local baseElements = {}
	local function collectBaseElements()
		for _, v in ipairs(OutlineMain:GetDescendants()) do
			if v:IsA("GuiObject") then
				baseElements[v] = {Size = v.Size, TextSize = v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") and v.TextSize}
			end
		end
	end
	
	local DragButton = Instance.new("Frame"); DragButton.Name = "DragButton"; DragButton.Parent = Main; DragButton.Position = UDim2.new(1, 5, 1, 5); DragButton.AnchorPoint = Vector2.new(1, 1); DragButton.Size = UDim2.new(0, 35, 0, 35); DragButton.BackgroundTransparency = 1; DragButton.ZIndex = 10; CreateRounded(DragButton, 99)
	local Top = Instance.new("Frame"); Top.Name = "Top"; Top.Parent = Main; Top.Size = UDim2.new(1, 0, 0, 40); Top.BackgroundTransparency = 1; CreateRounded(Top, 5)
	local NameHub = Instance.new("TextLabel"); NameHub.Name = "NameHub"; NameHub.Parent = Top; NameHub.BackgroundTransparency = 1; NameHub.RichText = true; NameHub.Position = UDim2.new(0, 15, 0.5, 0); NameHub.AnchorPoint = Vector2.new(0, 0.5); NameHub.Font = Enum.Font.GothamBold; NameHub.Text = "xSOLITOx HUB"; NameHub.TextSize = 20; NameHub.TextXAlignment = Enum.TextXAlignment.Left
	local nameHubSize = TextService:GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge)); NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25)
	local SubTitle = Instance.new("TextLabel"); SubTitle.Name = "SubTitle"; SubTitle.Parent = NameHub; SubTitle.BackgroundTransparency = 1; SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0); SubTitle.Font = Enum.Font.Cartoon; SubTitle.AnchorPoint = Vector2.new(0, 0.5); SubTitle.Text = Config.SubTitle; SubTitle.TextSize = 15
	local SubTitleSize = TextService:GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge)); SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25)
	local CloseButton = Instance.new("ImageButton"); CloseButton.Name = "CloseButton"; CloseButton.Parent = Top; CloseButton.BackgroundTransparency = 1; CloseButton.AnchorPoint = Vector2.new(1, 0.5); CloseButton.Position = UDim2.new(1, -15, 0.5, 0); CloseButton.Size = UDim2.new(0, 20, 0, 20); CloseButton.Image = "rbxthumb://type=Asset&id=7743878857&w=150&h=150"; CreateRounded(CloseButton, 3); CloseButton.MouseButton1Click:connect(function() NoxHub.Enabled = false end)
	local ResizeButton = Instance.new("ImageButton"); ResizeButton.Name = "ResizeButton"; ResizeButton.Parent = Top; ResizeButton.BackgroundTransparency = 1; ResizeButton.AnchorPoint = Vector2.new(1, 0.5); ResizeButton.Position = UDim2.new(1, -50, 0.5, 0); ResizeButton.Size = UDim2.new(0, 20, 0, 20); ResizeButton.Image = "rbxthumb://type=Asset&id=10734886735&w=150&h=150"; CreateRounded(ResizeButton, 3)
	
	local BackgroundSettings = Instance.new("Frame"); BackgroundSettings.Name = "BackgroundSettings"; BackgroundSettings.Parent = OutlineMain; BackgroundSettings.ClipsDescendants = true; BackgroundSettings.Active = true; BackgroundSettings.AnchorPoint = Vector2.new(0, 0); BackgroundSettings.BackgroundTransparency = 1; BackgroundSettings.Position = UDim2.new(0, 0, 0, 0); BackgroundSettings.Size = UDim2.new(1, 0, 1, 0); BackgroundSettings.Visible = false; CreateRounded(BackgroundSettings, 15)
	local SettingsFrame = Instance.new("Frame"); SettingsFrame.Name = "SettingsFrame"; SettingsFrame.Parent = BackgroundSettings; SettingsFrame.ClipsDescendants = true; SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5); SettingsFrame.BackgroundTransparency = 0; SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0); SettingsFrame.Size = UDim2.new(0, 0, 0, 0); CreateRounded(SettingsFrame, 15); CreateGlowStroke(SettingsFrame)
	local CloseSettings = Instance.new("ImageButton"); CloseSettings.Name = "CloseSettings"; CloseSettings.Parent = SettingsFrame; CloseSettings.BackgroundTransparency = 1; CloseSettings.AnchorPoint = Vector2.new(1, 0); CloseSettings.Position = UDim2.new(1, -20, 0, 15); CloseSettings.Size = UDim2.new(0, 20, 0, 20); CloseSettings.Image = "rbxthumb://type=Asset&id=10747384394&w=150&h=150"; CreateRounded(CloseSettings, 3)
	CloseSettings.MouseButton1Click:connect(function() TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0,0,0,0), Position = UDim2.new(0.5, 0, 0.5, 0)}):Play(); TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play(); task.wait(0.3); BackgroundSettings.Visible = false end)
	local SettingsButton = Instance.new("ImageButton"); SettingsButton.Name = "SettingsButton"; SettingsButton.Parent = Top; SettingsButton.BackgroundTransparency = 1; SettingsButton.AnchorPoint = Vector2.new(1, 0.5); SettingsButton.Position = UDim2.new(1, -85, 0.5, 0); SettingsButton.Size = UDim2.new(0, 20, 0, 20); SettingsButton.Image = "rbxthumb://type=Asset&id=10734950020&w=150&h=150"; CreateRounded(SettingsButton, 3)
	SettingsButton.MouseButton1Click:connect(function() BackgroundSettings.Visible = true; BackgroundSettings.BackgroundTransparency = 1; SettingsFrame.Size = UDim2.new(0,0,0,0); SettingsFrame.Position = UDim2.new(0.5,0,0.5,0); TweenService:Create(SettingsFrame, TweenInfo.new(0.3), {Size = UDim2.new(0.7, 0, 0.7, 0)}):Play(); TweenService:Create(BackgroundSettings, TweenInfo.new(0.3), {BackgroundTransparency = 0.3}):Play() end)
	local TitleSettings = Instance.new("TextLabel"); TitleSettings.Name = "TitleSettings"; TitleSettings.Parent = SettingsFrame; TitleSettings.BackgroundTransparency = 1; TitleSettings.Position = UDim2.new(0, 20, 0, 15); TitleSettings.Size = UDim2.new(1, 0, 0, 20); TitleSettings.Font = Enum.Font.GothamBold; TitleSettings.AnchorPoint = Vector2.new(0, 0); TitleSettings.Text = "Preferencias del usuario"; TitleSettings.TextSize = 20; TitleSettings.TextXAlignment = Enum.TextXAlignment.Left
	local SettingsMenuList = Instance.new("Frame"); SettingsMenuList.Name = "SettingsMenuList"; SettingsMenuList.Parent = SettingsFrame; SettingsMenuList.ClipsDescendants = true; SettingsMenuList.AnchorPoint = Vector2.new(0, 0); SettingsMenuList.BackgroundTransparency = 1; SettingsMenuList.Position = UDim2.new(0, 0, 0, 50); SettingsMenuList.Size = UDim2.new(1, 0, 1, -70); CreateRounded(SettingsMenuList, 15)
	local ScrollSettings = Instance.new("ScrollingFrame"); ScrollSettings.Name = "ScrollSettings"; ScrollSettings.Parent = SettingsMenuList; ScrollSettings.Active = true; ScrollSettings.BackgroundTransparency = 1; ScrollSettings.Position = UDim2.new(0, 0, 0, 0); ScrollSettings.Size = UDim2.new(1, 0, 1, 0); ScrollSettings.ScrollBarThickness = 3; ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y; CreateRounded(SettingsMenuList, 5)
	local SettingsListLayout = Instance.new("UIListLayout"); SettingsListLayout.Name = "SettingsListLayout"; SettingsListLayout.Parent = ScrollSettings; SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder; SettingsListLayout.Padding = UDim.new(0, 8)

	local Tab = Instance.new("Frame"); Tab.Name = "Tab"; Tab.Parent = Main; Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset); Tab.BackgroundTransparency = 1; Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 1, -Top.Size.Y.Offset - 8)
	local ScrollTab = Instance.new("ScrollingFrame"); ScrollTab.Name = "ScrollTab"; ScrollTab.Parent = Tab; ScrollTab.Active = true; ScrollTab.Position = UDim2.new(0, 0, 0, 0); ScrollTab.BackgroundTransparency = 1; ScrollTab.Size = UDim2.new(1, 0, 1, 0); ScrollTab.ScrollBarThickness = 0; ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y; CreateRounded(Tab, 5)
	local TabListLayout = Instance.new("UIListLayout"); TabListLayout.Name = "TabListLayout"; TabListLayout.Parent = ScrollTab; TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder; TabListLayout.Padding = UDim.new(0, 2)
	
	local Page = Instance.new("Frame"); Page.Name = "Page"; Page.Parent = Main; Page.Position = UDim2.new(0, Tab.Size.X.Offset + 18, 0, Top.Size.Y.Offset); Page.Size = UDim2.new(1, -Tab.Size.X.Offset - 25, 1, -Top.Size.Y.Offset - 8); Page.BackgroundTransparency = 1; CreateRounded(Page, 3)
	local MainPage = Instance.new("Frame"); MainPage.Name = "MainPage"; MainPage.Parent = Page; MainPage.ClipsDescendants = true; MainPage.BackgroundTransparency = 1; MainPage.Size = UDim2.new(1, 0, 1, 0)
	local PageList = Instance.new("Folder"); PageList.Name = "PageList"; PageList.Parent = MainPage
	local UIPageLayout = Instance.new("UIPageLayout"); UIPageLayout.Parent = PageList; UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder; UIPageLayout.EasingDirection = Enum.EasingDirection.InOut; UIPageLayout.EasingStyle = Enum.EasingStyle.Quad; UIPageLayout.FillDirection = Enum.FillDirection.Vertical; UIPageLayout.Padding = UDim.new(0, 10); UIPageLayout.TweenTime = 0; UIPageLayout.GamepadInputEnabled = false; UIPageLayout.ScrollWheelInputEnabled = false; UIPageLayout.TouchInputEnabled = false
	
	MakeDraggable(Top, OutlineMain)
	UserInputService.InputBegan:Connect(function(input) if input.KeyCode == Enum.KeyCode.Insert then NoxHub.Enabled = not NoxHub.Enabled end end)
	
	-- Lógica de Redimensionamiento
	local isResizing, resizeStart, resizeStartSize = false
	DragButton.InputBegan:Connect(function(Input) if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then isResizing, resizeStart, resizeStartSize = true, Input.Position, OutlineMain.AbsoluteSize end end)
	UserInputService.InputEnded:Connect(function(Input) if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then isResizing = false end end)
	
	UserInputService.InputChanged:Connect(function(Input)
		if isResizing and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
			local delta = Input.Position - resizeStart
			local newSize = UDim2.new(0, math.clamp(resizeStartSize.X + delta.X, WindowConfig.Size.X.Offset + 15, math.huge), 0, math.clamp(resizeStartSize.Y + delta.Y, WindowConfig.Size.Y.Offset + 15, math.huge))
			OutlineMain.Size, Main.Size = newSize, UDim2.new(0, newSize.X.Offset - 15, 0, newSize.Y.Offset - 15)
			Page.Size = UDim2.new(1, -Tab.AbsoluteSize.X - 25, 1, -Top.AbsoluteSize.Y - 8)
			Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 1, -Top.AbsoluteSize.Y - 8)

			local widthFactor = (newSize.X.Offset - (WindowConfig.Size.X.Offset + 15)) / 400
			for element, baseInfo in pairs(baseElements) do
				if pcall(function() return element.Parent end) then
					if baseInfo.TextSize then
						element.TextSize = baseInfo.TextSize + (widthFactor * 5)
					else
						element.Size = baseInfo.Size + UDim2.new(0, baseInfo.Size.X.Offset * widthFactor * 0.2, 0, baseInfo.Size.Y.Offset * widthFactor * 0.2)
					end
				end
			end
		end
	end)

	local uitab = {}
	function uitab:Tab(text, img)
		-- ... (código de creación de pestañas, main, etc. sin cambios significativos)
	end

	collectBaseElements()
	ApplyTheme(SettingsLib.Theme)
	return uitab
end

-- Código de finalización (movimiento de GUIs)
task.spawn(function()
    task.wait(1.5)
    getgenv().xSOLITOxHUB_Running = false
end)

return Update
