-- =========================================================
-- LIBRERÍA xSOLITOx HUB - VERSIÓN FINAL REESTRUCTURADA
-- Por: xSOLITOx | Asistente de IA
-- Fecha: 16/08/2025
-- Descripción: Librería de UI completamente renovada con un
-- sistema de temas, componentes mejorados y funcionalidades
-- avanzadas para una experiencia de usuario superior.
-- =========================================================

--[[
	Obtiene el contenedor de GUI de máxima prioridad.
	Esto asegura que la interfaz se renderice por encima de
	las interfaces del juego base (como el chat, etc.).
]]
local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

-- =========================================================
-- DECLARACIÓN DE SERVICIOS Y VARIABLES GLOBALES
-- =========================================================
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local CoreGui = get_top_gui()
local LocalPlayer = Players.LocalPlayer

-- Variable global para evitar que múltiples sliders se activen al mismo tiempo
_G.ActiveSlider = nil

-- =========================================================
-- SISTEMA DE TEMAS
-- =========================================================
--[[
	Define los colores para todos los temas disponibles en la UI.
	Cada tema tiene propiedades para fondos, textos y elementos de acento.
	El tema "Transparente" tiene una bandera especial para un comportamiento único.
]]
_G.Themes = {
    ["Oscuro"] = {
        Base = Color3.fromRGB(24, 24, 26),
        Content = Color3.fromRGB(30, 30, 35),
        Lighter = Color3.fromRGB(50, 50, 55),
        Shadow = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(180, 180, 180),
        IsTransparent = false
    },
    ["Blanco"] = {
        Base = Color3.fromRGB(245, 245, 245),
        Content = Color3.fromRGB(255, 255, 255),
        Lighter = Color3.fromRGB(230, 230, 230),
        Shadow = Color3.fromRGB(200, 200, 200),
        Text = Color3.fromRGB(10, 10, 10),
        SubText = Color3.fromRGB(100, 100, 100),
        IsTransparent = false
    },
    ["Rojo"] = {
        Base = Color3.fromRGB(40, 10, 15),
        Content = Color3.fromRGB(60, 20, 25),
        Lighter = Color3.fromRGB(80, 30, 35),
        Shadow = Color3.fromRGB(20, 0, 0),
        Text = Color3.fromRGB(255, 220, 220),
        SubText = Color3.fromRGB(200, 170, 170),
        IsTransparent = false
    },
    ["Transparente"] = {
        Base = Color3.fromRGB(15, 15, 18),
        Content = Color3.fromRGB(25, 25, 28),
        Lighter = Color3.fromRGB(40, 40, 45),
        Shadow = Color3.fromRGB(10, 10, 10),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(200, 200, 200),
        IsTransparent = true -- Bandera especial para lógica de transparencia
    }
}
-- Se establece el tema por defecto. El script principal lo sobreescribirá si hay uno guardado.
_G.CurrentTheme = getgenv().SettingsLib and getgenv().SettingsLib.Theme or "Oscuro"


-- =========================================================
-- FUNCIONES DE ESTILO Y UTILIDADES
-- =========================================================

-- [[ Esto crea: El degradado con saturación de azul a rojo ]]
-- Descripción: Esta es la función principal de estilo. Aplica el degradado
-- de colores vibrantes que pediste, extraído del SCRIPT V30.
local function ApplyDefaultGradient(frame)
    if frame:FindFirstChild("DefaultGradient") then return end
    local gradient = Instance.new("UIGradient")
    gradient.Name = "DefaultGradient"
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")),
        ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))
    })
    gradient.Rotation = 45
    gradient.Parent = frame
    return gradient
end

-- [[ Esto crea: Un borde con efecto de resplandor (glow) ]]
-- Descripción: Aplica un borde fino que se desvanece, creando un
-- efecto de neón. Se usa en elementos específicos para destacarlos.
local function ApplyGlowStroke(frame)
    if frame:FindFirstChild("GlowStroke") then return end
    local stroke = Instance.new("UIStroke")
    stroke.Name = "GlowStroke"
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 2.5 -- Un poco más grueso para que resalte
    stroke.LineJoinMode = Enum.LineJoinMode.Round
    stroke.Color = Color3.fromHex("#015EFF")
    stroke.Transparency = 0

    local transparencyGradient = Instance.new("UIGradient")
    transparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2),
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    transparencyGradient.Rotation = 120
    transparencyGradient.Parent = stroke
    stroke.Parent = frame
    return stroke
end

-- [[ Esto crea: Esquinas redondeadas para cualquier elemento ]]
function CreateRounded(Parent, Size)
    local Rounded = Instance.new("UICorner")
    Rounded.Name = "Rounded"
    Rounded.Parent = Parent
    Rounded.CornerRadius = UDim.new(0, Size)
end

-- [[ Esto permite: Arrastrar un objeto por la pantalla ]]
function MakeDraggable(topbarobject, object)
    local Dragging, DragInput, DragStart, StartPosition
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), { Position = pos })
        Tween:Play()
    end
    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position
            input.Changed:Connect(function()
                if input.UserState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
end

-- =========================================================
-- LIMPIEZA INICIAL DE LA LIBRERÍA
-- =========================================================
--[[
    Se asegura de que no haya versiones antiguas de la UI
    al momento de ejecutar el script, evitando duplicados.
]]
if CoreGui:FindFirstChild("xSOLITOx HUB") then
    CoreGui["xSOLITOx HUB"]:Destroy()
end
if CoreGui:FindFirstChild("FloatingIconGUI") then
    CoreGui.FloatingIconGUI:Destroy()
end
if CoreGui:FindFirstChild("NotificationFrame") then
	CoreGui.NotificationFrame:Destroy()
end

-- =========================================================
-- CREACIÓN DEL ICONO FLOTANTE
-- =========================================================
local FloatingIconGUI = Instance.new("ScreenGui")
FloatingIconGUI.Name = "FloatingIconGUI"
FloatingIconGUI.Parent = CoreGui
FloatingIconGUI.ZIndexBehavior = Enum.ZIndexBehavior.Global
FloatingIconGUI.DisplayOrder = 2147483647

local OutlineButton = Instance.new("Frame")
OutlineButton.Name = "OutlineButton"
OutlineButton.Parent = FloatingIconGUI
OutlineButton.ClipsDescendants = true
OutlineButton.BackgroundColor3 = _G.Themes[_G.CurrentTheme].Shadow
OutlineButton.BackgroundTransparency = 0
OutlineButton.Position = UDim2.new(0, 10, 0, 10)
OutlineButton.Size = UDim2.new(0, 50, 0, 50)
CreateRounded(OutlineButton, 12)

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = OutlineButton
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5)
ImageButton.BackgroundColor3 = _G.Themes[_G.CurrentTheme].Base
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250)
ImageButton.ImageTransparency = 0
ImageButton.BackgroundTransparency = 0
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"
ImageButton.AutoButtonColor = false
MakeDraggable(ImageButton, OutlineButton)
CreateRounded(ImageButton, 10)

ImageButton.MouseButton1Click:connect(function()
    local hub = CoreGui:FindFirstChild("xSOLITOx HUB")
    if hub then
        hub.Enabled = not hub.Enabled
    end
end)


-- =========================================================
-- SISTEMA DE NOTIFICACIONES
-- =========================================================
local NotificationFrame = Instance.new("ScreenGui")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Parent = CoreGui
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global
NotificationFrame.DisplayOrder = 2147483647

local NotificationList = {}
local function RemoveOldestNotification()
    if #NotificationList > 0 then
        local removed = table.remove(NotificationList, 1)
        removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
            removed[1]:Destroy()
        end)
    end
end

spawn(function()
    while wait() do
        if #NotificationList > 0 then
            wait(2)
            RemoveOldestNotification()
        end
    end
end)

local Update = {}

function Update:Notify(desc)
    local theme = _G.Themes[_G.CurrentTheme]
    local OutlineFrame = Instance.new("Frame")
    OutlineFrame.Name = "OutlineFrame"
    OutlineFrame.Parent = NotificationFrame
    OutlineFrame.ClipsDescendants = true
    OutlineFrame.BackgroundColor3 = theme.Shadow
    OutlineFrame.AnchorPoint = Vector2.new(0.5, 1)
    OutlineFrame.BackgroundTransparency = 0.4
    OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0)
    OutlineFrame.Size = UDim2.new(0, 412, 0, 72)

    local Frame = Instance.new("Frame")
    Frame.Name = "Frame"
    Frame.Parent = OutlineFrame
    Frame.ClipsDescendants = true
    Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    Frame.BackgroundColor3 = theme.Base
    Frame.BackgroundTransparency = 0.1
    Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Frame.Size = UDim2.new(0, 400, 0, 60)

    local Image = Instance.new("ImageLabel")
    Image.Name = "Icon"
    Image.Parent = Frame
    Image.BackgroundTransparency = 1
    Image.Position = UDim2.new(0, 8, 0, 8)
    Image.Size = UDim2.new(0, 45, 0, 45)
    Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"

    local Title = Instance.new("TextLabel")
    Title.Parent = Frame
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 55, 0, 14)
    Title.Size = UDim2.new(0, 200, 0, 20)
    Title.Font = Enum.Font.GothamBold
    Title.Text = "xSOLITOx HUB"
    Title.TextColor3 = theme.Text
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left

    local Desc = Instance.new("TextLabel")
    Desc.Parent = Frame
    Desc.BackgroundTransparency = 1
    Desc.Position = UDim2.new(0, 55, 0, 33)
    Desc.Size = UDim2.new(0, 300, 0, 12)
    Desc.Font = Enum.Font.GothamSemibold
    Desc.Text = desc
    Desc.TextColor3 = theme.SubText
    Desc.TextSize = 12
    Desc.TextXAlignment = Enum.TextXAlignment.Left

    CreateRounded(Frame, 10)
    CreateRounded(OutlineFrame, 12)
    OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true)
    table.insert(NotificationList, { OutlineFrame, Title })
end

-- =========================================================
-- PANTALLA DE CARGA
-- =========================================================
function Update:StartLoad()
    local theme = _G.Themes[_G.CurrentTheme]
    local Loader = Instance.new("ScreenGui")
    Loader.Parent = CoreGui
    Loader.Name = "LoaderGUI"
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global
    Loader.DisplayOrder = 2147483647

    local LoaderFrame = Instance.new("Frame")
    LoaderFrame.Name = "LoaderFrame"
    LoaderFrame.Parent = Loader
    LoaderFrame.BackgroundColor3 = theme.Shadow
    LoaderFrame.BackgroundTransparency = 0
    LoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    LoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    LoaderFrame.Size = UDim2.new(1.5, 0, 1.5, 0)

    local MainLoaderFrame = Instance.new("Frame")
    MainLoaderFrame.Name = "MainLoaderFrame"
    MainLoaderFrame.Parent = LoaderFrame
    MainLoaderFrame.BackgroundColor3 = theme.Base
    MainLoaderFrame.BackgroundTransparency = 0
    MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainLoaderFrame.Size = UDim2.new(0.5, 0, 0.5, 0)

    local TitleLoader = Instance.new("TextLabel")
    TitleLoader.Parent = MainLoaderFrame
    TitleLoader.Text = "xSOLITOx HUB"
    TitleLoader.Font = Enum.Font.FredokaOne
    TitleLoader.TextSize = 50
    TitleLoader.TextColor3 = theme.Text
    TitleLoader.BackgroundTransparency = 1
    TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0)
    TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0)

    local DescriptionLoader = Instance.new("TextLabel")
    DescriptionLoader.Parent = MainLoaderFrame
    DescriptionLoader.Text = "Cargando..."
    DescriptionLoader.Font = Enum.Font.Gotham
    DescriptionLoader.TextSize = 15
    DescriptionLoader.TextColor3 = theme.Text
    DescriptionLoader.BackgroundTransparency = 1
    DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0)
    DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0)

    local LoadingBarBackground = Instance.new("Frame")
    LoadingBarBackground.Parent = MainLoaderFrame
    LoadingBarBackground.BackgroundColor3 = theme.Lighter
    LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5)
    LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0)
    LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0)
    LoadingBarBackground.ClipsDescendants = true
    LoadingBarBackground.ZIndex = 2
    CreateRounded(LoadingBarBackground, 20)

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Parent = LoadingBarBackground
    LoadingBar.BackgroundTransparency = 0
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.ZIndex = 3
    ApplyDefaultGradient(LoadingBar)
    CreateRounded(LoadingBar, 20)

    local dotCount = 0
    local running = true
    local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
    local barTweenPart1 = TweenService:Create(LoadingBar, barTweenInfoPart1, { Size = UDim2.new(0.25, 0, 1, 0) })
    local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear)
    local barTweenPart2 = TweenService:Create(LoadingBar, barTweenInfoPart2, { Size = UDim2.new(1, 0, 1, 0) })
    
    barTweenPart1:Play()

    function Update:Loaded()
        barTweenPart2:Play()
    end

    barTweenPart1.Completed:Connect(function()
        running = true
        barTweenPart2.Completed:Connect(function()
            wait(1)
            running = false
            DescriptionLoader.Text = "¡Cargado!"
            wait(0.5)
            Loader:Destroy()
        end)
    end)

    spawn(function()
        while running do
            dotCount = (dotCount + 1) % 4
            local dots = string.rep(".", dotCount)
            DescriptionLoader.Text = "Por favor espera" .. dots
            wait(0.5)
        end
    end)
end

-- =========================================================
-- MANEJO DE CONFIGURACIÓN
-- =========================================================
--[[
    Estas funciones se encargan de guardar y cargar las preferencias
    del usuario en una carpeta dentro de su ejecutor.
]]
function Update:SaveSettings()
    return getgenv().SettingsLib.SaveSettings
end

function Update:LoadAnimation()
    return getgenv().SettingsLib.LoadAnimation
end


-- =========================================================
-- CONSTRUCCIÓN DE LA VENTANA PRINCIPAL
-- =========================================================
function Update:Window(Config)
    -- Configuración por defecto de la ventana
    local WindowConfig = {
        Size = Config.Size or UDim2.new(0, 700, 0, 450),
        TabWidth = Config.TabWidth or 180
    }
    
    local NoxHub = Instance.new("ScreenGui")
    NoxHub.Name = "xSOLITOx HUB"
    NoxHub.Parent = CoreGui
    NoxHub.DisplayOrder = 2147483646
    NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global
    NoxHub.Enabled = false -- Inicia oculta hasta que la precarga termine

    local OutlineMain = Instance.new("Frame")
    OutlineMain.Name = "OutlineMain"
    OutlineMain.Parent = NoxHub
    OutlineMain.ClipsDescendants = false -- Permite que el borde sobresalga
    OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5)
    OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0)
    OutlineMain.Size = UDim2.new(0, 0, 0, 0) -- Inicia en 0 para la animación de entrada
    CreateRounded(OutlineMain, 15)

    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = OutlineMain
    Main.ClipsDescendants = true
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(1, -16, 1, -16)
    CreateRounded(Main, 12)

    -- Animación de entrada
    OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 16, 0, WindowConfig.Size.Y.Offset + 16), "Out", "Quad", 0.4, true)
    
    -- [[ Zona de Redimensionamiento ]]
    -- Descripción: Marcos invisibles en los bordes para facilitar
    -- el redimensionamiento de la interfaz sin tener que buscar una esquina pequeña.
    local rightResizeHandle = Instance.new("Frame")
    rightResizeHandle.Parent = OutlineMain
    rightResizeHandle.Name = "RightResizeHandle"
    rightResizeHandle.BackgroundTransparency = 1
    rightResizeHandle.Size = UDim2.new(0, 20, 1, -20)
    rightResizeHandle.Position = UDim2.new(1, 0, 0.5, 0)
    rightResizeHandle.AnchorPoint = Vector2.new(1, 0.5)
    rightResizeHandle.ZIndex = 100
    
    local bottomResizeHandle = Instance.new("Frame")
    bottomResizeHandle.Parent = OutlineMain
    bottomResizeHandle.Name = "BottomResizeHandle"
    bottomResizeHandle.BackgroundTransparency = 1
    bottomResizeHandle.Size = UDim2.new(1, -20, 0, 20)
    bottomResizeHandle.Position = UDim2.new(0.5, 0, 1, 0)
    bottomResizeHandle.AnchorPoint = Vector2.new(0.5, 1)
    bottomResizeHandle.ZIndex = 100
    
    local cornerResizeHandle = Instance.new("Frame")
    cornerResizeHandle.Parent = OutlineMain
    cornerResizeHandle.Name = "CornerResizeHandle"
    cornerResizeHandle.BackgroundTransparency = 1
    cornerResizeHandle.Size = UDim2.new(0, 20, 0, 20)
    cornerResizeHandle.Position = UDim2.new(1, 0, 1, 0)
    cornerResizeHandle.AnchorPoint = Vector2.new(1, 1)
    cornerResizeHandle.ZIndex = 101
    
    local isResizing = false
    local resizeStartPos, resizeStartSize
    
    local function UpdateResize(input)
        local delta = input.Position - resizeStartPos
        local newSize = resizeStartSize + delta
        local clampedWidth = math.clamp(newSize.X, WindowConfig.Size.X.Offset, 1920)
        local clampedHeight = math.clamp(newSize.Y, WindowConfig.Size.Y.Offset, 1080)
        OutlineMain.Size = UDim2.new(0, clampedWidth + 16, 0, clampedHeight + 16)
    end
    
    local function StartResize(input)
        isResizing = true
        resizeStartPos = input.Position
        resizeStartSize = Main.AbsoluteSize
    end
    
    rightResizeHandle.InputBegan:Connect(StartResize)
    bottomResizeHandle.InputBegan:Connect(StartResize)
    cornerResizeHandle.InputBegan:Connect(StartResize)
    
    UserInputService.InputEnded:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and isResizing then
            isResizing = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isResizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            UpdateResize(input)
        end
    end)
    
    -- Fin de la zona de redimensionamiento

    local Top = Instance.new("Frame")
    Top.Name = "Top"
    Top.Parent = Main
    Top.Size = UDim2.new(1, 0, 0, 40)
    Top.BackgroundTransparency = 1
    CreateRounded(Top, 5)

    local NameHub = Instance.new("TextLabel")
    NameHub.Name = "NameHub"
    NameHub.Parent = Top
    NameHub.BackgroundTransparency = 1
    NameHub.Position = UDim2.new(0, 15, 0.5, 0)
    NameHub.AnchorPoint = Vector2.new(0, 0.5)
    NameHub.Font = Enum.Font.GothamBold
    NameHub.Text = "xSOLITOx HUB"
    NameHub.TextSize = 22 -- Aumentado
    NameHub.TextXAlignment = Enum.TextXAlignment.Left
    local nameHubSize = TextService:GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge))
    NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25)

    local SubTitle = Instance.new("TextLabel")
    SubTitle.Name = "SubTitle"
    SubTitle.Parent = NameHub
    SubTitle.BackgroundTransparency = 1
    SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0)
    SubTitle.Font = Enum.Font.Cartoon
    SubTitle.AnchorPoint = Vector2.new(0, 0.5)
    SubTitle.Text = Config.SubTitle
    SubTitle.TextSize = 17 -- Aumentado
    local SubTitleSize = TextService:GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge))
    SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25)

    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Top
    CloseButton.BackgroundTransparency = 1
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 22, 0, 22) -- Aumentado
    CloseButton.Image = "rbxthumb://type=Asset&id=7743878857&w=150&h=150"
    CloseButton.ImageColor3 = Color3.fromRGB(245, 245, 245)
    CreateRounded(CloseButton, 3)
    CloseButton.MouseButton1Click:connect(function()
        NoxHub.Enabled = not NoxHub.Enabled
    end)

    local ResizeButton = Instance.new("ImageButton")
    ResizeButton.Name = "ResizeButton"
    ResizeButton.Parent = Top
    ResizeButton.BackgroundTransparency = 1
    ResizeButton.AnchorPoint = Vector2.new(1, 0.5)
    ResizeButton.Position = UDim2.new(1, -50, 0.5, 0)
    ResizeButton.Size = UDim2.new(0, 22, 0, 22) -- Aumentado
    ResizeButton.Image = "rbxthumb://type=Asset&id=10734886735&w=150&h=150"
    ResizeButton.ImageColor3 = Color3.fromRGB(245, 245, 245)
    CreateRounded(ResizeButton, 3)
    
    local SettingsButton = Instance.new("ImageButton")
    SettingsButton.Name = "SettingsButton"
    SettingsButton.Parent = Top
    SettingsButton.BackgroundTransparency = 1
    SettingsButton.AnchorPoint = Vector2.new(1, 0.5)
    SettingsButton.Position = UDim2.new(1, -85, 0.5, 0)
    SettingsButton.Size = UDim2.new(0, 22, 0, 22) -- Aumentado
    SettingsButton.Image = "rbxthumb://type=Asset&id=10734950020&w=150&h=150"
    SettingsButton.ImageColor3 = Color3.fromRGB(245, 245, 245)
    CreateRounded(SettingsButton, 3)

    local BackgroundSettings = Instance.new("Frame")
    BackgroundSettings.Name = "BackgroundSettings"
    BackgroundSettings.Parent = OutlineMain
    BackgroundSettings.ClipsDescendants = true
    BackgroundSettings.Active = true
    BackgroundSettings.AnchorPoint = Vector2.new(0, 0)
    BackgroundSettings.BackgroundTransparency = 1
    BackgroundSettings.Position = UDim2.new(0, 0, 0, 0)
    BackgroundSettings.Size = UDim2.new(1, 0, 1, 0)
    BackgroundSettings.Visible = false

    local SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Parent = BackgroundSettings
    SettingsFrame.ClipsDescendants = true
    SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    SettingsFrame.Size = UDim2.new(0, 0, 0, 0)
    CreateRounded(SettingsFrame, 15)
    ApplyGlowStroke(SettingsFrame) -- Aplicando el borde que te gusta

    local CloseSettings = Instance.new("ImageButton")
    CloseSettings.Name = "CloseSettings"
    CloseSettings.Parent = SettingsFrame
    CloseSettings.BackgroundTransparency = 1
    CloseSettings.AnchorPoint = Vector2.new(1, 0)
    CloseSettings.Position = UDim2.new(1, -20, 0, 15)
    CloseSettings.Size = UDim2.new(0, 22, 0, 22)
    CloseSettings.Image = "rbxthumb://type=Asset&id=10747384394&w=150&h=150"
    CloseSettings.ImageColor3 = Color3.fromRGB(245, 245, 245)
    CreateRounded(CloseSettings, 3)
    CloseSettings.MouseButton1Click:connect(function()
        TweenService:Create(SettingsFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 0, 0, 0), Position = UDim2.new(0.5, 0, 0.5, 0) }):Play()
        TweenService:Create(BackgroundSettings, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 1 }):Play()
        task.wait(0.3)
        BackgroundSettings.Visible = false
    end)
    
    SettingsButton.MouseButton1Click:connect(function()
        BackgroundSettings.Visible = true
        BackgroundSettings.BackgroundTransparency = 1
        SettingsFrame.Size = UDim2.new(0, 0, 0, 0)
        SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        TweenService:Create(SettingsFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 400, 0, 300) }):Play()
        TweenService:Create(BackgroundSettings, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0.3 }):Play()
    end)

    local TitleSettings = Instance.new("TextLabel")
    TitleSettings.Name = "TitleSettings"
    TitleSettings.Parent = SettingsFrame
    TitleSettings.BackgroundTransparency = 1
    TitleSettings.Position = UDim2.new(0, 20, 0, 15)
    TitleSettings.Size = UDim2.new(1, -40, 0, 20)
    TitleSettings.Font = Enum.Font.GothamBold
    TitleSettings.AnchorPoint = Vector2.new(0, 0)
    TitleSettings.Text = "Preferencias del Usuario"
    TitleSettings.TextSize = 20
    TitleSettings.TextXAlignment = Enum.TextXAlignment.Left

    local ScrollSettings = Instance.new("ScrollingFrame")
    ScrollSettings.Name = "ScrollSettings"
    ScrollSettings.Parent = SettingsFrame
    ScrollSettings.Active = true
    ScrollSettings.Position = UDim2.new(0.5, 0, 0, 50)
    ScrollSettings.AnchorPoint = Vector2.new(0.5, 0)
    ScrollSettings.BackgroundTransparency = 1
    ScrollSettings.Size = UDim2.new(1, -20, 1, -60)
    ScrollSettings.ScrollBarThickness = 3
    ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y
    
    local SettingsListLayout = Instance.new("UIListLayout")
    SettingsListLayout.Name = "SettingsListLayout"
    SettingsListLayout.Parent = ScrollSettings
    SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SettingsListLayout.Padding = UDim.new(0, 8)
    
    -- [[ Esto crea: Checkboxes de ajustes ]]
    function CreateCheckbox(title, state, callback)
        local checked = state or false
        local Background = Instance.new("Frame")
        Background.Name = "Background"
        Background.Parent = ScrollSettings
        Background.BackgroundTransparency = 1
        Background.Size = UDim2.new(1, 0, 0, 25) -- Más alto
        
        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Parent = Background
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 60, 0.5, 0)
        Title.Size = UDim2.new(1, -60, 0, 25)
        Title.Font = Enum.Font.Gotham
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.Text = title or ""
        Title.TextSize = 16 -- Más grande
        Title.TextXAlignment = Enum.TextXAlignment.Left

        local CheckboxContainer = Instance.new("Frame")
        CheckboxContainer.Name = "CheckboxContainer"
        CheckboxContainer.Parent = Background
        CheckboxContainer.AnchorPoint = Vector2.new(0, 0.5)
        CheckboxContainer.Position = UDim2.new(0, 30, 0.5, 0)
        CheckboxContainer.Size = UDim2.new(0, 20, 0, 20)
        CreateRounded(CheckboxContainer, 5)

        local Checkbox = Instance.new("ImageButton")
        Checkbox.Name = "Checkbox"
        Checkbox.Parent = CheckboxContainer
        Checkbox.BackgroundTransparency = 1
        Checkbox.Size = UDim2.new(1, 0, 1, 0)
        Checkbox.Image = "rbxthumb://type=Asset&id=10709790644&w=150&h=150"
        Checkbox.ImageTransparency = 1
        Checkbox.ImageColor3 = Color3.fromRGB(245, 245, 245)

        local function UpdateStateVisuals()
            if checked then
                Checkbox.ImageTransparency = 0
                ApplyDefaultGradient(CheckboxContainer)
            else
                Checkbox.ImageTransparency = 1
                if CheckboxContainer:FindFirstChild("DefaultGradient") then CheckboxContainer.DefaultGradient:Destroy() end
                CheckboxContainer.BackgroundColor3 = _G.Themes[_G.CurrentTheme].Lighter
            end
        end

        Checkbox.MouseButton1Click:Connect(function()
            checked = not checked
            UpdateStateVisuals()
            pcall(callback, checked)
        end)

        UpdateStateVisuals()
        pcall(callback, checked)
    end

    -- [[ Esto crea: Botones de ajustes ]]
    function CreateSettingsButton(text, callback)
        local Button = Instance.new("TextButton")
        Button.Name = "SettingsButton"
        Button.Parent = ScrollSettings
        Button.BackgroundTransparency = 0
        Button.Size = UDim2.new(1, -20, 0, 35) -- Más alto
        Button.Font = Enum.Font.GothamBold
        Button.Text = text or "Button"
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 16 -- Más grande
        Button.AutoButtonColor = false
        CreateRounded(Button, 5)
        ApplyDefaultGradient(Button)
        Button.MouseButton1Click:Connect(callback)
    end
    
    local Tab = Instance.new("Frame")
    Tab.Name = "Tab"
    Tab.Parent = Main
    Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset)
    Tab.BackgroundTransparency = 1
    Tab.Size = UDim2.new(0, WindowConfig.TabWidth, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8)
    
    local ScrollTab = Instance.new("ScrollingFrame")
    ScrollTab.Name = "ScrollTab"
    ScrollTab.Parent = Tab
    ScrollTab.Active = true
    ScrollTab.Position = UDim2.new(0, 0, 0, 0)
    ScrollTab.BackgroundTransparency = 1
    ScrollTab.Size = UDim2.new(1, 0, 1, 0)
    ScrollTab.ScrollBarThickness = 0
    ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y
    CreateRounded(Tab, 5)

    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.Name = "TabListLayout"
    TabListLayout.Parent = ScrollTab
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 2)

    local Page = Instance.new("Frame")
    Page.Name = "Page"
    Page.Parent = Main
    Page.Position = UDim2.new(0, Tab.Size.X.Offset + 18, 0, Top.Size.Y.Offset)
    Page.Size = UDim2.new(Config.Size.X.Scale, Config.Size.X.Offset - Tab.Size.X.Offset - 25, Config.Size.Y.Scale, Config.Size.Y.Offset - Top.Size.Y.Offset - 8)
    Page.BackgroundTransparency = 1
    CreateRounded(Page, 3)

    local MainPage = Instance.new("Frame")
    MainPage.Name = "MainPage"
    MainPage.Parent = Page
    MainPage.ClipsDescendants = true
    MainPage.BackgroundTransparency = 1
    MainPage.Size = UDim2.new(1, 0, 1, 0)

    local PageList = Instance.new("Folder")
    PageList.Name = "PageList"
    PageList.Parent = MainPage

    local UIPageLayout = Instance.new("UIPageLayout")
    UIPageLayout.Parent = PageList
    UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIPageLayout.EasingDirection = Enum.EasingDirection.InOut
    UIPageLayout.EasingStyle = Enum.EasingStyle.Quad
    UIPageLayout.FillDirection = Enum.FillDirection.Vertical
    UIPageLayout.Padding = UDim.new(0, 10)
    UIPageLayout.TweenTime = 0
    UIPageLayout.GamepadInputEnabled = false
    UIPageLayout.ScrollWheelInputEnabled = false
    UIPageLayout.TouchInputEnabled = false
    
    MakeDraggable(Top, OutlineMain)
    
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then
            NoxHub.Enabled = not NoxHub.Enabled
        end
    end)
    
    local abc = false
    
    local uitab = {}

    function uitab:Tab(text, img)
        local TabButton = Instance.new("TextButton")
        TabButton.Parent = ScrollTab
        TabButton.Name = text .. "Unique"
        TabButton.Text = ""
        TabButton.BackgroundTransparency = 1
        TabButton.Size = UDim2.new(1, 0, 0, 40) -- Más alto
        TabButton.Font = Enum.Font.Nunito
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 12
        
        local Title = Instance.new("TextLabel")
        Title.Parent = TabButton
        Title.Name = "Title"
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 45, 0.5, 0) -- Más espacio para el icono
        Title.Size = UDim2.new(1, -50, 0, 40)
        Title.Font = Enum.Font.Roboto
        Title.Text = text
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.TextSize = 16 -- Más grande
        Title.TextXAlignment = Enum.TextXAlignment.Left

        local Icon = Instance.new("ImageLabel")
        Icon.Name = "Icon"
        Icon.Parent = TabButton
        Icon.BackgroundTransparency = 1
        Icon.Position = UDim2.new(0, 15, 0.5, 0)
        Icon.Size = UDim2.new(0, 24, 0, 24) -- Más grande
        Icon.AnchorPoint = Vector2.new(0.5, 0.5)
        Icon.Image = img or "rbxthumb://type=Asset&id=6031154871&w=200&h=200"
        
        CreateRounded(TabButton, 6)

        local MainFramePage = Instance.new("ScrollingFrame")
        MainFramePage.Name = text .. "_Page"
        MainFramePage.Parent = PageList
        MainFramePage.Active = true
        MainFramePage.BackgroundTransparency = 1
        MainFramePage.Size = UDim2.new(1, 0, 1, 0)
        MainFramePage.ScrollBarThickness = 3
        MainFramePage.ScrollingDirection = Enum.ScrollingDirection.Y
        
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.Padding = UDim.new(0, 5) -- Más espaciado
        UIListLayout.Parent = MainFramePage
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

        TabButton.MouseButton1Click:Connect(function()
            for i, v in next, ScrollTab:GetChildren() do
                if v:IsA("TextButton") then
                    TweenService:Create(v, TweenInfo.new(0.3), { BackgroundTransparency = 1 }):Play()
                    TweenService:Create(v.Title, TweenInfo.new(0.3), { TextColor3 = _G.Themes[_G.CurrentTheme].SubText }):Play()
                    TweenService:Create(v.Icon, TweenInfo.new(0.3), { ImageColor3 = _G.Themes[_G.CurrentTheme].SubText }):Play()
                end
            end
            TweenService:Create(TabButton, TweenInfo.new(0.3), { BackgroundTransparency = 0.8 }):Play()
            TweenService:Create(Title, TweenInfo.new(0.3), { TextColor3 = _G.Themes[_G.CurrentTheme].Text }):Play()
            TweenService:Create(Icon, TweenInfo.new(0.3), { ImageColor3 = _G.Themes[_G.CurrentTheme].Text }):Play()
            
            UIPageLayout:JumpTo(MainFramePage)
        end)
        
        if not abc then
            TweenService:Create(TabButton, TweenInfo.new(0.3), { BackgroundTransparency = 0.8 }):Play()
            TweenService:Create(Title, TweenInfo.new(0.3), { TextColor3 = _G.Themes[_G.CurrentTheme].Text }):Play()
            TweenService:Create(Icon, TweenInfo.new(0.3), { ImageColor3 = _G.Themes[_G.CurrentTheme].Text }):Play()
            UIPageLayout:JumpTo(MainFramePage)
            abc = true
        end

        RunService.Stepped:Connect(function()
            pcall(function()
                MainFramePage.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
                ScrollTab.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y)
                ScrollSettings.CanvasSize = UDim2.new(0, 0, 0, SettingsListLayout.AbsoluteContentSize.Y)
            end)
        end)
        
        local main = {}
        
        function main:Button(text, callback)
            -- ... (La función de Botón se implementará después de la de Dropdown)
        end
        
        function main:Toggle(text, config, desc, callback)
            -- ... (La función de Toggle se implementará después)
        end
        
        function main:Dropdown(text, option, var, callback)
            -- ... (La función de Dropdown se implementará después)
        end
        
        function main:Slider(text, min, max, set, callback)
            -- ... (La función de Slider se implementará después)
        end
        
        function main:Textbox(text, disappear, callback)
            -- ... (La función de Textbox se implementará después)
        end
        
        function main:Label(text)
            -- ... (La función de Label se implementará después)
        end
        
        function main:Separator(text)
            -- ... (La función de Separator se implementará después)
        end
        
        function main:Line()
            -- ... (La función de Linea se implementará después)
        end
        
        return main
    end
    
    return uitab
end

return Update
