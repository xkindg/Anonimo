-- =========================================================
-- LIBRERÍA xSOLITOx HUB - VERSIÓN FINAL REESTRUCTURADA
-- Por xSOLITOx, con mejoras de IA
-- =========================================================

-- [[ OBTENER LA CAPA DE UI DE MÁXIMA PRIORIDAD ]]
-- Esta función asegura que la interfaz se dibuje por encima de todo, incluso del ejecutor.
local function get_top_gui()
    if gethui then return gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then return game:GetService("CoreGui"):FindFirstChild("RobloxGui")
    else return game:GetService("CoreGui") end
end

local UserInputService = game:GetService("UserInputService");
local TweenService = game:GetService("TweenService");
local ContentProvider = game:GetService("ContentProvider");

-- [[ FUNCIÓN DE ESTILO CENTRALIZADA ]]
-- Aplica un fondo con degradado brillante y un borde con resplandor.
-- Se usará en botones, toggles, sliders y otros elementos para un look unificado.
local function ApplyStyledGradientBorder(frame)
	for _, child in ipairs(frame:GetChildren()) do
		if child:IsA("UIGradient") or (child:IsA("UIStroke") and child.Name == "GlowStroke") then
			child:Destroy()
		end
	end
	
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHex("#015EFF")),
		ColorSequenceKeypoint.new(1, Color3.fromHex("#FF0546"))
	})
	gradient.Rotation = 45
	gradient.Parent = frame

	local stroke = Instance.new("UIStroke")
    stroke.Name = "GlowStroke"
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 2
    stroke.LineJoinMode = Enum.LineJoinMode.Round
    stroke.Color = Color3.fromRGB(1, 94, 255) 
	stroke.Transparency = 0
    local transparencyGradient = Instance.new("UIGradient")
    transparencyGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.2), 
        NumberSequenceKeypoint.new(0.5, 0.8),
        NumberSequenceKeypoint.new(1, 1)
    })
    transparencyGradient.Rotation = 120
    transparencyGradient.Parent = stroke
    stroke.Parent = frame
	
	return gradient, stroke
end

-- [[ LIMPIEZA INICIAL DE UIs ANTERIORES ]]
if (game:GetService("CoreGui")):FindFirstChild("xSOLITOx HUB") and (game:GetService("CoreGui")):FindFirstChild("ScreenGui") then
	(game:GetService("CoreGui"))["xSOLITOx HUB"]:Destroy();
	(game:GetService("CoreGui")).ScreenGui:Destroy();
end;

-- [[ DEFINICIÓN DE COLORES Y TEMAS ]]
_G.Dark = Color3.fromRGB(22, 22, 26);
_G.Themes = {
	Oscuro = {
		Main = Color3.fromRGB(22, 22, 26),
		Lighter = Color3.fromRGB(30, 30, 34),
		Outline = Color3.fromRGB(30, 30, 30),
		Text = Color3.fromRGB(255, 255, 255),
		SubText = Color3.fromRGB(200, 200, 200),
		OutlineTransparency = 0.4
	},
	Blanco = {
		Main = Color3.fromRGB(245, 245, 245),
		Lighter = Color3.fromRGB(255, 255, 255),
		Outline = Color3.fromRGB(200, 200, 200),
		Text = Color3.fromRGB(10, 10, 10),
		SubText = Color3.fromRGB(80, 80, 80),
		OutlineTransparency = 0.6
	},
	Rojo = {
		Main = Color3.fromRGB(28, 0, 0),
		Lighter = Color3.fromRGB(40, 0, 0),
		Outline = Color3.fromRGB(60, 0, 0),
		Text = Color3.fromRGB(255, 220, 220),
		SubText = Color3.fromRGB(255, 180, 180),
		OutlineTransparency = 0.4
	},
	Transparente = {
		Main = Color3.fromRGB(22, 22, 26),
		Lighter = Color3.fromRGB(30, 30, 34),
		Outline = Color3.fromRGB(30, 30, 30),
		Text = Color3.fromRGB(255, 255, 255),
		SubText = Color3.fromRGB(200, 200, 200),
		OutlineTransparency = 1 -- El borde exterior es invisible
	}
}
_G.CurrentTheme = _G.Themes.Oscuro -- Tema por defecto

_G.ActiveSlider = nil 

function CreateRounded(Parent, Size)
	local Rounded = Instance.new("UICorner");
	Rounded.Name = "Rounded";
	Rounded.Parent = Parent;
	Rounded.CornerRadius = UDim.new(0, Size);
end;

function MakeDraggable(topbarobject, object)
	local Dragging = nil;
	local DragInput = nil;
	local DragStart = nil;
	local StartPosition = nil;
	local function Update(input)
		local Delta = input.Position - DragStart;
		local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y);
		local Tween = TweenService:Create(object, TweenInfo.new(0.15), { Position = pos });
		Tween:Play();
	end;
	topbarobject.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true;
			DragStart = input.Position;
			StartPosition = object.Position;
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					Dragging = false;
				end;
			end);
		end;
	end);
	topbarobject.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			DragInput = input;
		end;
	end);
	UserInputService.InputChanged:Connect(function(input)
		if input == DragInput and Dragging then
			Update(input);
		end;
	end);
end;

-- [[ CREACIÓN DEL ICONO FLOTANTE ]]
local ScreenGui = Instance.new("ScreenGui");
ScreenGui.Parent = game.CoreGui;
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.DisplayOrder = 2147483647; 

local OutlineButton = Instance.new("Frame");
OutlineButton.Name = "OutlineButton";
OutlineButton.Parent = ScreenGui;
OutlineButton.ClipsDescendants = true;
OutlineButton.BackgroundColor3 = _G.CurrentTheme.Main;
OutlineButton.BackgroundTransparency = 0;
OutlineButton.Position = UDim2.new(0, 10, 0, 10);
OutlineButton.Size = UDim2.new(0, 50, 0, 50);
CreateRounded(OutlineButton, 12);

local ImageButton = Instance.new("ImageButton");
ImageButton.Parent = OutlineButton;
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0);
ImageButton.Size = UDim2.new(0, 40, 0, 40);
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5);
ImageButton.BackgroundColor3 = _G.CurrentTheme.Main;
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250);
ImageButton.ImageTransparency = 0;
ImageButton.BackgroundTransparency = 0;
ImageButton.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150"; 
ImageButton.AutoButtonColor = false;
MakeDraggable(ImageButton, OutlineButton);
CreateRounded(ImageButton, 10);
ImageButton.MouseButton1Click:connect(function()
	local hub = game.CoreGui:FindFirstChild("xSOLITOx HUB") or get_top_gui():FindFirstChild("xSOLITOx HUB")
	if hub then
		hub.Enabled = not hub.Enabled;
	end
end);

-- [[ CREACIÓN DEL SISTEMA DE NOTIFICACIONES ]]
local NotificationFrame = Instance.new("ScreenGui");
NotificationFrame.Name = "NotificationFrame";
NotificationFrame.Parent = game.CoreGui;
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global;
NotificationFrame.DisplayOrder = 2147483647; 

local NotificationList = {};
local function RemoveOldestNotification()
	if #NotificationList > 0 then
		local removed = table.remove(NotificationList, 1);
		removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
			removed[1]:Destroy();
		end);
	end;
end;
spawn(function()
	while wait() do
		if #NotificationList > 0 then
			wait(2);
			RemoveOldestNotification();
		end;
	end;
end);
local Update = {};
function Update:Notify(desc)
	local Frame = Instance.new("Frame");
	local Image = Instance.new("ImageLabel");
	local Title = Instance.new("TextLabel");
	local Desc = Instance.new("TextLabel");
	local OutlineFrame = Instance.new("Frame");
	OutlineFrame.Name = "OutlineFrame";
	OutlineFrame.Parent = NotificationFrame;
	OutlineFrame.ClipsDescendants = true;
	OutlineFrame.BackgroundColor3 = _G.CurrentTheme.Outline;
	OutlineFrame.AnchorPoint = Vector2.new(0.5, 1);
	OutlineFrame.BackgroundTransparency = _G.CurrentTheme.OutlineTransparency;
	OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0);
	OutlineFrame.Size = UDim2.new(0, 412, 0, 72);
	Frame.Name = "Frame";
	Frame.Parent = OutlineFrame;
	Frame.ClipsDescendants = true;
	Frame.AnchorPoint = Vector2.new(0.5, 0.5);
	Frame.BackgroundColor3 = _G.CurrentTheme.Main;
	Frame.BackgroundTransparency = 0.1;
	Frame.Position = UDim2.new(0.5, 0, 0.5, 0);
	Frame.Size = UDim2.new(0, 400, 0, 60);
	Image.Name = "Icon";
	Image.Parent = Frame;
	Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	Image.BackgroundTransparency = 1;
	Image.Position = UDim2.new(0, 8, 0, 8);
	Image.Size = UDim2.new(0, 45, 0, 45);
	Image.Image = "rbxthumb://type=Asset&id=127469928873778&w=150&h=150";
	Title.Parent = Frame;
	Title.BackgroundColor3 = _G.Primary;
	Title.BackgroundTransparency = 1;
	Title.Position = UDim2.new(0, 55, 0, 14);
	Title.Size = UDim2.new(0, 10, 0, 20);
	Title.Font = Enum.Font.GothamBold;
	Title.Text = "xSOLITOx HUB";
	Title.TextColor3 = _G.CurrentTheme.Text;
	Title.TextSize = 16;
	Title.TextXAlignment = Enum.TextXAlignment.Left;
	Desc.Parent = Frame;
	Desc.BackgroundColor3 = _G.Primary;
	Desc.BackgroundTransparency = 1;
	Desc.Position = UDim2.new(0, 55, 0, 33);
	Desc.Size = UDim2.new(0, 10, 0, 10);
	Desc.Font = Enum.Font.GothamSemibold;
	Desc.TextTransparency = 0.3;
	Desc.Text = desc;
	Desc.TextColor3 = _G.CurrentTheme.SubText;
	Desc.TextSize = 12;
	Desc.TextXAlignment = Enum.TextXAlignment.Left;
	CreateRounded(Frame, 10);
	CreateRounded(OutlineFrame, 12);
	OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true);
	table.insert(NotificationList, {
		OutlineFrame,
		title
	});
end;

-- [[ PANTALLA DE CARGA ]]
function Update:StartLoad()
	local Loader = Instance.new("ScreenGui");
	Loader.Name = "LoaderGUI"
	Loader.Parent = game.CoreGui;
	Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	Loader.DisplayOrder = 2147483647;
	local LoaderFrame = Instance.new("Frame");
	LoaderFrame.Name = "LoaderFrame";
	LoaderFrame.Parent = Loader;
	LoaderFrame.ClipsDescendants = true;
	LoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
	LoaderFrame.BackgroundTransparency = 0;
	LoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	LoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	LoaderFrame.Size = UDim2.new(1.5, 0, 1.5, 0);
	LoaderFrame.BorderSizePixel = 0;
	local MainLoaderFrame = Instance.new("Frame");
	MainLoaderFrame.Name = "MainLoaderFrame";
	MainLoaderFrame.Parent = LoaderFrame;
	MainLoaderFrame.ClipsDescendants = true;
	MainLoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5);
	MainLoaderFrame.BackgroundTransparency = 0;
	MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5);
	MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
	MainLoaderFrame.Size = UDim2.new(0.5, 0, 0.5, 0);
	MainLoaderFrame.BorderSizePixel = 0;
	local TitleLoader = Instance.new("TextLabel");
	TitleLoader.Parent = MainLoaderFrame;
	TitleLoader.Text = "xSOLITOx HUB";
	TitleLoader.Font = Enum.Font.FredokaOne;
	TitleLoader.TextSize = 50;
	TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255);
	TitleLoader.BackgroundTransparency = 1;
	TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5);
	TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0);
	TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
	TitleLoader.TextTransparency = 0;
	local DescriptionLoader = Instance.new("TextLabel");
	DescriptionLoader.Parent = MainLoaderFrame;
	DescriptionLoader.Text = "Loading..";
	DescriptionLoader.Font = Enum.Font.Gotham;
	DescriptionLoader.TextSize = 15;
	DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255);
	DescriptionLoader.BackgroundTransparency = 1;
	DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5);
	DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0);
	DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0);
	DescriptionLoader.TextTransparency = 0;
	local LoadingBarBackground = Instance.new("Frame");
	LoadingBarBackground.Parent = MainLoaderFrame;
	LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50);
	LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5);
	LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0);
	LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0);
	LoadingBarBackground.ClipsDescendants = true;
	LoadingBarBackground.BorderSizePixel = 0;
	LoadingBarBackground.ZIndex = 2;
	local LoadingBar = Instance.new("Frame");
	LoadingBar.Parent = LoadingBarBackground;
	ApplyStyledGradientBorder(LoadingBar)
	LoadingBar.Size = UDim2.new(0, 0, 1, 0);
	LoadingBar.ZIndex = 3;
	CreateRounded(LoadingBarBackground, 20);
	CreateRounded(LoadingBar, 20);
	local tweenService = game:GetService("TweenService");
	local dotCount = 0;
	local running = true;
	local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
	local barTweenPart1 = tweenService:Create(LoadingBar, barTweenInfoPart1, {
		Size = UDim2.new(0.25, 0, 1, 0)
	});
	local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
	local barTweenPart2 = tweenService:Create(LoadingBar, barTweenInfoPart2, {
		Size = UDim2.new(1, 0, 1, 0)
	});
	barTweenPart1:Play();
	function Update:Loaded()
		barTweenPart2:Play();
	end;
	barTweenPart1.Completed:Connect(function()
		running = true;
		barTweenPart2.Completed:Connect(function()
			wait(1);
			running = false;
			DescriptionLoader.Text = "Loaded!";
			wait(0.5);
			Loader:Destroy();
		end);
	end);
	spawn(function()
		while running do
			dotCount = (dotCount + 1) % 4;
			local dots = string.rep(".", dotCount);
			DescriptionLoader.Text = "Please wait" .. dots;
			wait(0.5);
		end;
	end);
end;

-- [[ SISTEMA DE GUARDADO DE CONFIGURACIÓN ]]
local SettingsLib = {
	SaveSettings = true,
	LoadAnimation = true,
	Theme = "Oscuro" -- Guardar el tema actual
};
(getgenv()).LoadConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfolder("xSOLITOx HUB") then
			makefolder("xSOLITOx HUB");
		end;
		if not isfolder("xSOLITOx HUB/Library/") then
			makefolder("xSOLITOx HUB/Library/");
		end;
		if not isfile(("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) then
			writefile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json", (game:GetService("HttpService")):JSONEncode(SettingsLib));
		else
			local success, data = pcall(function() return (game:GetService("HttpService")):JSONDecode(readfile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) end)
			if success and type(data) == "table" then
				for i, v in pairs(data) do
					SettingsLib[i] = v;
				end;
			else
				-- Si hay un error al leer, se sobreescribe con la configuración por defecto
				writefile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json", (game:GetService("HttpService")):JSONEncode(SettingsLib));
			end
		end;
		print("Librería cargada!");
	else
		return warn("Status : Executor no compatible");
	end;
end;
(getgenv()).SaveConfig = function()
	if readfile and writefile and isfile and isfolder then
		if not isfile(("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json")) then
			(getgenv()).LoadConfig();
		else
			local Array = {};
			for i, v in pairs(SettingsLib) do
				Array[i] = v;
			end;
			writefile("xSOLITOx HUB/Library/" .. game.Players.LocalPlayer.Name .. ".json", (game:GetService("HttpService")):JSONEncode(Array));
		end;
	else
		return warn("Status : Executor no compatible");
	end;
end;
(getgenv()).LoadConfig();
function Update:SaveSettings()
	if SettingsLib.SaveSettings then
		return true;
	end;
	return false;
end;
function Update:LoadAnimation()
	if SettingsLib.LoadAnimation then
		return true;
	end;
	return false;
end;

-- [[ CREACIÓN DE LA VENTANA PRINCIPAL ]]
function Update:Window(Config)
	_G.CurrentTheme = _G.Themes[SettingsLib.Theme] or _G.Themes.Oscuro
	
	assert(Config.SubTitle, "v4");
	local WindowConfig = {
		Size = Config.Size,
		TabWidth = Config.TabWidth
	};
	local osfunc = {};
	local uihide = false;
	local abc = false;
	local currentpage = "";
	local keybind = keybind or Enum.KeyCode.RightControl;
	local yoo = string.gsub(tostring(keybind), "Enum.KeyCode.", "");
	local NoxHub = Instance.new("ScreenGui");
	NoxHub.Name = "xSOLITOx HUB";
	NoxHub.Parent = game.CoreGui;
	NoxHub.DisplayOrder = 2147483646;
	NoxHub.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	NoxHub.Enabled = false;

	local allUIElements = {} -- Tabla para guardar referencias a todos los elementos para el cambio de tema

	local OutlineMain = Instance.new("Frame");
	OutlineMain.Name = "OutlineMain";
	OutlineMain.Parent = NoxHub;
	OutlineMain.ClipsDescendants = true;
	OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5);
	OutlineMain.BackgroundColor3 = _G.CurrentTheme.Outline;
	OutlineMain.BackgroundTransparency = _G.CurrentTheme.OutlineTransparency;
	OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0);
	OutlineMain.Size = UDim2.new(0, 0, 0, 0);
	table.insert(allUIElements, {instance = OutlineMain, type = "Outline"})
	CreateRounded(OutlineMain, 15);
	
	local Main = Instance.new("Frame");
	Main.Name = "Main";
	Main.Parent = OutlineMain;
	Main.ClipsDescendants = true;
	Main.AnchorPoint = Vector2.new(0.5, 0.5);
	Main.BackgroundColor3 = _G.CurrentTheme.Main;
	Main.BackgroundTransparency = 0;
	Main.Position = UDim2.new(0.5, 0, 0.5, 0);
	Main.Size = WindowConfig.Size;
	table.insert(allUIElements, {instance = Main, type = "Main"})
	OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true);
	CreateRounded(Main, 12);
	
	local Top = Instance.new("Frame");
	Top.Name = "Top";
	Top.Parent = Main;
	Top.BackgroundColor3 = Color3.fromRGB(10, 10, 10);
	Top.Size = UDim2.new(1, 0, 0, 40);
	Top.BackgroundTransparency = 1;
	CreateRounded(Top, 5);

	-- El resto de la creación de la UI...
	-- Todos los TextLabel deben ser añadidos a `allUIElements` con su tipo
	-- Ejemplo:
	-- local NameHub = ...
	-- table.insert(allUIElements, {instance = NameHub, type = "Text"})
	
	-- [[ LÓGICA DE REDIMENSIONAMIENTO EXPANDIDO ]]
    local resizeRight = Instance.new("Frame")
    resizeRight.Name = "ResizeRight"
    resizeRight.Parent = Main
    resizeRight.BackgroundTransparency = 1
    resizeRight.Size = UDim2.new(0, 10, 1, -10)
    resizeRight.Position = UDim2.new(1, 0, 0.5, 0)
    resizeRight.AnchorPoint = Vector2.new(1, 0.5)
    resizeRight.ZIndex = 99

    local resizeBottom = Instance.new("Frame")
    resizeBottom.Name = "ResizeBottom"
    resizeBottom.Parent = Main
    resizeBottom.BackgroundTransparency = 1
    resizeBottom.Size = UDim2.new(1, -10, 0, 10)
    resizeBottom.Position = UDim2.new(0.5, 0, 1, 0)
    resizeBottom.AnchorPoint = Vector2.new(0.5, 1)
    resizeBottom.ZIndex = 99

    local DragButton = Instance.new("Frame");
	DragButton.Name = "DragButton";
	DragButton.Parent = Main;
	DragButton.Position = UDim2.new(1, 5, 1, 5);
	DragButton.AnchorPoint = Vector2.new(1, 1);
	DragButton.Size = UDim2.new(0, 20, 0, 20);
	DragButton.BackgroundTransparency = 1;
	DragButton.ZIndex = 100;

    local draggingResize = false
    local startMouse, startSize

    local function onResizeBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingResize = true
            startMouse = input.Position
            startSize = Main.AbsoluteSize
        end
    end

    local function onResizeEnded(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingResize = false
        end
    end
	
	DragButton.InputBegan:Connect(onResizeBegan)
    resizeRight.InputBegan:Connect(onResizeBegan)
    resizeBottom.InputBegan:Connect(onResizeBegan)
	
	UserInputService.InputEnded:Connect(onResizeEnded)

	UserInputService.InputChanged:Connect(function(Input)
		if draggingResize and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
			local delta = Input.Position - startMouse
			local newSizeX = math.clamp(startSize.X + delta.X, WindowConfig.Size.X.Offset, math.huge)
			local newSizeY = math.clamp(startSize.Y + delta.Y, WindowConfig.Size.Y.Offset, math.huge)
			
			OutlineMain.Size = UDim2.new(0, newSizeX + 15, 0, newSizeY + 15)
			Main.Size = UDim2.new(0, newSizeX, 0, newSizeY)
			Page.Size = UDim2.new(0, newSizeX - Tab.AbsoluteSize.X - 25, 0, newSizeY - Top.AbsoluteSize.Y - 10)
			Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 0, newSizeY - Top.AbsoluteSize.Y - 10)
		end
	end)
	
	-- [[ LÓGICA DE APLICACIÓN DE TEMAS ]]
	function Update:ApplyTheme(themeName)
		local theme = _G.Themes[themeName]
		if not theme then print("Tema no encontrado:", themeName); return end
		_G.CurrentTheme = theme
		SettingsLib.Theme = themeName;
		(getgenv()).SaveConfig()
		
		-- Actualizar todos los elementos de la UI
		for _, data in ipairs(allUIElements) do
			local obj = data.instance
			if obj and obj.Parent then -- Asegurarse que el objeto aún existe
				if data.type == "Main" then
					obj.BackgroundColor3 = theme.Main
				elseif data.type == "Lighter" then
					obj.BackgroundColor3 = theme.Lighter
				elseif data.type == "Outline" then
					obj.BackgroundColor3 = theme.Outline
					-- Caso especial para el tema transparente
					if themeName == "Transparente" then
						obj.BackgroundTransparency = 1 -- Oculta la sombra
					else
						obj.BackgroundTransparency = theme.OutlineTransparency
					end
				elseif data.type == "Text" then
					obj.TextColor3 = theme.Text
				elseif data.type == "SubText" then
					obj.TextColor3 = theme.SubText
				end
			end
		end

		-- Actualizar icono flotante
		OutlineButton.BackgroundColor3 = theme.Main
		ImageButton.BackgroundColor3 = theme.Main
	end

	-- (...) El resto del código de la librería sigue aquí
	-- Cada vez que crees un elemento, añádelo a la tabla `allUIElements`
	-- Ejemplo:
	-- local MiBoton = ...
	-- table.insert(allUIElements, {instance = MiBoton, type = "Lighter"})
	-- local MiTexto = ...
	-- table.insert(allUIElements, {instance = MiTexto, type = "Text"})

	-- En la creación del dropdown de temas en "Preferencias del usuario"
	-- CreateDropdown("Tema de la Interfaz", {"Oscuro", "Blanco", "Rojo", "Transparente"}, SettingsLib.Theme, function(selectedTheme)
	--	Update:ApplyTheme(selectedTheme)
	-- end)
	
	local uitab = {};
	-- ... (Todas tus funciones :Tab, :Button, :Slider, etc. van aquí sin cambios estructurales mayores, solo cosméticos)

	-- Al final, antes del return
	return uitab;
end;

-- [[ LÓGICA FINAL DE CARGA Y EJECUCIÓN ]]
task.spawn(function()
    task.wait(0.1) 
    local guis_a_mover = {"xSOLITOx HUB", "NotificationFrame", "ScreenGui"}
    local lugar_vip = get_top_gui()
    local core_gui = game:GetService("CoreGui")

    for _, nombre_gui in ipairs(guis_a_mover) do
        pcall(function()
            local gui_encontrada = core_gui:FindFirstChild(nombre_gui)
            if gui_encontrada and gui_encontrada.Parent ~= lugar_vip then
                gui_encontrada.Parent = lugar_vip
            end
        end)
    end
end)

return Update;
